<!-- Events Articles -->

<!-- Blog event container -->
<div class="blog-events-container w-full h-auto flex flex-col items-start gap-y-4 p-6 mb-12 justify-center lg:flex-wrap lg:flex-row lg:justify-start relative lg:gap-4 overflow-hidden lg:px-20">
  {% if blogs['events'] %}
    {% assign eventsArticles = blogs['events'].articles %}
    {% if eventsArticles.size > 0 %}
      {% assign max_articles = 6 %}
      {% assign total_articles = eventsArticles.size %}
      {% for eventArticle in eventsArticles %}
        <div
          class="blog-events-container w-full h-auto flex-col gap-y-2 items-start justify-center hidden lg:w-[calc(33.3%_-_0.67rem)] event-item"
          data-index="{{ forloop.index0 }}"
          style="display: {% if forloop.index0 < max_articles %}flex{% else %}none{% endif %};">
          <div class="events-container w-full h-auto min-h-[412px] rounded-2xl bg-[var(--secondary-background-color)] flex flex-col outline-none border border-transparent transition-all duration-150 lg:hover:border-black cursor-pointer">
            <!-- Events image Container -->
            <div class="w-full h-[196px] max-h-[196px] rounded-2xl">
              <img
                src="{{ eventArticle | img_url: 'master' }}"
                alt="{{ eventArticle.title }}"
                class="w-full h-full object-cover object-center rounded-t-2xl">
            </div>
            <div class="w-full h-auto flex flex-col items-start justify-center p-6 gap-y-6">
              <div class="events-details-primary w-full h-auto flex flex-col gap-y-6">
                <div class="w-full h-auto flex flex-col items-start justify-center gap-y-3">
                  <p class="article-title text-[24px] leading-[24px] tt-norms-pro-med">{{ eventArticle.title }}</p>
                  {% assign articleDate = eventArticle.metafields.custom.range_date.value %}
                  {% assign articleLocation = eventArticle.metafields.custom.article_location.value %}
                  {% if articleDate %}
                    <div class="w-auto h-auto bg-white px-4 py-1 rounded-full">
                      <p class="text-[12px] leading-[18px] tt-norms-pro-reg">{{ articleDate }}</p>
                    </div>
                  {% endif %}
                  {% if articleLocation %}
                    <p class="text-[12px] leading-[18px] tt-norms-pro-reg">{{ articleLocation }}</p>
                  {% endif %}
                </div>
                <div class="w-full h-auto flex flex-col items-start justify-center">
                  <a href="{{ section.settings.redirect_google_url }}">
                    <div class="events-details-cta-primary w-auto h-auto flex flex-row gap-x-2 items-center justify-start">
                      <p class="body-14 underline tt-norms-pro-med">{{ section.settings.redirect_google }}</p>
                      {% render 'cta-icon' %}
                    </div>
                  </a>
                  <a href="{{ section.settings.redirect_calendar }}">
                    <div class="events-details-cta-secondary w-auto h-auto flex flex-row gap-x-2 items-center justify-start">
                      <p class="body-14 underline tt-norms-pro-med">{{ section.settings.redirect_calendar }}</p>
                      {% render 'calendar-icon' %}
                    </div>
                  </a>
                </div>
              </div>
              <div class="events-cta lg:w-full lg:flex lg:justify-end">
                <div class="cta-choco-round h-[32px] min-w-[208px] book-appointment inline-flex">
                  <p class="body-14">{{ section.settings.cta_appointment }}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    {% endif %}
  {% endif %}

  <!-- container load more cta -->
  <div class="w-full h-auto flex flex-col items-center justify-center gap-y-4 lg:mt-11">
    <!-- cta load more -->
    <div class="w-auto h-auto max-w-[118px] flex items-center justify-center self-center cta-choco-round px-4 py-2 load-more-cta">
      <p class="text-[14px] leading-[20px] tt-norms-pro-med">{{ section.settings.load_more_cta | default: "Load 6 more" }}</p>
    </div>
    <!-- current item of total item -->
    <p class="text-[14px] leading-[20px] tt-norms-pro-reg current-items"></p>
  </div>  

  <!-- Events article added by blocks -->
  {% for block in section.blocks %}
    {% if block.type == "card-event" %}
      <div class="blog-events-container w-full h-auto flex-col gap-y-2 items-start justify-center hidden lg:w-[calc(33.3%_-_1.65rem)]">
        <div class="events-container w-full h-auto min-h-[224px] p-4 rounded-xl bg-[var(--secondary-background-color)] flex flex-col gap-y-6 outline-none border border-transparent transition-all duration-150  lg:hover:border-black cursor-pointer">
          <div class="events-details-primary w-full h-auto flex flex-col gap-y-1">
            <p class="article-title body-16-medium">{{ block.settings.card_event_title }}</p>
          </div>
          <div class="events-details-secondary w-full h-auto flex flex-col gap-y-2">
            <a href="{{ block.settings.card_redirect_google_url }}">
              <div class="events-details-cta-primary w-auto h-auto flex flex-row gap-x-2 items-center justify-start">
                <p class="body-14 underline">{{ block.settings.card_redirect_google }}</p>
                {% render 'cta-icon' %}
              </div>
            </a>
            <a href="{{ block.settings.card_redirect_google_calendar_url }}">
              <div class="events-details-cta-secondary w-auto h-auto flex flex-row gap-x-2 items-center justify-start">
                <p class="body-14 underline">{{ block.settings.card_redirect_calendar }}</p>
                {% render 'calendar-icon' %}
              </div>
            </a>
          </div>
          <div class="events-cta lg:w-full lg:flex lg:justify-end">
            <div class="cta-choco min-w-[208px] book-appointment inline-flex">
              <p class="body-14">{{ block.settings.card_cta_appointment }}</p>
            </div>
          </div>
        </div>
      </div>
    {% endif %}
  {% endfor %}

  <div class="json-ld-container hidden">
    <!-- json ld data structure -->
  </div>

  <!-- Book appointment Form -->
  <!-- Form container -->
  <div class="form-container w-full h-auto fixed bottom-0 left-0 right-0 p-4 rounded-t-[32px] shadow-custom bg-white z-50 transform translate-y-full transition-transform duration-300 ease-in-out hidden lg:flex lg:fixed lg:rounded-none lg:w-full lg:h-full lg:top-0 lg:left-0 lg:backdrop-blur-md lg:bg-black/50 lg:z-50 lg:items-center lg:justify-center">
    <div class="wrapper-form-appointment w-full flex flex-col gap-y-6 mx-auto lg:bg-white lg:w-[640px] lg:h-auto lg:rounded-lg lg:p-10">

      <!-- Form Header -->
      <div class="form-appointment-headers w-full h-auto flex flex-col items-center justify-center relative">
        <p class="body-14-medium events-name"></p>

        <!-- Close Icon -->
        <div class="icon-content absolute right-0 top-0 cursor-pointer">
          {% render 'x-icon' %}
        </div>
      </div>

      <!-- Form Content -->
      <div class="form-appointment-content w-full h-auto flex flex-col items-start justify-center">
        {% form 'contact'
          , class: "w-full h-full flex flex-col items-start justify-center gap-y-3 mt-4 mb-4" %}

          {% if form.posted_successfully? %}
            <!-- Confirm pop-up -->
            <div class="confirm-pop-up w-full h-auto fixed bottom-0 right-0 left-0 p-4 flex flex-col items-start justify-between rounded-lg border border-black bg-white hidden transition-opacity duration-300 ease-in-out">
              {% render 'check-icon' %}
              <p class="body-12">{{ section.settings.confirm_message }}</p>
            </div>
          {% else %}

            <!-- Form Errors -->
            {{ form.errors | default_errors }}

            <!-- First Name -->
            <div class="form-group w-full h-auto flex flex-col items-start justify-center">
              <input
                type="text"
                name="contact[first_name]"
                class="w-full p-3 rounded-lg bg-[var(--primary-background-color)] border-[0.5px] ring-black  border-transparent focus:outline-none focus:border-transparent placeholder:body-14 placeholder:text-black"
                value="{% if form.first_name != blank %}{{ form.first_name }}{% endif %}"
                placeholder="{{ section.settings.form_first_name }}">
            </div>

            <!-- Last Name -->
            <div class="form-group w-full h-auto flex flex-col items-start justify-center">
              <input
                type="text"
                name="contact[last_name]"
                class="w-full p-3 rounded-lg bg-[var(--primary-background-color)] border-[0.5px] ring-black focus:ring-0 border-transparent focus:outline-none focus:border-transparent placeholder:body-14 placeholder:text-black"
                value="{% if form.last_name != blank %}{{ form.last_name }}{% endif %}"
                placeholder="{{ section.settings.form_last_name }}">
            </div>

            <!-- Email -->
            <div class="form-group w-full h-auto flex flex-col items-start justify-center">
              <input
                type="email"
                name="contact[email]"
                value="{% if form.email != blank %}{{ form.email }}{% endif %}"
                class="w-full p-3 rounded-lg bg-[var(--primary-background-color)] border-[0.5px] ring-black focus:ring-0 border-transparent focus:outline-none focus:border-transparent placeholder:body-14 placeholder:text-black"
                placeholder="{{ section.settings.form_email }}"
                required>
            </div>

            <!-- calendar -->

            <div class="form-group w-full h-auto flex flex-col items-start justify-center relative">
              <div class="absolute right-0 top-0 bottom-0 flex items-center pr-4 pointer-events-none">
                {% render 'calendar-icon' %}
              </div>
              <input
                datepicker
                id="default-datepicker"
                datepicker-autohide
                data-picker-orientation="left bottom"
                name="contact[date]"
                type="text"
                class="block w-full rounded-lg bg-[var(--primary-background-color)] border-[0.5px] border-transparent focus:outline-none ring-black focus:ring-0 focus:border-transparent placeholder:body-14 placeholder:text-black"
                placeholder="Select date">
            </div>


            <!-- Message -->
            <div class="form-group w-full h-auto flex flex-col items-start justify-center">
              <textarea
                name="contact[message]"
                class="w-full p-3 rounded-lg bg-[var(--primary-background-color)] ring-black focus:ring-0 border-[0.5px] border-transparent focus:outline-none focus:border-transparent placeholder:body-14 placeholder:text-black"
                placeholder="{{ section.settings.form_content }} {% if form.message != blank %}{{ form.message }}{% endif %}"></textarea>
            </div>

            <!-- container checkbox -->
            <div class="w-full h-auto flex flex-col items-start justify-center gap-y-3">
              <!-- Marketing Consent Checkbox -->
              <div class="form-group w-full flex items-center gap-2">
                <input
                  type="checkbox"
                  id="marketingConsent"
                  name="contact[marketing_consent]"
                  class="w-4 h-4 appearance-none border border-black rounded checked:bg-black checked:border-black focus:outline-none focus:ring-0 focus:ring-transparent">
                <label for="marketingConsent" class="text-[12px] leading-[18px]  tt-norms-pro-reg">
                  {{ section.settings.marketing_consent_label | default: "By giving your consent, we may send you
                                                          commercial communications relating to Pardo Yachts via e-mail, telephone, and we may carry out
                                                          market research in order to evaluate your level of satisfaction with our products and services." }}
                  <span class="text-[12px] leading-[18px] underline tt-norms-pro-reg link-to-pop-up" data-attribute="marketing">{{ section.settings.marketing_policy | default: "Privacy Policy" }}</span>
                </label>
              </div>

              <!-- Profiling Consent Checkbox -->
              <div class="form-group w-full flex items-center gap-2 opacity-30">
                <input
                  type="checkbox"
                  id="profilingConsent"
                  name="contact[profiling_consent]"
                  class="w-4 h-4 appearance-none border border-black rounded checked:bg-black checked:border-black focus:outline-none focus:ring-0 focus:ring-transparent">
                <label for="profilingConsent" class="text-[12px] leading-[18px] tt-norms-pro-reg">
                  {{ section.settings.profiling_consent_label | default: "By giving your consent, we will be able to
                                                          send you personalized commercial communications based on your purchasing habits and, in general,
                                                          based on your interests, your requests and your interactions with us." }}
                  <span class="text-[12px] leading-[18px] underline tt-norms-pro-reg link-to-pop-up" data-attribute="profilation">{{ section.settings.profilation_policy | default: "Privacy Policy" }}</span>
                </label>
              </div>

            </div>


            <!-- cta-privacy-page -->
            <div class="w-full h-auto flex flex-col items-start justify-center">
              <a href="{{ section.settings.cta_privacy_page_redirect }}">
                <p class="body-14 leading-[20px] underline tt-norms-pro-reg">{{ section.settings.cta_privacy_page | default: "Privacy Policy" }}</p>
              </a>
            </div>


            <!-- Submit Button -->
            <div class="cta-choco submit-cta">
              <button type="submit" id="Subscribe">{{ section.settings.form_cta }}</button>
            </div>
          {% endif %}
        {% endform %}
      </div>
    </div>
  </div>

</div>

<!-- Past Articles Container -->
<div class="w-full h-auto flex items-start justify-center flex-col hidden past-event overflow-x-hidden">

  <!-- Title section here -->
  <div class="w-full h-auto flex items-center justify-start px-6 pt-14 pb-8 lg:pl-20 lg:pr-6 lg:pt-[60px] lg:pb-10">
    <p class="text-[48px] leading-[52px]">{{ section.settings.main_title | default: "Past events" }}</p>
  </div>

  <!-- Arrows box -->
  <div class="w-full h-auto hidden lg:flex lg:justify-end lg:gap-x-6 lg:px-10 lg:mb-10">
    <div class="w-auto h-auto flex-row inline-flex gap-x-4 rounded-full bg-[#F7F7F7] px-4 py-2 hover:bg-[#A9A09E] transition-all duration-150 ease-in cursor-pointer">
      <button id="prev-Arrow-past" class="carousel-arrow left-arrow flex items-center justify-center w-6 h-6">
        {% render 'arrow-left-black' %}
      </button>
      <button id="next-Arrow-past" class="carousel-arrow right-arrow flex items-center justify-center w-6 h-6">
        {% render 'arrow-right-black' %}
      </button>
    </div>
  </div>

  <!-- Scroll Past Article Container -->
  <div class="events-list-container w-full h-auto flex items-start justify-center flex-col py-4 px-6 lg:py-0">

    <!-- Scrolling container -->
    <div class="w-[calc(100%+4rem)] px-8 -mx-8 overflow-x-auto h-auto flex flex-row items-center justify-start gap-x-2 p-0 mb-8 lg:px-20 lg:mb-[120px] lg:gap-x-4">
      {% assign allBlogs = "Events, " | split: "," %}
      {% for handle in allBlogs %}
        {% for article in blogs[handle].articles %}
          {% assign cardColorsValue = "#908987,#000000,#423C3B,#908987,#A9A09E" | split: "," %}
          {% assign article_Id = article.id %}
          {% assign colorIndex = article_Id | modulo: cardColorsValue.size %}
          {% assign cardColor = cardColorsValue[colorIndex] %}

          {% if cardColor == '#423C3B' or cardColor == '#000000' %}
            {% assign textColorClass = 'text-white' %}
          {% else %}
            {% assign textColorClass = 'text-black' %}
          {% endif %}

          {% if cardColor == '#000000' %}
            {% assign textColorDate = 'text-[#818181]' %}
          {% else %}
            {% assign textColorDate = 'text-white' %}
          {% endif %}

          {% if article.tags contains 'Past' %}
            {% assign articleDate = article.metafields.custom.range_date.value %}
            {% assign stringParts = articleDate | split: "" %}
            {% assign newDate = stringParts | slice: 2, stringParts.size | join: '' %}
            {% assign articleLocation = article.metafields.custom.article_location.value %}

              <div class="w-[247px] min-w-[247px] h-[286px] max-h-[286px] p-6 rounded-2xl flex flex-col items-start justify-start gap-y-6 relative lg:w-[320px] lg:min-w-[320px] border border-transparent transition-all duration-150 lg:hover:border-black cursor-pointer" style="background-color: {{ cardColor }};">

              <!-- Card Content -->
              <div class="w-full h-auto flex items-start justify-center flex-col gap-y-4">
                <p class="text-[12px] leading-[18px] tt-norms-pro-reg {{ textColorDate }}">
                  {{ newDate | upcase }}
                </p>
                <p class="text-[24px] leading-[30px] {{ textColorClass }}">{{ article.title }}</p>
                <p class="text-[12px] leading-[18px] tt-norms-pro-reg {{ textColorClass }}">
                  {{ articleLocation }}
                </p>
                <p class="body-14 {{ textColorClass }}">{{ article.content | truncate: 100 }}</p>
              </div>

              <!-- Button Content -->
              <div class="w-full h-auto flex items-center justify-end absolute right-6 bottom-6">
                <!-- Container arrow button -->
                <a href="{{ article.url }}">
                  <div class="inline-flex p-2 rounded-xl bg-white items-center justify-center">
                    {% render 'arrow-right-black' %}
                  </div>
                </a>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      {% endfor %}
    </div>

  </div>
</div>

<style>
  .datepicker-cell.selected {
    background-color: black !important;
  }

  .submit-cta button:disabled {
    opacity: 0.2;
    cursor: not-allowed;
  }
</style>


<script>
  document.addEventListener("DOMContentLoaded", function () {
  
  const marketingCheckbox = document.getElementById('marketingConsent'); // Checkbox Marketing
  const profilingCheckbox = document.getElementById('profilingConsent'); // Checkbox Profiling
  const profilingContainer = profilingCheckbox.closest('.form-group'); // Contenitore Profiling
  const formInputs = document.querySelectorAll('input[required]'); // Input obbligatori
  const submitButton = document.querySelector('.submit-cta'); // Bottone di submit
  
   // Funzione per aggiornare lo stato del pulsante submit
   const updateSubmitButtonState = () => {
            const allFieldsFilled = Array.from(formInputs).every(input => input.value.trim() !== '');
            if (allFieldsFilled) {
                submitButton.style.opacity = '1';
                submitButton.disabled = false;
            } else {
                submitButton.style.opacity = '.2';
                submitButton.disabled = true;
            }
        };
  
        // Inizializza lo stato del pulsante al caricamento
        updateSubmitButtonState();
  
             // Aggiungi event listeners a tutti gli input obbligatori
             formInputs.forEach(input => {
            input.addEventListener('input', updateSubmitButtonState);
        });
  
             // Logica per aggiornare lo stato della checkbox Profiling
             const updateProfilingState = () => {
            if (marketingCheckbox.checked) {
                profilingContainer.style.opacity = '1';
                profilingCheckbox.disabled = false;
            } else {
                profilingContainer.style.opacity = '0.3';
                profilingCheckbox.disabled = true;
                profilingCheckbox.checked = false; // Deseleziona Profiling se Marketing non è selezionato
            }
        };
  
        marketingCheckbox.addEventListener('change', () => {
            updateProfilingState();
        });
  
        updateProfilingState();
  
           // Gestione pop-up privacy
           const marketingPopUpContainer = document.querySelector('.pop-up-marketing');
        const profilationPopUpContainer = document.querySelector('.pop-up-profilation');
        const linksToPopUp = document.querySelectorAll('.link-to-pop-up');
        const closingPopUpIcon = document.querySelectorAll('.closing-pop-up');
  
        linksToPopUp.forEach((link) => {
            const linkReference = link.getAttribute('data-attribute');
            link.addEventListener('click', () => {
                if (linkReference === "marketing") {
                    openPopUp(marketingPopUpContainer);
                } else if (linkReference === "profilation") {
                    openPopUp(profilationPopUpContainer);
                }
            });
        });
  
        closingPopUpIcon.forEach((icon) => {
            const iconReference = icon.getAttribute('data-attribute');
            icon.addEventListener('click', () => {
                if (iconReference === "marketing") {
                    closePopUp(marketingPopUpContainer);
                } else if (iconReference === "profilation") {
                    closePopUp(profilationPopUpContainer);
                }
            });
        });
  
        function openPopUp(elementToOpen) {
            elementToOpen.classList.remove('hidden');
            elementToOpen.classList.add('flex');
        }
  
        function closePopUp(elementToClose) {
            elementToClose.classList.add('hidden');
            elementToClose.classList.remove('flex');
        }
  
    const appointmentButtons = document.querySelectorAll('.book-appointment');
    const formContainer = document.querySelector('.form-container');
    const eventNameElement = formContainer.querySelector('.events-name');
    const confirmPopup = document.querySelector('.confirm-pop-up');
    const closeIcon = formContainer.querySelector('.icon-content');
    const jsonLdContainer = document.querySelector('.json-ld-container');
  
    appointmentButtons.forEach(button => {
      button.addEventListener('click', function () {
        const articleTitle = this.closest('.events-container').querySelector('.article-title').innerText;
        eventNameElement.textContent = articleTitle;
        formContainer.classList.remove('hidden');
        formContainer.classList.remove('translate-y-full');
        formContainer.classList.add('translate-y-0');
        document.body.classList.add('no-scroll');
        if (window.innerWidth <= 435) {
          const formContainerPosition = formContainer.getBoundingClientRect().top + window.pageYOffset;
          window.scrollTo({
            top: formContainerPosition - 100,
            behavior: 'smooth'
          });
        }
      });
    });
  
    closeIcon.addEventListener('click', function () {
      formContainer.classList.add('translate-y-full');
      document.body.classList.remove('no-scroll');
      setTimeout(() => {
        formContainer.classList.add('hidden');
      }, 300);
    });
  
    //handle json ld for Google
    const shopifyStore = 'cantiere-del-pardo';
    const apiVersion = '2023-01';
    const storeFrontaccessToken = 'c1e0c954c3a0d709e18e96774f3e04b2';
    const handle = 'events';
  
    // GraphQL query
    const query = `
  {
  blogByHandle(handle: "${handle}") {
    id
    title
    articles(first: 100) {
      edges {
        node {
          id
          title
          contentHtml
          publishedAt
          metafields(identifiers: [
            {namespace: "custom", key: "when"},
            {namespace: "custom", key: "location"}
          ]) {
            key
            value
          }
        }
      }
    }
  }
  }
  `;
  
    const fetchBlog = async () => {
      const baseUrl = `https://${shopifyStore}.myshopify.com/api/${apiVersion}/graphql.json`;
  
      try {
        const response = await fetch(baseUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': storeFrontaccessToken
          },
          body: JSON.stringify({query})
        });
  
        if (!response.ok) {
          throw new Error(`Error: ${response.status}`);
        }
  
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error fetching blog:', error);
      }
    };
  
    const buildJsonLd = async () => {
      const data = await fetchBlog();
      if (data && data.data && data.data.blogByHandle) {
        const articles = data.data.blogByHandle.articles.edges;
  
        articles.forEach((articleObj) => {
          const article = articleObj.node;
  
          const whenMetafield = article.metafields.find(mf => mf.key === 'when');
          const locationMetafield = article.metafields.find(mf => mf.key === 'location');
  
          const jsonLd = {
            "@context": "https://schema.org",
            "@type": "Event",
            "name": article.title,
            "description": article.contentHtml,
            "startDate": whenMetafield ? whenMetafield.value : null,
            "location": {
              "@type": "Place",
              "name": locationMetafield ? locationMetafield.value : null
            },
            "datePublished": article.publishedAt,
            "mainEntityOfPage": `https://${shopifyStore}/articles/${article.id}`
          };
  
  
          const scriptEl = document.createElement('script');
          scriptEl.type = 'application/ld+json';
          scriptEl.textContent = JSON.stringify(jsonLd);
  
  
          jsonLdContainer.appendChild(scriptEl);
        });
      } else {
        console.error('No blog or articles found.');
      }
    };
  
  
    buildJsonLd();
  
  
    const prevArrow = document.getElementById('prev-Arrow-past');
    const nextArrow = document.getElementById('next-Arrow-past');
    const scrollContainer = document.querySelector('.events-list-container > div');
  
    if (!scrollContainer || !prevArrow || !nextArrow) {
        console.error('Error: Scroll container or arrows not found.');
        return;
    }
  
    const cards = Array.from(scrollContainer.children);
    if (cards.length === 0) {
        console.error('Error: No cards found inside the scroll container.');
        return;
    }
  
    const cardWidth = cards[0].offsetWidth;
    const cardMarginRight = parseInt(getComputedStyle(cards[0]).marginRight || '0', 10);
    const scrollAmount = cardWidth + cardMarginRight;
  
    function updateArrows() {
        const currentScrollLeft = scrollContainer.scrollLeft;
        const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;
  
        prevArrow.classList.toggle('disabled', currentScrollLeft === 0);
        nextArrow.classList.toggle('disabled', currentScrollLeft >= maxScrollLeft);
    }
  
    function scrollContainerBy(amount) {
        const currentScrollLeft = scrollContainer.scrollLeft;
        const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;
  
        let newScrollLeft = Math.min(Math.max(currentScrollLeft + amount, 0), maxScrollLeft);
  
        scrollContainer.scrollTo({
            left: newScrollLeft,
            behavior: 'smooth'
        });
  
        setTimeout(updateArrows, 300); 
    }
  
  
    prevArrow.addEventListener('click', function () {
        scrollContainerBy(-scrollAmount);
    });
  
    nextArrow.addEventListener('click', function () {
        scrollContainerBy(scrollAmount);
    });
  
    updateArrows();
    scrollContainer.addEventListener('scroll', updateArrows);
  
  
  const articles = document.querySelectorAll(".event-item");
  const loadMoreButton = document.querySelector(".load-more-cta");
  const currentItemsDisplay = document.querySelector(".current-items");
  let visibleCount = 6; 
  const maxToShow = 6;
  const totalItems = articles.length;
  

  const updateVisibleArticles = () => {
    articles.forEach((article, index) => {
      if (index < visibleCount) {
        article.style.display = "flex"; 
      } else {
        article.style.display = "none";
      }
    });
  
  
    currentItemsDisplay.textContent = `${Math.min(visibleCount, totalItems)} of ${totalItems}`;
  
    if (visibleCount >= totalItems) {
      loadMoreButton.style.display = "none";
      currentItemsDisplay.style.display= "none";
    }
  };
  
  updateVisibleArticles();
  
  loadMoreButton.addEventListener("click", function () {
    visibleCount += maxToShow;
    updateVisibleArticles();
  });
  
  
  });
</script>


{% comment %} 
      Schema Section Settings here 
{% endcomment %}
{% schema %}
  {
    "name": "contact-form",
    "settings": [
      {
        "type": "text",
        "id": "redirect_google",
        "label": "Google Maps",
        "default": "Show on Google maps",
        "info": "Set the text of google maps cta"
      },
      {
        "type": "url",
        "id": "redirect_google_url",
        "label": "Google Maps Url",
        "info": "Set the correct google maps url"
      },
      {
        "type": "text",
        "id": "redirect_calendar",
        "label": "Google Calendar",
        "default": "Open Google Calendar",
        "info": "Set the text of google calendar cta"
      },
      {
        "type": "text",
        "id": "cta_appointment",
        "label": "Cta Appointment",
        "default": "Book appointment",
        "info": "Set the text of the appointment cta"
      }, {
        "type": "url",
        "id": "redirect_google_calendar",
        "label": "Google Calendar Url",
        "info": "Set the correct google calendar url"
      }, {
        "type": "text",
        "id": "confirm_message",
        "label": "Confirm form message",
        "default": "Request sent",
        "info": "Set the input placeholder"
      }, {
        "type": "text",
        "id": "form_first_name",
        "label": "Form Name",
        "default": "Name",
        "info": "Set the input placeholder"
      }, {
        "type": "text",
        "id": "form_last_name",
        "label": "Last Name",
        "default": "Last Name",
        "info": "Set the input placeholder"
      }, {
        "type": "text",
        "id": "form_email",
        "label": "Email",
        "default": "Email*",
        "info": "Set the input placeholder"
      }, {
        "type": "text",
        "id": "form_content",
        "label": "Message",
        "default": "Message",
        "info": "Set the input placeholder"
      }, {
        "type": "textarea",
        "id": "form_privacy",
        "label": "Secondary Info",
        "default": "I would like to receive marketing communications about products, services, and events offered by CANTIERE DEL PARDO S.p.A. I understand that these communications may be personalized based on my interests, preferences, and use of products and services, including invitations to provide feedback on the customer experience.",
        "info": "Set the privacy text directly here"
      }, {
        "type": "text",
        "id": "form_cta",
        "label": "CTA Text",
        "default": "Send",
        "info": "Set the Text of the Cta's Form"
      }
    ],
    "blocks": [
      {
        "name": "card-event",
        "type": "card-event",
        "settings": [

          {
            "type": "text",
            "id": "card_event_title",
            "label": "Card Event Title",
            "default": "Custom Event",
            "info": "Set the event title"
          },
          {
            "type": "text",
            "id": "card_redirect_google",
            "label": "Google Maps",
            "default": "Show on Google maps",
            "info": "Set the text of google maps cta"
          },
          {
            "type": "url",
            "id": "card_redirect_google_url",
            "label": "Google Maps Url",
            "info": "Set the correct google maps url"
          },
          {
            "type": "text",
            "id": "card_redirect_calendar",
            "label": "Google Calendar",
            "default": "Show on Google Calendar",
            "info": "Set the text of google calendar cta"
          }, {
            "type": "url",
            "id": "card_redirect_google_calendar_url",
            "label": "Google calendar Url",
            "info": "Set the correct google maps url"
          }, {
            "type": "text",
            "id": "card_cta_appointment",
            "label": "Cta Appointment",
            "default": "Book appointment",
            "info": "Set the cta text of the card event"
          }

        ]
      }
    ],
    "max_blocks": 5
  }
{% endschema %}