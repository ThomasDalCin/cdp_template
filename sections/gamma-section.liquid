<div class="w-full h-auto py-14 bg-[#A9A09E] overflow-x-hidden relative">
    <div
        class="w-auto h-full hidden lg:flex lg:items-center lg:justify-center lg:absolute lg:left-[42px] lg:top-0 lg:z-10">
        <div
            class="w-14 h-14 rounded-full p-4 bg-white flex items-center justify-center lg:hover:w-[72px] transition-all duration-150 ease-in cursor-pointer">
            <button id="prev-Arrow-gamma" class="carousel-arrow-gamma left-arrow-gamma">
                {% render 'arrow-left-black' %}
            </button>
        </div>
    </div>

    <div
        class="w-auto h-full hidden lg:flex lg:items-center lg:justify-center lg:absolute lg:right-[42px] lg:top-0 lg:z-10">
        <div
            class="w-14 h-14 rounded-full p-4 bg-white flex items-center justify-center lg:hover:w-[72px] transition-all duration-150 ease-in cursor-pointer">
            <button id="next-Arrow-gamma" class="carousel-arrow-gamma right-arrow-gamma">
                {% render 'arrow-right-black' %}
            </button>
        </div>
    </div>

    <div class="w-full h-auto flex flex-col items-start justify-center gap-y-6 lg:gap-y-20">
        <div
            class="w-full h-auto flex flex-col items-start justify-center gap-y-10 lg:items-center lg:justify-center lg:gap-y-20">
            <div class="wrap-container w-full h-auto lg:flex lg:items-center lg:justify-center">
                <div
                    class="w-full h-auto flex flex-row items-center justify-start p-6 gap-x-6 relative wrap-content overflow-x-auto lg:items-center lg:gap-x-10 lg:justify-center lg:inline-flex lg:w-auto">
                    <div class="w-auto max-w-[99px] h-auto tab-gamma cursor-pointer lg:max-w-none" id="All Models">
                        <p
                            class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                            All Models</p>
                    </div>
                    {% assign sorted_collections = collections | sort: 'title' | reverse %}
                    {% assign collectionOrder= 'walkaround,endurance,grand-touring' | split: ',' %}
                    {% for collectionHandle in collectionOrder %}
                    {% assign collection = collections[collectionHandle] %}
                    {% if collection %}
                    <div class="w-auto max-w-[99px] h-auto tab-gamma lg:cursor-pointer lg:max-w-none"
                        id="{{ collection.title }}">
                        <p
                            class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                            {{ collection.title }}</p>
                    </div>
                    {% endif %}
                    {% endfor %}
                    <div class="union-icon w-auto h-auto absolute transition-all duration-200 ease-in top-1">
                        {% render 'union-icon' %}
                    </div>
                </div>
            </div>

            <div class="magnetic-scroll gamma-scroll w-full h-auto flex flex-row gap-x-2 overflow-x-auto items-center justify-start py-6  snap-x snap-mandatory lg:pl-[319px] lg:scroll-pl-[319px] lg:p-0 lg:px-20 lg:h-[368px] lg:min-h-[368px]"
                data-collection="{{ collection.title }}" style="display: flex;">
                {% for collection in sorted_collections %}
                {% if collection.title != "Pardo approved" %}
                {% for product in collection.products %}
                {% assign product_images = product.images %}
                {% if product_images.size > 0 %}
                {% assign model_image = product_images[0] %}
                <div class="image-scroll flex-shrink-0 flex flex-col items-center justify-center snap-start relative lg:w-[800px] lg:h-full lg:last-of-type:mr-[300px]"
                    data-collection="{{ collection.title }}" data-content="{{ product.title }}">
                    <a href="{{ product.url }}">
                        <img class="w-full h-full object-cover pImage z-10" src="{{ model_image | img_url: 'master' }}"
                            alt="{{ model_image.alt }}">
                    </a>
                    <div
                        class="w-full h-auto flex items-center justify-center left-0 -bottom-[10px] right-0 absolute z-20">
                        <p class="text-[40px] leading-[46px] tt-norms-pro-light lg:text-[128px] lg:leading-[128px]">{{
                            product.title | replace: 'Pardo', '' }}</p>
                    </div>
                </div>
                {% endif %}
                {% endfor %}
                {% endif %}
                {% endfor %}
            </div>

            <div
                class="w-full h-auto flex flex-col items-start justify-center px-6 lg:flex-row lg:gap-x-4 lg:items-center lg:justify-center lg:px-12 lg:py-12">
                <div
                    class="w-full h-auto flex items-start justify-center gap-y-4 flex-col details-content lg:flex-row lg:gap-x-4 lg:items-center lg:justify-center">
                    <div class="w-full h-[56px] min-h-[56px] lg:w-[220px]">
                        <a href="#" class="w-full h-full cta-black tt-norms-pro-med" id="cta-button-collection">{{
                            section.settings.cta_gamma_product | default: "Discover" }}</a>
                    </div>
                    <div class="w-full h-[56px] min-h-[56px] lg:w-[220px]">
                        <a href="pages/locate-delear"
                            class="w-full h-full cta-transparent tt-norms-pro-med lg:bg-white lg:text-black lg:border-transparent"
                            id="cta-delear">{{ section.settings.cta_gamma_delear | default: "Find a dealer" }}</a>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<style>
    .tab-text {
        color: white;
        transition: color 0.3s ease;
    }

    .tab-gamma.active-tab .tab-text {
        color: black;
        font-family: "TT-Norms-Pro-Regular";
    }

    .tab-gamma:hover .tab-text {
        color: #000;
    }

    .magnetic-scroll {
        position: relative;
        overflow-x: auto;
        overflow-y: hidden;
    }

    .union-icon {
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.3s ease;
    }

    @media screen and (max-width: 440px) {
        .magnetic-scroll {
            padding-left: 56.28px;
            scroll-padding-left: 56.28px;
        }

        .image-scroll {
            width: 327.442px;
            height: 150.419px;
        }
    }

    @media screen and (max-width: 430px) {
        .magnetic-scroll {
            padding-left: 55px;
            scroll-padding-left: 55px;
        }


        .image-scroll {
            width: 320px;
            height: 147px;
        }
    }

    @media screen and (max-width: 393px) {
        .magnetic-scroll {
            padding-left: 50.27px;
            scroll-padding-left: 50.27px;
        }

        .image-scroll {
            width: 292.465px;
            height: 134.351px;
        }

    }

    @media screen and (max-width: 375px) {
        .magnetic-scroll {
            padding-left: 47.97px;
            scroll-padding-left: 47.97px;
        }

        .image-scroll {
            width: 279.07px;
            height: 128.198px;
        }
    }

    @media screen and (max-width: 320px) {
        .magnetic-scroll {
            padding-left: 40.9px;
            scroll-padding-left: 40.9px;
        }

        .image-scroll {
            width: 238.14px;
            height: 109.395px;
        }
    }

    .carousel-arrow-gamma.disabled {
        opacity: 0.5;
        pointer-events: none;
    }

    .carousel-arrow-gamma:not(.disabled) {
        opacity: 1;
        pointer-events: auto;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tabs = document.querySelectorAll('.tab-gamma');
        const imageScrolls = document.querySelectorAll('.image-scroll');
        const magneticScroll = document.querySelector('.magnetic-scroll');
        const unionIcon = document.querySelector('.union-icon');
        const wrapContent = document.querySelector('.wrap-content');
        const ctaButton = document.getElementById('cta-button-collection');
        const wrapContainer = document.querySelector('.wrap-container');
        const prevArrow = document.getElementById('prev-Arrow-gamma');
        const nextArrow = document.getElementById('next-Arrow-gamma');

        if (!magneticScroll || !prevArrow || !nextArrow) {
            console.error('Error: Scroll container or arrows not found.');
            return;
        }

        const items = Array.from(magneticScroll.children);
        if (items.length === 0) {
            console.error('Error: No items found inside the scroll container.');
            return;
        }

        const itemWidth = items[0].offsetWidth;
        const itemMarginRight = parseInt(getComputedStyle(items[0]).marginRight || '0', 10);
        const scrollAmount = itemWidth + itemMarginRight;


        function updateArrows() {
            const currentScrollLeft = magneticScroll.scrollLeft;
            const maxScrollLeft = magneticScroll.scrollWidth - magneticScroll.clientWidth;

            prevArrow.classList.toggle('disabled', currentScrollLeft === 0);
            nextArrow.classList.toggle('disabled', currentScrollLeft >= maxScrollLeft);
        }


        function scrollContainerBy(amount) {
            const currentScrollLeft = magneticScroll.scrollLeft;
            const maxScrollLeft = magneticScroll.scrollWidth - magneticScroll.clientWidth;

            let newScrollLeft = Math.min(Math.max(currentScrollLeft + amount, 0), maxScrollLeft);

            magneticScroll.scrollTo({
                left: newScrollLeft,
                behavior: 'smooth'
            });

            setTimeout(updateArrows, 300);
        }


        prevArrow.addEventListener('click', function () {
            scrollContainerBy(-scrollAmount);
        });

        nextArrow.addEventListener('click', function () {
            scrollContainerBy(scrollAmount);
        });

        updateArrows();

        magneticScroll.addEventListener('scroll', updateArrows);

        function handleTabClick(event) {
            const clickedTab = event.currentTarget;
            const selectedTabId = clickedTab.id;
            const selectedTabName = clickedTab.textContent.trim();

            tabs.forEach(tab => tab.classList.remove('active-tab'));
            clickedTab.classList.add('active-tab');


            imageScrolls.forEach(image => {
                const collection = image.getAttribute('data-collection');
                if (selectedTabId === 'All Models' || selectedTabId === collection) {
                    image.style.display = 'flex';
                } else {
                    image.style.display = 'none';
                }
            });


            if (selectedTabId === 'All Models') {
                ctaButton.parentElement.style.display = 'none';
            } else {
                ctaButton.parentElement.style.display = 'flex';
                ctaButton.setAttribute('href', `/collections/${selectedTabId.replace(/\s+/g, '-').toLowerCase()}`);
                ctaButton.innerHTML = `Discover ${selectedTabName}`;
            }

            magneticScroll.scrollTo({left: 0, behavior: "smooth"});

            if (window.innerWidth <= 1024) {
                updateUnionIconPositionMobile(clickedTab);
                scrollTabsIntoView(clickedTab);
            } else {
                updateUnionIconPositionDesktop(clickedTab);
            }

            removeMarginFromImages();
            addMarginToLastImage(selectedTabId);
        }

        function removeMarginFromImages() {
            imageScrolls.forEach(image => {
                image.style.marginRight = '';
            });
        }

        function addMarginToLastImage(tabId) {

            const visibleImages = Array.from(imageScrolls).filter(image => {
                const collection = image.getAttribute('data-collection');
                return (tabId === 'All Models' || tabId === collection) && image.style.display !== 'none';
            });

            const lastImage = visibleImages[visibleImages.length - 1];

            if (lastImage) {
                if (tabId === 'All Models') {
                    if (window.innerWidth <= 1024) {
                        lastImage.style.marginRight = '150px';
                    } else {
                        lastImage.style.marginRight = '300px';
                    }
                } else {
                    if (window.innerWidth <= 1024) {
                        lastImage.style.marginRight = '150px';
                    } else {
                        lastImage.style.marginRight = '300px';
                    }
                }
            }
        }

        window.addEventListener('resize', function () {
            const activeTab = document.querySelector('.tab-gamma.active-tab');
            if (activeTab) {
                removeMarginFromImages();
                addMarginToLastImage(activeTab.id);
            }
        });

        const modelsTab = document.getElementById('All Models');
        if (modelsTab) {
            modelsTab.classList.add('active-tab');
            if (window.innerWidth <= 1024) {
                updateUnionIconPositionMobile(modelsTab);
            } else {
                updateUnionIconPositionDesktop(modelsTab);
            }
        }


        tabs.forEach(tab => {
            tab.addEventListener('click', handleTabClick);
        });

        imageScrolls.forEach(image => image.style.display = 'flex');
        ctaButton.parentElement.style.display = 'none';

        const initialTab = document.querySelector('.tab-gamma.active-tab');
        if (initialTab) {
            addMarginToLastImage(initialTab.id);
        }

        function updateUnionIconPositionMobile(target) {
            const targetRect = target.getBoundingClientRect();
            const containerRect = wrapContent.getBoundingClientRect();
            const unionIconWidth = unionIcon.offsetWidth;

            const scrollOffset = wrapContent.scrollLeft;


            const tabCenterX = targetRect.left - containerRect.left + (targetRect.width / 2) + scrollOffset;

            unionIcon.style.transform = `translateX(${tabCenterX - unionIconWidth / 2}px)`;
            unionIcon.style.transition = "transform 0.3s ease";
        }


        function updateUnionIconPositionDesktop(target) {
            const targetRect = target.getBoundingClientRect();
            const containerRect = wrapContent.getBoundingClientRect();
            const unionIconWidth = unionIcon.offsetWidth;


            const tabCenterX = targetRect.left - containerRect.left + (targetRect.width / 2);

            unionIcon.style.transform = `translateX(${tabCenterX - unionIconWidth / 2}px)`;
            unionIcon.style.transition = "transform 0.3s ease";
        }


        function scrollTabsIntoView(target) {
            const targetRect = target.getBoundingClientRect();
            const containerRect = wrapContent.getBoundingClientRect();


            const targetOffset = targetRect.left - containerRect.left;
            const targetWidth = target.offsetWidth;
            const containerWidth = wrapContent.offsetWidth;

            const scrollTo = targetOffset - (containerWidth - targetWidth) / 2;

            wrapContent.scrollTo({left: scrollTo, behavior: "smooth"});
        }
    });

</script>