<div class="w-full h-auto py-14 bg-[#A9A09E] overflow-x-hidden relative">
    <div
        class="w-auto h-full hidden lg:flex lg:items-center lg:justify-center lg:absolute lg:left-[42px] lg:top-0 lg:z-10">
        <div
            class="w-14 h-14 rounded-full p-4 bg-white flex items-center justify-center lg:hover:w-[72px] transition-all duration-150 ease-in cursor-pointer">
            <button id="prev-Arrow" class="carousel-arrow left-arrow">
                {% render 'arrow-left-icon' %}
            </button>
        </div>
    </div>

    <div
        class="w-auto h-full hidden lg:flex lg:items-center lg:justify-center lg:absolute lg:right-[42px] lg:top-0 lg:z-10">
        <div
            class="w-14 h-14 rounded-full p-4 bg-white flex items-center justify-center lg:hover:w-[72px] transition-all duration-150 ease-in cursor-pointer">
            <button id="next-Arrow" class="carousel-arrow right-arrow">
                {% render 'arrow-right-icon' %}
            </button>
        </div>
    </div>

    <div class="w-full h-auto flex flex-col items-start justify-center gap-y-6 lg:gap-y-20">
        <div class="w-full h-auto flex flex-col items-start justify-center gap-y-10 lg:items-center lg:justify-center lg:gap-y-20">
            <div class="wrap-container w-full h-auto lg:flex lg:items-center lg:justify-center">
                <div
                    class="w-full h-auto flex flex-row items-center justify-start p-6 gap-x-6 relative wrap-content overflow-x-auto lg:items-center lg:gap-x-10 lg:justify-center lg:inline-flex lg:w-auto">
                    <div class="w-auto max-w-[99px] h-auto tab-gamma cursor-pointer lg:max-w-none" id="All Models">
                        <p
                            class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                            All Models</p>
                    </div>
                    {% assign sorted_collections = collections | sort: 'title' | reverse %}
                    {% assign collectionOrder= 'walkaround,endurance,grand-touring' | split: ',' %}
                    {% for collectionHandle in collectionOrder %}
                    {% assign collection = collections[collectionHandle] %}
                    {% if collection %}
                    <div class="w-auto max-w-[99px] h-auto tab-gamma lg:cursor-pointer lg:max-w-none"
                        id="{{ collection.title }}">
                        <p
                            class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                            {{ collection.title }}</p>
                    </div>
                    {% endif %}
                    {% endfor %}
                    <div class="union-icon w-auto h-auto absolute transition-all duration-200 ease-in top-1">
                        {% render 'union-icon' %}
                    </div>
                </div>
            </div>

            <div class="magnetic-scroll gamma-scroll w-full h-auto flex flex-row gap-x-2 overflow-x-auto items-center justify-start py-6  snap-x snap-mandatory lg:pl-[319px] lg:scroll-pl-[319px] lg:p-0 lg:px-20 lg:h-[368px] lg:min-h-[368px]"
                data-collection="{{ collection.title }}" style="display: flex;">
                {% for collection in sorted_collections %}
                {% if collection.title != "Pardo approved" %}
                {% for product in collection.products %}
                {% assign product_images = product.images %}
                {% if product_images.size > 0 %}
                {% assign model_image = product_images[0] %}
                <div class="image-scroll flex-shrink-0 flex flex-col items-center justify-center snap-start relative lg:w-[800px] lg:h-full"
                    data-collection="{{ collection.title }}" data-content="{{ product.title }}">
                    <a href="{{ product.url }}">
                        <img class="w-full h-full object-cover pImage z-10" src="{{ model_image | img_url: 'master' }}"
                            alt="{{ model_image.alt }}">
                    </a>
                    <div
                        class="w-full h-auto flex items-center justify-center left-0 -bottom-[10px] right-0 absolute z-20">
                        <p class="text-[40px] leading-[46px] tt-norms-pro-light lg:text-[128px] lg:leading-[128px]">{{
                            product.title | replace: 'Pardo', '' }}</p>
                    </div>
                </div>
                {% endif %}
                {% endfor %}
                {% endif %}
                {% endfor %}
                <div class="additional-div flex-shrink-0 flex flex-col items-center justify-center snap-start relative lg:w-[800px] lg:h-full"></div>
            </div>

            <div
                class="w-full h-auto flex flex-col items-start justify-center px-6 lg:flex-row lg:gap-x-4 lg:items-center lg:justify-center lg:px-12 lg:py-12">
                <div
                    class="w-full h-auto flex items-start justify-center gap-y-4 flex-col details-content lg:flex-row lg:gap-x-4 lg:items-center lg:justify-center">
                    <div class="w-full h-[56px] min-h-[56px] lg:w-[220px]">
                        <a href="#" class="w-full h-full cta-black" id="cta-button-collection">{{
                            section.settings.cta_gamma_product | default: "Discover" }}</a>
                    </div>
                    <div class="w-full h-[56px] min-h-[56px] lg:w-[220px]">
                        <a href="pages/locate-delear"
                            class="w-full h-full cta-transparent lg:bg-white lg:text-black lg:border-transparent"
                            id="cta-delear">{{ section.settings.cta_gamma_delear | default: "Find a dealer" }}</a>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<style>
    .tab-text {
        color: white;
        transition: color 0.3s ease;
    }

    .tab-gamma.active-tab .tab-text {
        color: black;
        font-family: "TT-Norms-Pro-Regular";
    }

    .tab-gamma:hover .tab-text {
        color: #000;
    }

    .magnetic-scroll {
        position: relative;
        overflow-x: auto;
        overflow-y: hidden;
    }

    .union-icon {
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.3s ease;
    }

    @media screen and (max-width: 440px) {
        .magnetic-scroll {
            padding-left: 56.28px;
            scroll-padding-left: 56.28px;
        }

        .image-scroll {
            width: 327.442px;
            height: 150.419px;
        }
    }

    @media screen and (max-width: 430px) {
        .magnetic-scroll {
            padding-left: 55px;
            scroll-padding-left: 55px;
        }


        .image-scroll {
            width: 320px;
            height: 147px;
        }
    }

    @media screen and (max-width: 393px) {
        .magnetic-scroll {
            padding-left: 50.27px;
            scroll-padding-left: 50.27px;
        }

        .image-scroll {
            width: 292.465px;
            height: 134.351px;
        }

    }

    @media screen and (max-width: 375px) {
        .magnetic-scroll {
            padding-left: 47.97px;
            scroll-padding-left: 47.97px;
        }

        .image-scroll {
            width: 279.07px;
            height: 128.198px;
        }
    }

    @media screen and (max-width: 320px) {
        .magnetic-scroll {
            padding-left: 40.9px;
            scroll-padding-left: 40.9px;
        }

        .image-scroll {
            width: 238.14px;
            height: 109.395px;
        }
    }
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll('.tab-gamma');
    const imageScrolls = document.querySelectorAll('.image-scroll');
    const magneticScroll = document.querySelector('.magnetic-scroll');
    const unionIcon = document.querySelector('.union-icon');
    const wrapContent = document.querySelector('.wrap-content');
    const ctaButton = document.getElementById('cta-button-collection');
    const wrapContainer = document.querySelector('.wrap-container');

    // Funzione per calcolare e impostare il padding-right dinamico per il magnetic-scroll
    function adjustScrollPadding() {
        const lastRealItem = imageScrolls[imageScrolls.length - 1]; // Ultimo elemento reale
        if (lastRealItem) {
            const magneticScrollRect = magneticScroll.getBoundingClientRect();
            const lastItemRect = lastRealItem.getBoundingClientRect();

            // Calcolo dello spazio necessario per far entrare l'ultimo elemento
            const extraSpace = lastItemRect.width - (magneticScrollRect.right - lastItemRect.left);
            const paddingRight = Math.max(0, extraSpace + 40); // Aggiungi un margine extra opzionale (es. 20px)

            magneticScroll.style.paddingRight = `${paddingRight}px`;
        }
    }

    // Funzione per gestire il click sulla tab
    function handleTabClick(event) {
        const clickedTab = event.currentTarget;
        const selectedTabId = clickedTab.id;
        const selectedTabName = clickedTab.textContent.trim();

        // Rimuovi la classe 'active-tab' da tutte le tabs e aggiungila alla tab selezionata
        tabs.forEach(tab => tab.classList.remove('active-tab'));
        clickedTab.classList.add('active-tab');

        // Gestisci la visibilitÃ  delle immagini in base alla tab selezionata
        imageScrolls.forEach(image => {
            const collection = image.getAttribute('data-collection');
            if (selectedTabId === 'All Models' || selectedTabId === collection) {
                image.style.display = 'flex';
            } else {
                image.style.display = 'none';
            }
        });

        // Fai scrollare 'wrapContent' per centrare la tab selezionata
        scrollToTab(clickedTab);

        // Cambia il comportamento del bottone CTA in base alla tab selezionata
        if (selectedTabId === 'All Models') {
            ctaButton.parentElement.style.display = 'none';
        } else {
            ctaButton.parentElement.style.display = 'flex';
            ctaButton.setAttribute('href', `/collections/${selectedTabId.replace(/\s+/g, '-').toLowerCase()}`);
            ctaButton.innerHTML = `Discover ${selectedTabName}`;
        }

        // Riporta lo scroll del contenitore magnetico all'inizio
        magneticScroll.scrollTo({ left: 0, behavior: "smooth" });

        // Aggiorna la posizione dell'icona per centrarla sopra la nuova tab
        updateUnionIconPosition(clickedTab);
    }

    // Funzione per fare scrollare 'wrapContent' per centrare la tab selezionata
    function scrollToTab(target) {
        const targetRect = target.getBoundingClientRect();
        const containerRect = wrapContent.getBoundingClientRect();
        const containerWidth = containerRect.width;
        const targetCenterX = targetRect.left + targetRect.width / 2;
        const containerCenterX = containerRect.left + containerWidth / 2;
        const offset = targetCenterX - containerCenterX;

        // Fai scrollare il contenitore in modo fluido
        wrapContent.scrollTo({
            left: wrapContent.scrollLeft + offset,
            behavior: 'smooth'
        });
    }

    // Funzione per aggiornare la posizione dell'icona rispetto a wrapContainer
  // Funzione per aggiornare la posizione dell'icona rispetto a wrapContainer
function updateUnionIconPosition(target) {
    const targetRect = target.getBoundingClientRect();
    const containerRect = wrapContainer.getBoundingClientRect();
    const unionIconWidth = unionIcon.offsetWidth;

    // Considera lo scroll di wrapContent nel calcolo
    const scrollOffset = wrapContent.scrollLeft;

    // Verifica se il layout Ã¨ desktop o mobile
    const isDesktop = window.matchMedia("(min-width: 1024px)").matches;

    let tabCenterX;

    if (isDesktop) {
        // Per desktop, considera l'allineamento centrale di wrapContent
        const wrapContentRect = wrapContent.getBoundingClientRect();
        const wrapContentCenterX = wrapContentRect.left + wrapContentRect.width / 2;
        
        // Calcoliamo la posizione rispetto al centro di wrap-content
        tabCenterX = targetRect.left + targetRect.width / 2 - (wrapContentCenterX - containerRect.left) + scrollOffset;
    } else {
        // Per mobile, calcolo normale
        tabCenterX = targetRect.left - containerRect.left + (targetRect.width / 2) + scrollOffset;
    }

    // Muovi l'icona nella posizione calcolata
    unionIcon.style.transform = `translateX(${tabCenterX - unionIconWidth / 2}px)`;
    unionIcon.style.transition = "transform 0.3s ease";
}


    // Esegui il posizionamento iniziale al caricamento della pagina
    const modelsTab = document.getElementById('All Models');
    if (modelsTab) {
        modelsTab.classList.add('active-tab');
        updateUnionIconPosition(modelsTab); // Centra l'icona sulla tab "All Models" al caricamento
    }

    // Aggiungi l'evento di clic su ogni tab
    tabs.forEach(tab => {
        tab.addEventListener('click', handleTabClick);
    });

    // Imposta la visibilitÃ  delle immagini inizialmente
    imageScrolls.forEach(image => image.style.display = 'flex');
    ctaButton.parentElement.style.display = 'none';

    // Calcola il padding-right per far entrare l'ultimo elemento
    adjustScrollPadding();

    // Ricalcola il padding-right al ridimensionamento della finestra
    window.addEventListener('resize', adjustScrollPadding);

    
});


</script>