<!-- gamma section new -->
<div class="w-full h-auto py-14 bg-[#A9A09E] overflow-x-hidden relative">

    <!-- arrows box left -->
    <div class="w-auto h-full hidden lg:flex lg:items-center lg:justify-center lg:absolute lg:left-[42px] lg:top-0 lg:z-30">
        <div class="w-14 h-14 rounded-full p-4 bg-white flex items-center justify-center">
            <button id="prevArrow" class="carousel-arrow left-arrow">
                {% render 'arrow-left-icon' %}
            </button>
        </div>
    </div>

    <!-- arrows box right -->
    <div class="w-auto h-full hidden lg:flex lg:items-center lg:justify-center lg:absolute lg:right-[42px] lg:top-0 lg:z-30">
        <div class="w-14 h-14 rounded-full p-4 bg-white flex items-center justify-center">
            <button id="nextArrow" class="carousel-arrow right-arrow">
                {% render 'arrow-right-icon' %}
            </button>
        </div>
    </div>

    <!--content tab & container images-->
    <div class="w-full h-auto flex flex-col items-start justify-center gap-y-6 lg:gap-y-20">
        <div class="w-full h-auto flex flex-col items-start justify-center gap-y-10 lg:items-center lg:justify-center">

            <!-- tab wrapper -->
            <div class="w-full h-auto flex flex-row items-center justify-start p-6 gap-x-6 relative wrap-content overflow-x-auto lg:items-center lg:gap-x-10 lg:justify-center lg:inline-flex lg:w-auto">
                <div class="w-auto max-w-[99px] h-auto tab-gamma cursor-pointer lg:max-w-none" id="Models">
                    <p class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                        Models</p>
                </div>
                {% assign sorted_collections = collections | sort: 'title' | reverse %}
                {% for collection in sorted_collections %}
                {% if collection.title != "Pardo approved" %}
                <div class="w-auto max-w-[99px] h-auto tab-gamma lg:cursor-pointer lg:max-w-none" id="{{ collection.title }}">
                    <p class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                        {{ collection.title | capitalize }}</p>
                </div>
                {% endif %}
                {% endfor %}
                <!-- union icon -->
                <div class="union-icon w-auto h-auto absolute transition-all duration-200 ease-in top-1">
                    {% render 'union-icon' %}
                </div>
            </div>

            <!-- model wrapper -->
            <div class="magnetic-scroll gamma-scroll w-full h-auto flex flex-row gap-x-2 overflow-x-auto items-center justify-start py-6 pl-10 scroll-pl-10 snap-x snap-mandatory lg:pl-[319px] lg:scroll-pl-[319px] lg:p-0 lg:px-20 lg:pb-4  lg:h-[386px] lg:min-h-[386px]" 
                data-collection="{{ collection.title }}" style="display: flex;">
                {% for collection in sorted_collections %}
                {% if collection.title != "Pardo approved" %}
                {% for product in collection.products %}
                {% assign product_images = product.images %}
                {% if product_images.size > 0 %}
                {% assign model_image = product_images[0] %}
                <div class="image-scroll w-[340px] min-h-[147px] h-[147px] flex-shrink-0 flex flex-col items-center justify-center snap-start relative lg:w-[800px] lg:h-full" 
                    data-collection="{{ collection.title }}" data-content="{{ product.title }}">
                    <img class="w-full h-full object-cover pImage z-10" src="{{ model_image | img_url: 'master' }}" alt="{{ model_image.alt }}">
                    <div class="w-full h-auto flex items-center justify-center left-0 -bottom-[10px] right-0 absolute z-20">
                        <p class="text-[40px] leading-[46px] tt-norms-pro-light lg:text-[128px] lg:leading-[128px]">{{ product.title | replace: 'Pardo', '' }}</p>
                    </div>
                </div>
                {% endif %}
                {% endfor %}
                {% endif %}
                {% endfor %}
            </div>

        </div>
    </div>
</div>

<style>
    .tab-text {
        color: white;
        transition: color 0.3s ease;
    }

    .tab-gamma.active-tab .tab-text {
        color: black;
        font-family: "TT-Norms-Pro-Regular";
    }

    .tab-gamma:hover .tab-text {
        color: #000;
    }

    .magnetic-scroll {
        position: relative;
        overflow-x: auto;
        overflow-y: hidden;
    }
</style>


<script>
document.addEventListener("DOMContentLoaded", function () {
    const prevArrow = document.getElementById("prevArrow");
    const nextArrow = document.getElementById("nextArrow");
    const magneticScrolls = document.querySelectorAll(".magnetic-scroll");
    const tabs = document.querySelectorAll('.tab-gamma');
    
    // Function to center an element within its container
    function centerElement(scrollContainer, targetElement) {
        const containerRect = scrollContainer.getBoundingClientRect();
        const elementRect = targetElement.getBoundingClientRect();
        const offset = elementRect.left - containerRect.left;
        const scrollAmount = offset - (containerRect.width / 2) + (elementRect.width / 2);

        scrollContainer.scrollBy({
            top: 0,
            left: scrollAmount,
            behavior: "smooth",
        });
    }

    // Function to handle tab click events
    function handleTabClick(event) {
        const clickedTab = event.target;
        const selectedTabId = clickedTab.id;

        // Remove active class from all tabs
        tabs.forEach((tab) => tab.classList.remove('active-tab'));

        // Add active class to clicked tab
        clickedTab.classList.add('active-tab');

        // Show the correct collection of products or all products
        magneticScrolls.forEach((scrollContainer) => {
            const collection = scrollContainer.getAttribute('data-collection');

            // If the Models tab is clicked, show all products
            if (selectedTabId === 'Models') {
                scrollContainer.style.display = 'flex';
            } 
            // If the clicked tab matches the collection's data-collection, show it
            else if (selectedTabId === collection) {
                scrollContainer.style.display = 'flex';
            } 
            // Hide the collections that don't match the selected tab
            else {
                scrollContainer.style.display = 'none';
            }
        });
    }

    // Add event listeners to each tab
    tabs.forEach((tab) => {
        tab.addEventListener("click", handleTabClick);
    });

    // Set the default active tab to "Models" and display all products when the page loads
    const modelsTab = document.getElementById('Models');
    if (modelsTab) {
        modelsTab.classList.add('active-tab'); // Add active class to Models tab
    }

    // Show all products (for Models tab) on page load
    magneticScrolls.forEach((scrollContainer) => {
        scrollContainer.style.display = 'flex'; // Make sure all products are visible
    });
});


</script>