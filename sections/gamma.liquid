<!--gamma section home page-->
<!--assign variables -->
{% assign sorted_collections = collections | sort: 'published_at' %}
<div class="gamma-asset-container w-full h-auto px-4 mb-[40px] lg:px-6 lg:mb-[24px]">
  <div
    class="gamma-container w-full h-auto flex flex-col items-center justify-start overflow-x-hidden gap-y-6 shadow-custom rounded-xl p-4 lg:p-2 lg:shadow-none lg:rounded-none lg:overflow-x-visible">
    <!--chips section -->
    <div class="container-chips-tab w-full h-auto flex flex-row items-center justify-start gap-x-2 lg:hidden">
      {% for collection in sorted_collections %}
      {% if collection.title != 'Pardo approved' %}
      <div class="chips-block cursor-pointer p-2 px-4 rounded-xl flex-1" data-target="{{ collection.title }}">
        <p class="body-12">{{ collection.title }}</p>
      </div>
      {% endif %}
      {% endfor %}
    </div>
    <!-- tab collection container -->
    <div
      class="tab-container w-full h-auto flex flex-col gap-y-6 lg:flex-row lg:flex-wrap lg:gap-x-10 lg:justify-between">
      {% for collection in sorted_collections %}
      {% if collection.title != 'Pardo approved' %}
      <div
        class="tab-pane w-full h-auto flex flex-col gap-y-6 hidden cursor-pointer transition-all duration-200 lg:flex lg:shadow-custom lg:hover:shadow-custom-hover lg:rounded-xl lg:p-6 lg:w-[calc(33.3%_-2.5rem)] lg:overflow-x-hidden"
        id="{{ collection.title }}">
        <div class="tab-title">
          <h2 class="header-2 text-nowrap">{{ collection.title }}</h2>
        </div>
        <div class="tab-image">
          <img src="{{ collection.image | img_url: 'master' }}" alt="{{ collection.image.alt }}"
            class="w-full  h-auto object-cover rounded-lg lg:h-[226px]">
        </div>
        <div class="tab-description lg:h-[100px]">
          <p class="body-12">{{ collection.description }}</p>
        </div>

        {% if collection.products.size > 0 %}
        <div class="tab-model relative flex flex-col gap-y-2">
          <p class="body-small">Models</p>
          <div class="badge-container flex flex-row items-center justify-start gap-x-2">
            {% for product in collection.products %}
            <div class="badge-product" data-target="{{ product.title }}">
              {{ product.title | replace: 'Pardo', '' }}
            </div>
            {% endfor %}
          </div>
          <div
            class="magnetic-scroll w-[calc(100%+4.1875rem)] h-auto overflow-x-auto scroll-smooth flex flex-row justify-start items-center pl-[51px] -ml-[51px] lg:w-[calc(100%+8.8125rem)] lg:pl-36 snap-x snap-mandatory">
            {% for product in collection.products %}
            {% assign product_images = product.images %}
            {% if product_images.size > 0 %}
            {% assign model_image = product_images[0] %}
            <div
              class="image-scroll w-[260px] h-[240px] flex-shrink-0 flex flex-col items-center justify-center snap-center">
              <img class="w-full h-full object-contain pImage" src="{{ model_image | img_url: 'master' }}"
                alt="{{ model_image.alt }}" data-image="{{ product.title }}">
              <p class="header-3">{{ product.title | replace: 'Pardo', '' }}</p>
            </div>
            {% endif %}
            {% endfor %}
            <div class="w-full h-[240px] flex-shrink-0 flex "></div>
          </div>

          <!-- Arrows Box -->
          <div class="w-full h-auto hidden lg:absolute lg:bottom-[108px] lg:flex lg:justify-between lg:gap-x-6 lg:z-20">
            <button
              class="carousel-arrow left-arrow flex items-center justify-center w-10 h-10 rounded-full border border-black text-white bg-white">
              {% render 'arrow-left-icon' %}
            </button>
            <button
              class="carousel-arrow right-arrow flex items-center justify-center w-10 h-10 rounded-full border border-black text-white  bg-white">
              {% render 'arrow-right-icon' %}
            </button>
          </div>
        </div>
        {% endif %}
      </div>
      {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<style>
  .pImage {
    transition: opacity 0.2s linear;
  }

  .opacity-60 {
    opacity: 0.6;
  }

  .opacity-100 {
    opacity: 1;
  }

  .carousel-arrow.disabled {
    opacity: 0.5;
    pointer-events: none;
  }

  .carousel-arrow:not(.disabled) {
    opacity: 1;
    pointer-events: auto;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get tab chips, tab panes, badge products, and the scroll container
    const chips = document.querySelectorAll('.chips-block');
    const tabPanes = document.querySelectorAll('.tab-pane');
    const badgeProducts = document.querySelectorAll('.badge-product');
    const windowSize = window.innerWidth;

    // Initially, set opacity 0.6 for all images in non-active tabs
    const images = document.querySelectorAll('.image-scroll .pImage');
    images.forEach(image => {
      image.classList.add('opacity-60');
    });

    // Initially, only set the first image in the first active tab to opacity 1
    const firstTabImages = tabPanes[0].querySelectorAll('.image-scroll .pImage');
    firstTabImages.forEach((image, index) => {
      if (index === 0) {
        image.classList.add('opacity-100');
        image.classList.remove('opacity-60');
      }
    });

    // Intersection Observer options
    const observerOptions = {
      root: null, // Use the viewport as root
      rootMargin: '0px',
      threshold: 0.5 // Trigger when 50% of the image is visible
    };

    // Create the Intersection Observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const image = entry.target;
        if (entry.isIntersecting) {
          // If the image enters the viewport, set opacity to 1
          image.classList.add('opacity-100');
          image.classList.remove('opacity-60');
        } else {
          // If the image exits the viewport, set opacity to 0.6
          image.classList.add('opacity-60');
          image.classList.remove('opacity-100');
        }
      });
    }, observerOptions);

    // Observe each image
    images.forEach(image => {
      observer.observe(image);
    });

    // Handle click for tab chips
    chips.forEach(chip => {
      chip.addEventListener('click', () => {
        const target = chip.getAttribute('data-target');

        // Show the selected tab
        tabPanes.forEach(pane => {
          if (pane.id === target) {
            pane.classList.remove('hidden');
            pane.classList.add('flex');
          } else {
            pane.classList.add('hidden');
            pane.classList.remove('flex');
          }
        });

        // Add active class to the active chip
        chips.forEach(c => c.classList.remove('active'));
        chip.classList.add('active');

        // Update opacity of images for the newly selected tab
        updateImageOpacityForTab(target);
      });
    });

    // Set first chip active after loading page
    if (tabPanes.length > 0) {
      tabPanes[0].classList.remove('hidden');
      tabPanes[0].classList.add('flex');
      chips[0].classList.add('active');
      updateImageOpacityForTab(tabPanes[0].id);
    }

    // Update image opacity when the active tab changes
    function updateImageOpacityForTab(activeTabId) {
      tabPanes.forEach(tab => {
        const imagesInTab = tab.querySelectorAll('.image-scroll .pImage');
        if (tab.id === activeTabId) {
          // Active tab: set the first image opacity to 1, others to 0.6
          imagesInTab.forEach((image, index) => {
            if (index === 0) {
              image.classList.add('opacity-100');
              image.classList.remove('opacity-60');
            } else {
              image.classList.add('opacity-60');
              image.classList.remove('opacity-100');
            }
          });
        } else {
          // Inactive tabs: set images opacity to 0.6
          imagesInTab.forEach(image => {
            image.classList.add('opacity-60');
            image.classList.remove('opacity-100');
          });
        }
      });
    };

    // Definisci il gestore per il click
    const clickHandler = (e) => {
      const target = e.currentTarget.getAttribute('data-target');

      // Trova il tab attivo e il contenitore dell'immagine
      const activeTab = document.querySelector('.tab-pane.flex');
      const imageScrollContainer = activeTab.querySelector('.tab-model .magnetic-scroll');

      if (activeTab && imageScrollContainer) {
        // Trova l'immagine giusta in base al target
        const targetProductImage = activeTab.querySelector(`[data-image="${target}"]`);

        if (targetProductImage) {
          // Ottieni il contenitore dello scroll e la posizione
          const targetPosition = targetProductImage.offsetLeft;
          const scrollToPosition = targetPosition - 16; // Aggiungi uno spazio

          // Esegui lo scroll
          imageScrollContainer.scrollLeft = scrollToPosition;
        }
      }
    };

    // Funzione per gestire l'aggiornamento del listener
    const updateListeners = () => {
      const windowSize = window.innerWidth;

      if (windowSize <= 435) {
        // Aggiungi event listener se la larghezza della finestra è <= 435px
        badgeProducts.forEach(badge => {
          badge.addEventListener('click', clickHandler);
        });
      } else {
        // Rimuovi event listener se la larghezza è > 435px
        badgeProducts.forEach(badge => {
          badge.removeEventListener('click', clickHandler);
        });
      }
    };

    // Chiamare la funzione quando la finestra viene ridimensionata
    window.addEventListener('resize', updateListeners);

    // Esegui il controllo all'inizio (quando la pagina viene caricata)
    updateListeners();



    // Get all arrows
    const prewArrows = document.querySelectorAll('.left-arrow');
    const nextArrows = document.querySelectorAll('.right-arrow');

    // Aggiungi gli eventi click per le frecce sinistra e destra
    prewArrows.forEach((arrow) => {
      arrow.addEventListener('click', () => {
        const tabModel = arrow.closest('.tab-model');
        const magneticScroll = tabModel.querySelector('.magnetic-scroll');
        const scrollAmount = HandleContainerToScroll(magneticScroll);
        scrollContainerBy(-scrollAmount, magneticScroll);
      });
    });

    nextArrows.forEach((arrow) => {
      arrow.addEventListener('click', () => {
        const tabModel = arrow.closest('.tab-model');
        const magneticScroll = tabModel.querySelector('.magnetic-scroll');
        const scrollAmount = HandleContainerToScroll(magneticScroll);
        scrollContainerBy(scrollAmount, magneticScroll);
      });
    });

    function HandleContainerToScroll(scrollContainer) {
      // Total items inside container to scroll
      const totalItems = scrollContainer.querySelectorAll('.image-scroll');

      // Get the exact dimension of the items
      const totalItemsLength = totalItems.length;

      // Convert NodeList to Array before using map
      const totalItemsWidth = Array.from(totalItems).map((image) => {
        const width = image.offsetWidth;
        const marginRight = parseInt(getComputedStyle(image).marginRight) || 0;
        return width + marginRight;
      }).reduce((acc, width) => acc + width, 0);

      // Return the scroll amount (average width of one item)
      return totalItemsWidth / totalItemsLength;
    }

    function scrollContainerBy(amount, scrollContainer) {
      const currentScrollLeft = scrollContainer.scrollLeft;
      let newScrollLeft = currentScrollLeft + amount;
      const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;


      if (newScrollLeft < 0) {
        newScrollLeft = 0;
      } else if (newScrollLeft > maxScrollLeft) {
        newScrollLeft = maxScrollLeft;
      }

      scrollContainer.scrollTo({
        left: newScrollLeft,
        behavior: 'smooth'
      });
    };

    const container = document.querySelector('.magnetic-scroll');
    const items = document.querySelectorAll('.image-scroll');
    const itemWidth = 260; // Larghezza di ogni immagine
    let isScrolling;

    container.addEventListener('scroll', () => {
      window.clearTimeout(isScrolling);

      // Imposta un timeout per verificare se lo scroll è terminato
      isScrolling = setTimeout(() => {
        // Ottieni la posizione di scorrimento corrente
        const scrollPosition = container.scrollLeft;

        // Calcola l'indice dell'immagine più vicina
        const index = Math.round(scrollPosition / itemWidth);

        // Calcola la nuova posizione da scrollare
        const newScrollPosition = index * itemWidth;

        // Esegui lo scroll verso la nuova posizione
        container.scrollTo({
          left: newScrollPosition,
          behavior: 'smooth',
        });
      }, 100); // Timeout dopo 100ms di inattività
    });
  });
</script>