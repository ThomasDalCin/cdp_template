<!--gamma section home page-->
<!--assign variables -->
{% assign sorted_collections = collections | sort: 'published_at' %}
<div class="gamma-asset-container w-full h-auto px-4 mb-[40px]">
  <div
    class="gamma-container w-full h-auto flex flex-col items-center justify-start gap-y-6 shadow-custom rounded-xl p-4 lg:p-0 lg:shadow-none lg:rounded-none">
    <!--chips section -->
    <div class="container-chips-tab w-full h-auto flex flex-row items-center justify-start gap-x-2 lg:hidden">
      {% for collection in sorted_collections %}
      {% if collection.title != 'Pardo approved' %}
      <div class="chips-block cursor-pointer p-2 px-4 rounded-lg" data-target="{{ collection.title }}">
        <p class="body-12">{{ collection.title }}</p>
      </div>
      {% endif %}
      {% endfor %}
    </div>
    <!-- tab collection container -->
    <div class="tab-container w-full h-auto flex flex-col gap-y-6 lg:flex-row lg:flex-wrap lg:gap-x-4">
      {% for collection in sorted_collections %}
      {% if collection.title != 'Pardo approved' %}
      <div
        class="tab-pane w-full h-auto flex flex-col gap-y-6 hidden lg:flex lg:shadow-custom lg:rounded-xl lg:p-6 lg:w-[calc(33.3%_-_1rem)]"
        id="{{ collection.title }}">
        <div class="tab-title">
          <h2 class="header-2">{{ collection.title }}</h2>
        </div>
        <div class="tab-image">
          <img src="{{ collection.image | img_url: 'master' }}" alt="{{ collection.image.alt }}"
            class="w-full  h-auto object-cover rounded-lg lg:h-[226px]">
        </div>
        <div class="tab-description lg:h-[100px]">
          <p class="body-12">{{ collection.description }}</p>
        </div>
        {% if collection.products.size > 0 %}
        <div class="tab-model flex flex-col gap-y-2">
          <p class="body-small">Models</p>
          <div class="badge-container flex flex-row items-center justify-start gap-x-2">
            {% for product in collection.products %}
            <div class="badge-product cursor-pointer" data-target="{{ product.title }}">
              {{ product.title | replace: 'Pardo', '' }}
            </div>
            {% endfor %}
          </div>
          <div class="magnetic-scroll w-full h-auto flex flex-row overflow-x-auto space-x-2 px-10">
            {% for product in collection.products %}
            {% assign product_images = product.images %}
            {% if product_images.size > 0 %}
            {% assign model_image = product_images[0] %}
            <div class="image-scroll w-[240px] h-[240px] flex-shrink-0 flex flex-col items-center justify-center">
              <img class="w-full h-full object-contain pImage" src="{{ model_image | img_url: 'master' }}"
                alt="{{ model_image.alt }}" id="{{ product.title }}">
              <p class="header-3">{{ product.title | replace: 'Pardo', '' }}</p>
            </div>
            {% endif %}
            {% endfor %}
          </div>
        </div>
        {% endif %}
      </div>
      {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<style>
  .pImage {
    transition: opacity 0.5s ease, transform 0.5s ease;
    /* Transizioni fluide */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {

    const chips = document.querySelectorAll('.chips-block');
    const tabPanes = document.querySelectorAll('.tab-pane');
    const badges = document.querySelectorAll('.badge-product');

    // Handle click on chips & tab to show
    chips.forEach(chip => {
      chip.addEventListener('click', () => {
        const target = chip.getAttribute('data-target');
        tabPanes.forEach(pane => {
          if (pane.id === target) {
            pane.classList.remove('hidden');
            pane.classList.add('flex');
          } else {
            pane.classList.add('hidden');
            pane.classList.remove('flex');
          }
        });
        chips.forEach(c => c.classList.remove('active'));
        chip.classList.add('active');

        updateMagneticScroll(target);
      });
    });

    // Initially display the first tab
    if (tabPanes.length > 0) {
      tabPanes[0].classList.remove('hidden');
      tabPanes[0].classList.add('flex');
      chips[0].classList.add('active');

      updateMagneticScroll(tabPanes[0].id);
    }

    // Function to update magnetic scroll and add effect
    function updateMagneticScroll(activeTabId) {
      const activePane = document.getElementById(activeTabId);
      const activeBadges = activePane.querySelectorAll('.badge-product');
      const activeImages = activePane.querySelectorAll('.pImage');
      const activeMagneticScroll = activePane.querySelector('.magnetic-scroll');

      // Add/remove opacity and translate effect on scroll
      activeMagneticScroll.addEventListener('scroll', () => {
        activeImages.forEach(image => {
          const imageRect = image.getBoundingClientRect();
          const scrollContainerRect = activeMagneticScroll.getBoundingClientRect();

          if (imageRect.left >= scrollContainerRect.left && imageRect.right <= scrollContainerRect.right) {
            // If image is fully in view, apply full opacity and reset translate
            image.style.opacity = '1';
            image.style.transform = 'translateY(0)';
          } else {
            // If image is out of view, reduce opacity and translate up
            image.style.opacity = '0.5';
            image.style.transform = 'translateY(-10px)'; // Adjust this value if needed for more movement
          }
        });
      });

      // Handle click on badges to scroll images
      activeBadges.forEach((badge) => {
        badge.removeEventListener('click', handleBadgeClick);
        badge.addEventListener('click', handleBadgeClick);
      });

      function handleBadgeClick() {
        const target = this.getAttribute('data-target');
        activeImages.forEach((image) => {
          if (image.id === target) {
            let targetImage = image;
            const paddingLeft = 40; // Padding left to account for
            const containerWidth = activeMagneticScroll.offsetWidth; // Width of the scroll container
            const imageWidth = targetImage.offsetWidth; // Width of the target image

            activeMagneticScroll.scrollTo({
              left: targetImage.offsetLeft - (containerWidth / 2) + (imageWidth / 2) - paddingLeft,
              behavior: 'smooth'
            });
          }
        });
      }


      // Initial application of opacity/translate effect on load
      activeImages.forEach(image => {
        const imageRect = image.getBoundingClientRect();
        const scrollContainerRect = activeMagneticScroll.getBoundingClientRect();

        if (imageRect.left >= scrollContainerRect.left && imageRect.right <= scrollContainerRect.right) {
          image.style.opacity = '1';
          image.style.transform = 'translateY(0)';
        } else {
          image.style.opacity = '0.5';
          image.style.transform = 'translateY(-10px)';
        }
      });
    }
  });

</script>