<!--overlay content-->
<div class="overlay-gallery-pdp hidden fixed z-50 inset-0 w-full h-svh lg:h-screen">

    <!-- container-closing-icon -->
    <div
        class="w-auto h-auto text-white rounded-full flex items-center justify-center p-3 absolute right-4 top-6 close-overlay-gallery-images bg-[rgba(0,0,0,0.20)] backdrop-blur-xl z-50 cursor-pointer">
        {% render 'x-icon' %}
    </div>

    <!-- Swiper wrapper container -->
    <div class="swiper swiper-container-gallery-pdp transition-all duration-200 ease-linear relative">

        <!-- swiper wrapper slides-->
        <div class="swiper-wrapper">

            <!--video media into slide-->
            {% for media in product.media %}
            {% if media.media_type == 'video' %}
            <div class="swiper-slide relative h-svh swiper-slide-video">
                {{ media | video_tag: autoplay: true, loop: true, muted: true, controls: false, class: "swiper-video
                w-full h-full object-cover" }}

                <!--controls video-->
                <div class="w-auto h-auto hidden lg:absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 container-play-pause-icon z-10 p-4 lg:flex items-center justify-center rounded-full bg-[rgba(0,0,0,0.20)] backdrop-blur-lg cursor-pointer"
                    id="playPauseIconContainer">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor">
                        <path d="M8 4L8 20" stroke="white" stroke-linecap="round" />
                        <path d="M16 4L16 20" stroke="white" stroke-linecap="round" id="playPauseIcon" />
                    </svg>


                </div>

                <!-- Container progrss bar-->
                <div
                    class="w-full h-auto hidden lg:flex items-center flex-col justify-center absolute left-0 right-0 bottom-[90px] lg:bottom-[60px] z-10 px-6 controls-container">
                    <!--container progress bar-->

                    <div
                        class="w-full h-auto flex items-start justify-center flex-col bg-[rgba(0,0,0,0.20)] backdrop-blur-lg gap-y-3 p-4 rounded-lg">
                        <!--container current & total duration-->
                        <div class="w-full h-auto flex flex-row justify-between">
                            <p class="current-time body-12 text-white"></p>
                            <p class="total-time body-12 text-white"></p>
                        </div>
                        <!--progress bar container-->
                        <div class="w-full h-[2px] relative bg-[#818181] progress-container">
                            <!--progress bar-->
                            <div class="w-0 h-full absolute left-0 top-0 right-0 bg-white"></div>
                        </div>
                    </div>
                </div>


            </div>
            {% endif %}
            {% endfor %}

            <!--each slides-->
            <!-- assign variables -->
            {% for image in product.images %}
            {% if forloop.index > 1 %}
            <div class="swiper-slide relative h-svh">
                <img src="{{ image | img_url: 'master' }}" alt="Slide {{ forloop.index }}"
                    class="swiper-img w-full h-full object-cover">
            </div>
            {% endif %}
            {% endfor %}

        </div>

        <!-- Container swiper bullets -->
        <div
            class="container-swiper-pagination w-full h-auto absolute left-0 right-0 bottom-6 z-10 lg:bottom-[130px] flex items-start justify-center">
            <!-- Container bullets -->
            <div class="w-auto h-auto">
                <div class="swiper-pagination-gallery-pdp"></div>
            </div>
        </div>

        <!-- Container turn into landspace -->
        <div
            class="w-full h-auto flex items-center flex-col justify-center absolute left-0 right-0 bottom-[46px] lg:hidden">
            <div
                class="w-auto h-auto min-w-[1480x] min-h-[32px] bg-[rgba(0,0,0,0.20)] backdrop-blur-xl rounded-3xl py-2 px-4 z-20 turn-gallery-button">
                <p class="body-14 tt-norms-pro-med text-white">{{ section.settings.turn_landscape | default: "Turn into
                    landscape" }}</p>
            </div>
        </div>

        <div class="w-auto h-auto hidden lg:block">
            <div
                class="swiper-button-next-gallery-pdp bg-[rgba(0,0,0,0.20)] backdrop-blur-xl w-[52px] h-[52px] rounded-full text-white  mr-10">
            </div>
        </div>
        <div class="w-auto h-auto hidden lg:block">

            <div
                class="swiper-button-prev-gallery-pdp bg-[rgba(0,0,0,0.20)] backdrop-blur-xl w-[52px] h-[52px] rounded-full text-white  ml-10">
            </div>
        </div>

    </div>


</div>

<!--gallery pdp section-->
<div class="w-full h-[540px] min-h-[540px] relative lg:h-[860px]" id="Gallery">
    <div class="wrapper-slider w-full h-full absolute overflow-x-hidden left-0 top-0 right-0 z-0">

        <!-- Swiper slider start here -->
        <div class="swiper mySwiper w-full h-full relative">
            <div class="swiper-wrapper">

                <!--video media into slide-->
                {% for media in product.media %}
                {% if media.media_type == 'video' %}
                <div class="swiper-slide relative">
                    {{ media | video_tag: autoplay: true, loop: true, muted: true, controls: false, class: "swiper-video
                    w-full h-full object-cover" }}
                </div>
                {% endif %}
                {% endfor %}


                <!-- assign variables -->
                {% for image in product.images %}
                {% if forloop.index > 1 %}
                <div class="swiper-slide relative">
                    <img src="{{ image | img_url: 'master' }}" alt="Slide {{ forloop.index }}"
                        class="swiper-img w-full h-full object-cover gallery-pdp-images">
                </div>
                {% endif %}
                {% endfor %}

            </div>

            <!-- Container swiper bullets -->
            <div
                class="container-swiper-pagination w-full h-auto absolute left-0 right-0 bottom-6 z-10 flex items-start justify-center">
                <!-- Container bullets -->
                <div class="w-auto h-auto">
                    <div class="swiper-pagination"></div>
                </div>
            </div>

            <div class="w-auto h-auto hidden lg:block">
                <div
                    class="swiper-button-next bg-[rgba(0,0,0,0.20)] backdrop-blur-xl w-[52px] h-[52px] rounded-full text-white  mr-10">
                </div>
            </div>
            <div class="w-auto h-auto hidden lg:block">

                <div
                    class="swiper-button-prev bg-[rgba(0,0,0,0.20)] backdrop-blur-xl w-[52px] h-[52px] rounded-full text-white  ml-10">
                </div>
            </div>

        </div>
    </div>
</div>


<!-- Initialize Swiper -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        let activeVideo = null;
        let swiperOverlay = null;
        const galleryPdpImages = document.querySelectorAll('.gallery-pdp-images');
        const galleryPdpVideos = document.querySelectorAll('.swiper-video');
        const overlayGallery = document.querySelector('.overlay-gallery-pdp');
        const closeOverlayGallery = document.querySelector('.close-overlay-gallery-images');
        const progressBarContainers = document.querySelectorAll('.progress-container');

        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
            return `${mins}:${secs}`;
        }

        function updateProgressBar(video, progressBar, currentTimeElem, totalTimeElem) {
            const currentTime = video.currentTime;
            const duration = video.duration;
            progressBar.style.width = `${(currentTime / duration) * 100}%`;

            if (currentTimeElem) currentTimeElem.innerText = formatTime(currentTime);
            if (totalTimeElem) totalTimeElem.innerText = formatTime(duration);
        }

        function togglePlayPause(video, playPauseIcon) {
            if (video.paused) {
                video.play();
                playPauseIcon.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M8 4L8 20" stroke="white" stroke-linecap="round"/>
                    <path d="M16 4L16 20" stroke="white" stroke-linecap="round"/>
                </svg>`;
            } else {
                video.pause();
                playPauseIcon.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M19.5 11.134C20.1667 11.5189 20.1667 12.4811 19.5 12.866L9 18.9282C8.33333 19.3131 7.5 18.832 7.5 18.0622L7.5 5.93782C7.5 5.16802 8.33333 4.6869 9 5.0718L19.5 11.134Z" stroke="white"/>
                </svg>`;
            }
        }

        function hideControlsAndProgress(videoContainer) {
            const controls = videoContainer.querySelector('.container-play-pause-icon');
            const progressBar = videoContainer.querySelector('.controls-container');
            if (controls) controls.style.display = 'none';
            if (progressBar) progressBar.style.display = 'none';
        }

        function showControlsAndProgress(videoContainer) {
            const controls = videoContainer.querySelector('.container-play-pause-icon');
            const progressBar = videoContainer.querySelector('.controls-container');
            if (controls) controls.style.display = 'flex';
            if (progressBar) progressBar.style.display = 'block';
        }

        function addMouseLeaveControls(videoContainer) {
            videoContainer.addEventListener('mouseleave', () => hideControlsAndProgress(videoContainer));
            videoContainer.addEventListener('mouseenter', () => showControlsAndProgress(videoContainer));
        }

        function destroyOverlaySwiper() {
            if (swiperOverlay) {
                swiperOverlay.destroy(true, true);
                swiperOverlay = null;
            }
        }

        function initializeOverlaySwiper() {
            swiperOverlay = new Swiper('.swiper-container-gallery-pdp', {
                slidesPerView: 1,
                navigation: {
                    nextEl: '.swiper-button-next-gallery-pdp',
                    prevEl: '.swiper-button-prev-gallery-pdp',
                },
                pagination: {
                    el: '.swiper-pagination-gallery-pdp',
                    clickable: true,
                },
            });
        }

        function openOverlay() {
            if (overlayGallery) {
                overlayGallery.classList.remove('hidden');
                document.body.classList.add('no-scroll');
            }
            destroyOverlaySwiper(); // Assicurati di distruggere sempre lo swiper precedente
            initializeOverlaySwiper();

            const overlayVideos = overlayGallery.querySelectorAll('.swiper-video');

            overlayVideos.forEach((video, index) => {
                const videoContainer = overlayGallery.querySelectorAll('.swiper-slide')[index];
                const playPauseIconContainer = videoContainer?.querySelector('.container-play-pause-icon');
                if (!playPauseIconContainer) return;

                const playPauseIcon = playPauseIconContainer.querySelector('svg');
                if (!playPauseIcon) return;

                // Resetta il video allo stato iniziale e avvia la riproduzione
                video.pause();          // Metti in pausa il video (per sicurezza)
                video.currentTime = 0;  // Ricomincia il video dall'inizio
                video.play();           // Avvia la riproduzione automatica

                // Funzione per il toggle play/pause
                const handlePlayPause = () => {
                    togglePlayPause(video, playPauseIcon);
                    activeVideo = video;
                };

                // Rimuovi solo il listener sui controlli play/pause
                playPauseIconContainer.removeEventListener('click', video._handlePlayPause);

                // Salva il riferimento alla funzione per la rimozione successiva
                video._handlePlayPause = handlePlayPause;

                // Aggiungi il listener al click sui controlli
                playPauseIconContainer.addEventListener('click', handlePlayPause);

                // Gestisci lo stato del video per aggiornare l'icona play/pause correttamente
                video.addEventListener('play', () => {
                    playPauseIcon.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M8 4L8 20" stroke="white" stroke-linecap="round"/>
                    <path d="M16 4L16 20" stroke="white" stroke-linecap="round"/>
                </svg>
            `;
                });

                video.addEventListener('pause', () => {
                    playPauseIcon.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M19.5 11.134C20.1667 11.5189 20.1667 12.4811 19.5 12.866L9 18.9282C8.33333 19.3131 7.5 18.832 7.5 18.0622L7.5 5.93782C7.5 5.16802 8.33333 4.6869 9 5.0718L19.5 11.134Z" stroke="white"/>
                </svg>
            `;
                });

                // Aggiungi o mantieni gli altri eventi
                video.addEventListener('timeupdate', () => {
                    const progressBar = progressBarContainers[index]?.querySelector('.w-0');
                    const currentTimeElem = progressBarContainers[index]?.previousElementSibling?.querySelector('.current-time');
                    const totalTimeElem = progressBarContainers[index]?.previousElementSibling?.querySelector('.total-time');
                    updateProgressBar(video, progressBar, currentTimeElem, totalTimeElem);
                });

                video.addEventListener('loadedmetadata', () => {
                    const totalTimeElem = progressBarContainers[index]?.previousElementSibling?.querySelector('.total-time');
                    if (totalTimeElem) {
                        totalTimeElem.innerText = formatTime(video.duration);
                    }
                });

                addMouseLeaveControls(videoContainer);
            });
        }




        // Initialize Swiper for product gallery (normal page view)
        const swiperMain = new Swiper('.swiper.mySwiper', {
            slidesPerView: 1,
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
            on: {
                slideChange: function () {
                    if (activeVideo) {
                        activeVideo.pause();
                        activeVideo.currentTime = 0;
                    }
                    const currentSlide = swiperMain.slides[swiperMain.activeIndex];
                    const video = currentSlide.querySelector('.swiper-video');
                    if (video) {
                        video.play();
                        activeVideo = video;
                    }
                },
            },
        });

        galleryPdpImages.forEach((image) => {
            image.addEventListener('click', openOverlay);
        });

        galleryPdpVideos.forEach((video) => {
            video.addEventListener('click', () => {
                openOverlay();
                activeVideo = video;
            });
        });

        closeOverlayGallery.addEventListener('click', function () {
            if (overlayGallery) {
                overlayGallery.classList.add('hidden');
                document.body.classList.remove('no-scroll');
            }
            destroyOverlaySwiper();
            if (activeVideo) {
                activeVideo.play();
                activeVideo.currentTime = 0;
            }
        });


        function handleOrientationChange() {
            const turnButton = document.querySelector('.turn-gallery-button');

            if (window.matchMedia("(orientation: landscape)").matches) {
                if (turnButton) {
                    turnButton.classList.add('hidden');
                }
            } else {
                if (turnButton) {
                    turnButton.classList.remove('hidden');
                }
            }
        }

        handleOrientationChange();
    });

</script>




<!-- Swiper Custom Style -->
<style>
    .swiper-pagination-bullet.swiper-pagination-bullet-active {
        width: 24px !important;
        height: 2px !important;
        border-radius: 2px !important;
        background-color: white !important;
    }

    .swiper-pagination-bullet {
        width: 8px !important;
        height: 2px !important;
        border-radius: 2px !important;
        background-color: white !important;
    }

    .swiper-button-next::after,
    .swiper-button-prev::after {
        font-size: 14px;
    }
</style>