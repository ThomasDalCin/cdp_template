<!-- navbar section -->
<div
  class="navbar w-full h-auto fixed z-50 left-0 top-0 right-0 bg-transparent px-4 py-4 transition-colors duration-300 ease-in-out lg:p-6">
  <div class="navbar-container flex items-center justify-between flex-row relative pb-3">
    <div class="menu-yachts-label transition-colors duration-300 ease-in-out">
      <p class="body-small chip-text">Yachts</p>
    </div>
    <div
      class="menu-logo-container w-[93px] h-[23px] flex-shrink-0 absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2">
      <div class="pardo-logo w-auto h-auto">
        <a href="/" id="pardo-logo" class="w-auto h-auto">
          <div class="w-auto h-auto">
            {% render 'pardo-logo-one' %}
          </div>
        </a>
      </div>
    </div>
    <div class="menu-icon w-auto h-auto text-white transition-colors duration-300 ease-in-out">
      <div class="container-open-icon">
        {% render 'menu-icon' %}
      </div>
      <div class="container-close-icon hidden">
        {% render 'x-icon' %}
      </div>
    </div>
  </div>

  <!-- Second level Menu Container -->
  <div class="w-full h-auto relative">
    <div
      class="second-level-menu-container w-full h-screen flex flex-col bg-[var(--primary-background-color)] fixed left-0 right-0 p-4 z-30 hidden">

      <div class="back-nav-container flex items-center justify-start py-4">
        {% render 'back-arrow-icon' %}
      </div>

      <div class="chips-horizontal-container w-full flex gap-x-2 overflow-auto py-4">
        {% assign collectionSorted = collections | sort : 'title' | reverse %}
        {% for collection in collectionSorted %}
        {% unless collection.title == 'Pardo approved' %}
        <div class="chips-label flex items-center space-x-2">
          <div class="chips-text text-nowrap body-14" id="collection-chips-title">{{ collection.title }}</div>
          {% render 'arrow-down-icon' %}
        </div>
        {% endunless %}
        {% endfor %}
      </div>

      <div class="collection-description w-full h-auto flex items-start justify-center">
        {% for collection in collectionSorted %}
        {% unless collection.title == 'Pardo approved' %}
        <div class="description-box-containe rounded-xl bg-[var(--secondary-background-color)] p-4 hidden"
          data-collection-description="{{ collection.title }}">
          <p class="body-12">{{ collection.description }}</p>
        </div>
        {% endunless %}
        {% endfor %}
      </div>

      <div
        class="second-level-menu-items w-full flex flex-col items-center justify-start gap-y-6 py-4 overflow-y-auto max-h-[calc(100vh-250px)] pb-[80px]">
        {% for collection in collections %}
        {% for product in collection.products %}
        {% assign productMainImg = product.images[0] %}
        <div class="container-product-main w-full h-auto flex flex-col items-center justify-center">
          <li class="container-product-main-image w-full h-auto list-none"
            data-product-collection="{{ collection.title }}">
            <a href="{{ product.url }}" class="w-full h-auto">
              <img class="product-main-img w-full h-auto object-contain" src="{{ productMainImg | img_url: 'master' }}"
                alt="{{ product.title }}">
            </a>
          </li>
          <p class="header-1-medium">{{ product.title | replace: "Pardo", "" }}</p>
        </div>
        {% endfor %}
        {% endfor %}
      </div>

      <!-- Fixed "View all ranges" label at the bottom -->
      <div class="w-full h-auto fixed left-0 right-0 bottom-0 px-4 py-6 bg-white z-50">
        <div class="w-full h-auto flex flex-row justify-between">
          <div class="chips-text text-nowrap body-14" id="collection-chips-title">View all ranges</div>
          {% render 'cta-icon' %}
        </div>
      </div>

    </div>
  </div>


  <!-- Yatch Menu Container -->
  <div class="yatch-menu-container w-full h-auto flex-col gap-y-10 mt-6 hidden lg:mt-10 lg:mb-10 relative">
    <div class="main-manu-container w-full h-auto flex flex-col gap-y-4 lg:gap-y-5">
      {% assign allLinksTitle = "Walkaround,Endurance,Grand Touring,View all ranges" | split: ',' %}

      {% for link in linklists.yatch.links %}
      {% assign matching_collection = collections[link.object.handle] %}
      {% assign product_count = 0 %}
      {% if matching_collection %}
      {% assign product_count = matching_collection.products_count %}
      {% endif %}
      {% unless link.title == 'Pardo approved' or link.title == 'Pardo experience' %}
      <li
        class="header-1-medium text-white list-none inline-flex flex-col justify-center items-start relative collection-menu-item"
        data-collection="{{ link.object.handle }}">
        <div class="relative inline-block">
          {% if allLinksTitle contains link.title %}
          {% if link.title == 'View all ranges' %}
          {{ link.title | link_to: 'javascript:void(0);', class: "text-[20px] font-light leading-[20px] lg:text-[24px]
          lg:leading-[24px]" }}
          {% else %}
          {{ link.title | link_to: 'javascript:void(0);', class: "text-[32px] leading-[32px] lg:text-[40px]
          lg:leading-[40px]" }}
          {% endif %}
          {% endif %}
          {% if matching_collection %}
          {% if product_count.size > 0 %}
          <span
            class="product-count absolute top-2 -right-2 text-white body-16 px-2 py-1 transform translate-x-1/2 -translate-y-1/2">
            {{ product_count }}
          </span>
          {% endif %}
          {% endif %}
        </div>
        <div
          class="collection-info-container w-auto inline-flex flex-row gap-x-2 items-start justify-start transition-all duration-200 ease-linear overflow-hidden h-0">
          {% for product in matching_collection.products %}
          <div class="badge-product border-white cursor-pointer mt-4 mb-4" data-target="{{ product.title }}">
            {{ product.title | replace: 'Pardo', '' }}
          </div>
          {% endfor %}
        </div>
      </li>
      {% endunless %}
      {% endfor %}


      <div class="container-secondary-link w-full h-auto flex flex-col gap-y-2 lg:gap-y-2 mt-10">
        {% for link in linklists.yatch.links %}
        {% unless allLinksTitle contains link.title %}
        {{ link.title | link_to: link.url, class: "text-white font-light text-[20px] leading-[20px] lg:text-[20px]
        lg:leading-[20px] underline" }}
        {% endunless %}
        {% endfor %}
      </div>


      <div class="w-full h-auto flex items-center justify-end">
        <a href="/pages/locate-delear">
          <div class="cta-primary bg-white border-none lg:flex-1 lg:px-4 lg:py-2">
            <p class="body-14-medium">Locate Delear</p>
            {% render 'cta-icon' %}
          </div>
        </a>
      </div>


      <!-- boat image container on desktop -->
      <div class="boat-image-container w-auto h-auto absolute left-1/2 top-1/2 -translate-x-1/4 -translate-y-1/2 z-30">
        {% for collection in collections %}
        {% for product in collection.products %}
        {% assign boatImage = product.metafields.custom.boat_menu_image.value %}
        {% if boatImage %}
        <a href="{{ product.url }}">
          <img src="{{ boatImage | img_url: 'master' }}" alt="boat png image"
            class="boat-image w-auto h-auto object-contain" data-image="{{ product.title }}">
        </a>
        {% endif %}
        {% endfor %}
        {% endfor %}
      </div>
    </div>
  </div>


  <!-- Main Menu Container -->
  <div class="main-menu-container w-full h-auto flex-col gap-y-10 mt-6 hidden lg:mt-10 lg:mb-10">
    <div class="main-manu-container w-full h-auto flex flex-col gap-y-6">
      {% for link in linklists.main-menu.links %}
      {% unless link.title == 'Press room' or link.title == 'Pardo experience' %}
      <li class="header-1-medium text-white list-none inline-flex items-center relative">
        {{ link.title | link_to: link.url, class: "text-[32px] leading-[32px] lg:text-[40px] lg:leading-[40px]" }}
      </li>
      {% endunless %}
      {% endfor %}

      <div class="grouped-links-container w-full h-auto flex flex-col gap-y-1 lg:gap-y-2 mt-10">
        {% for link in linklists.main-menu.links %}
        {% if link.title == 'Press room' or link.title == 'Pardo experience' %}

        {{ link.title | link_to: link.url, class: " text-white font-light lg:text-[20px] lg:leading-[20px] underline" }}
        {% endif %}
        {% endfor %}
      </div>
      <div class="w-full h-auto flex items-center justify-end">
        <a href="/pages/locate-delear">
          <div class="cta-primary bg-white border-none lg:flex-1 lg:px-4 lg:py-2">
            <p class="body-14-medium">Locate Delear</p>
            {% render 'cta-icon' %}
          </div>
        </a>
      </div>
    </div>
  </div>


</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Navbar elements
    const navbar = document.querySelector('.navbar');
    const menuIcon = document.querySelector('.menu-icon');
    const menuChip = document.querySelector('.menu-yachts-label');
    const logo = document.getElementById('pardo-logo');
    // Menu types
    const menuYatch = document.querySelector('.yatch-menu-container');
    const mainMenu = document.querySelector('.main-menu-container');
    const secondMenu = document.querySelector('.second-level-menu-container');
    const navDynamicHeight = navbar.offsetHeight;
    secondMenu.style.top = `${navDynamicHeight}px`;
    // Chip label
    const chipText = document.querySelector('.chip-text');
    // Menu icons
    const openIcon = document.querySelector('.container-open-icon');
    const closeIcon = document.querySelector('.container-close-icon');
    // Crea un elemento <style> e aggiungilo al <head>
    const styleElement = document.createElement('style');
    styleElement.innerHTML = `
    .toBlack {
      color: #000;
      border-color: #000;
    }
    .navbar.toBlack {
      background-color: white;
    }
    .toAccent {
      background-color: var(--accent-dark-color);
    }
    .no-scroll {
      overflow: hidden;
    }
  `;
    document.head.appendChild(styleElement);

    function updateNavbarStyle() {
      const isMenuYatchVisible = menuYatch.classList.contains('flex');
      const isMenuMainVisible = mainMenu.classList.contains('flex');
      const hasScrolled = window.scrollY > 0;
      const currentPage = window.location.pathname;

      // Modifica: controlla se è esattamente la homepage
      const isNotHomepage = currentPage !== '/'; // Se non è esattamente la homepage

      if (isMenuYatchVisible || isMenuMainVisible) {
        navbar.classList.add('toAccent');
        navbar.classList.remove('toBlack');
        menuIcon.classList.remove('toBlack');
        menuChip.classList.remove('toBlack');
        logo.classList.remove('toBlack');
        logo.classList.add('text-white');

        const boatImages = document.querySelectorAll('.boat-image');
        boatImages.forEach(boatImage => {
          boatImage.style.display = 'none';
        });

      } else if (hasScrolled && !isNotHomepage) {
        navbar.classList.add('toBlack');
        menuIcon.classList.add('toBlack');
        menuChip.classList.add('toBlack');
        logo.classList.add('toBlack');
        logo.classList.remove('text-white');
      } else if(hasScrolled){
        navbar.classList.add('toBlack');
        menuIcon.classList.add('toBlack');
        menuChip.classList.add('toBlack');
        logo.classList.add('toBlack');
        logo.classList.remove('text-white');
      } else if(!isNotHomepage && !hasScrolled){
        navbar.classList.remove('toBlack');
        navbar.classList.remove('toAccent');
        menuIcon.classList.remove('toBlack');
        menuChip.classList.remove('toBlack');
        logo.classList.remove('toBlack');
        logo.classList.add('text-white');
      } else {
        navbar.classList.remove('toBlack', 'toAccent');
        menuIcon.classList.add('toBlack');
        menuChip.classList.add('toBlack');
        logo.classList.add('toBlack');
      }
    }

    //handle scroll event and add style to the Navbar
    window.addEventListener('scroll', updateNavbarStyle);


    menuChip.addEventListener('click', (e) => {
      const targetEl = navbar;
      const handleClickOutside = (event) => {
        if (!menuYatch.contains(event.target) && !menuChip.contains(event.target) && !navbar.contains(event.target)) {
          menuYatch.classList.remove('flex');
          menuYatch.classList.add('hidden');
          targetEl.classList.remove('toAccent');
          targetEl.classList.add('toBlack');
          menuIcon.classList.add('toBlack');
          menuChip.classList.add('toBlack');
          logo.classList.add('toBlack');
          document.body.classList.remove('no-scroll');
          chipText.innerHTML = 'Yatch';
        }
      };

      // Check if the main menu is visible, if yes do nothing
      if (mainMenu.classList.contains('flex')) return;

      const isMenuYatchHidden = menuYatch.classList.contains('hidden');
      const isSecondMenuOpen = secondMenu.classList.contains('flex');

      if (isMenuYatchHidden) {
        // Show the menu
        menuYatch.classList.remove('hidden');
        menuYatch.classList.add('flex');
        chipText.innerHTML = 'Close';
        document.body.classList.add('no-scroll');
        updateNavbarStyle();
        document.addEventListener('click', handleClickOutside);
      } else if (isSecondMenuOpen) {
        chipText.innerHTML = 'Yachts';
        secondMenu.classList.add('hidden');
        secondMenu.classList.remove('flex');
        // Hide the menu
        menuYatch.classList.remove('flex');
        menuYatch.classList.add('hidden');
        chipText.innerHTML = 'Yachts';
        document.body.classList.remove('no-scroll');
        updateNavbarStyle();
      } else {
        // Hide the menu
        menuYatch.classList.remove('flex');
        menuYatch.classList.add('hidden');
        chipText.innerHTML = 'Yachts';
        document.body.classList.remove('no-scroll');
        updateNavbarStyle();
      }
    });


    updateNavbarStyle();

    menuIcon.addEventListener('click', (e) => {
      const targetEl = navbar;
      const handleClickOutside = (event) => {
        if (!mainMenu.contains(event.target) && !menuIcon.contains(event.target) && !navbar.contains(event.target)) {
          // Nascondi il menu e aggiorna le icone
          mainMenu.classList.remove('flex');
          mainMenu.classList.add('hidden');
          targetEl.classList.remove('toAccent');
          closeIcon.classList.remove('flex');
          closeIcon.classList.add('hidden');
          openIcon.classList.remove('hidden');
          openIcon.classList.add('flex');
          targetEl.classList.add('toBlack');
          menuIcon.classList.add('toBlack');
          menuChip.classList.add('toBlack');
          logo.classList.add('toBlack');
          document.body.classList.remove('no-scroll');
          document.removeEventListener('click', handleClickOutside);
        }
      };

      // Check if the Yacht menu is visible, if yes, do nothing
      if (menuYatch.classList.contains('flex')) return;

      const isMenuMainHidden = mainMenu.classList.contains('hidden');

      if (isMenuMainHidden) {
        mainMenu.classList.remove('hidden');
        mainMenu.classList.add('flex');
        openIcon.classList.add('hidden');
        openIcon.classList.remove('flex');
        closeIcon.classList.add('flex');
        closeIcon.classList.remove('hidden');

        closeIcon.classList.add('text-white');
        closeIcon.classList.remove('text-black');

        document.body.classList.add('no-scroll');
        updateNavbarStyle();

        document.addEventListener('click', handleClickOutside);
      } else {
        mainMenu.classList.remove('flex');
        mainMenu.classList.add('hidden');
        openIcon.classList.add('flex');
        openIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        closeIcon.classList.remove('flex');

        closeIcon.classList.remove('text-white');
        closeIcon.classList.add('text-black');

        document.body.classList.remove('no-scroll');
        updateNavbarStyle();


        document.removeEventListener('click', handleClickOutside);
      }
    });



    // Handle second menu
    function handleSecondMenuLevel() {
      const screenSize = window.innerWidth;
      let lastBadge;

      document.querySelectorAll('a[href="javascript:void(0);"]').forEach(link => {
        if (screenSize <= 625) {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            secondMenu.classList.remove('hidden');
            secondMenu.classList.add('flex');
            navbar.classList.add('toBlack');
            menuIcon.classList.add('toBlack');
            menuChip.classList.add('toBlack');
            logo.classList.add('toBlack')
          });
        }
        else {

          link.addEventListener('mouseover', (e) => {
            e.currentTarget.classList.add('text-shadow');
          });

          link.addEventListener('mouseout', (e) => {
            e.currentTarget.classList.remove('text-shadow');
          });

          link.addEventListener('click', (e) => {
            e.preventDefault();

            const collectionMenuItem = e.currentTarget.closest('.collection-menu-item');
            const collectionInfoContainer = collectionMenuItem.querySelector('.collection-info-container');
            const badgesProduct = collectionInfoContainer.querySelectorAll('.badge-product');
            const boatImages = document.querySelectorAll('.boat-image');


            boatImages.forEach(boatImage => {
              boatImage.style.display = 'none';
            });


            badgesProduct.forEach(badge => {
              badge.classList.remove('text-black', 'bg-white');
            });

            let lastBadge;
            if (badgesProduct.length === 1) {
              lastBadge = badgesProduct[0];
            } else {
              lastBadge = badgesProduct[badgesProduct.length - 1];
            }
            lastBadge.classList.add('text-black', 'bg-white');

            badgesProduct.forEach((badge) => {
              badge.addEventListener('click', (e) => {
                badgesProduct.forEach(badge => {
                  badge.classList.remove('text-black', 'bg-white');
                });

                if (e.currentTarget !== lastBadge) {
                  e.currentTarget.classList.add('text-black', 'bg-white');
                  lastBadge.classList.remove('text-black', 'bg-white');
                  lastBadge = e.currentTarget;
                } else {
                  e.currentTarget.classList.add('text-black', 'bg-white');
                }
              });
            });

            const targetImage = lastBadge.getAttribute('data-target');
            boatImages.forEach(boatImage => {
              if (boatImage.getAttribute('data-image') === targetImage) {
                boatImage.style.display = 'block';
              }
            });

            const allCollectionMenuItems = document.querySelectorAll('.collection-menu-item');
            allCollectionMenuItems.forEach(item => {
              if (item !== collectionMenuItem) {
                const otherCollectionInfoContainer = item.querySelector('.collection-info-container');
                if (otherCollectionInfoContainer) {
                  otherCollectionInfoContainer.classList.remove('overflow-auto', 'h-auto');
                  otherCollectionInfoContainer.classList.add('overflow-hidden', 'h-0');
                }
              }
            });


            collectionInfoContainer.classList.remove('overflow-hidden', 'h-0');
            collectionInfoContainer.classList.add('overflow-auto', 'h-auto');

            function handleOutsideClick(event) {
              const clickedOutside = Array.from(allCollectionMenuItems).every(item => !item.contains(event.target));

              if (clickedOutside) {
                collectionInfoContainer.classList.remove('overflow-auto', 'h-auto');
                collectionInfoContainer.classList.add('overflow-hidden', 'h-0');

                boatImages.forEach((boatImage) => {
                  const badgeActive = collectionInfoContainer.querySelector('.bg-white').getAttribute('data-target');
                  if (boatImage.getAttribute('data-image') === badgeActive) {
                    boatImage.style.display = 'none';
                  }
                });

                document.removeEventListener('click', handleOutsideClick);
              }
            }

            setTimeout(() => {
              document.addEventListener('click', handleOutsideClick);
            }, 0);
          });


        }
      });
    }

    window.addEventListener('resize', handleSecondMenuLevel);
    handleSecondMenuLevel();

    // Hide the second-level menu and show the main menu when the back arrow is clicked
    document.querySelector('.back-nav-container').addEventListener('click', () => {
      secondMenu.classList.add('hidden');
      secondMenu.classList.remove('flex');
      navbar.classList.remove('toBlack');
      menuIcon.classList.remove('toBlack');
      menuChip.classList.remove('toBlack');
      logo.classList.remove('toBlack');
    });


    //handle product items displayed on second level menu
    const allSecondLinksMenu = Array.from(document.querySelectorAll('[data-collection]'));
    const allChipsCollection = Array.from(document.querySelectorAll('[id="collection-chips-title"]'));
    const allCollectionDescription = Array.from(document.querySelectorAll('[data-collection-description]'));
    const productCols = Array.from(document.querySelectorAll('[data-product-collection]'));

    //set click event for each link inside the second menu
    allSecondLinksMenu.forEach((link) => {
      link.addEventListener('click', (e) => {
        //remove number items foreach link
        const linkTarget = e.currentTarget.innerText.replace(/[0-9]/g, '').trim();
        //hide each product item
        productCols.forEach((product) => {
          product.parentElement.classList.add('hidden');
        });

        allCollectionDescription.forEach((item) => {
          if (linkTarget == (item.getAttribute('data-collection-description'))) {
            item.classList.add('block');
            item.classList.remove('hidden')
          } else {
            item.classList.add('hidden');
            item.classList.remove('block')
          }
        })

        //get foreach chips element his parent and prevent active class
        allChipsCollection.forEach((chipCol) => {
          const parentElement = chipCol.parentElement;
          parentElement.classList.remove('chips-label-active');

          chipCol.addEventListener('click', (e) => {
            const chipClicked = e.currentTarget;
            allChipsCollection.forEach((el) => {
              el.parentElement.classList.remove('chips-label-active')
              el.nextElementSibling.classList.remove('-rotate-45')
            });

            allCollectionDescription.forEach((el) => {
              if (chipCol.innerHTML == (el.getAttribute('data-collection-description'))) {
                el.classList.add('block');
                el.classList.remove('hidden');
              } else {
                el.classList.add('hidden');
                el.classList.remove('block');
              }
            });

            if (chipCol.innerHTML != "View all ranges") {
              chipClicked.parentElement.classList.add('chips-label-active');
              chipClicked.nextElementSibling.classList.add('-rotate-45');
            }
            productCols.forEach((product) => {
              if (chipClicked.innerText === product.getAttribute('data-product-collection')) {
                product.parentElement.classList.remove('hidden');
              } else if (chipClicked.innerText === 'View all ranges' && (product.getAttribute('data-product-collection') != 'Pardo approved')) {
                product.parentElement.classList.remove('hidden');
              } else {
                product.parentElement.classList.add('hidden');
              }
            })
          })

          //check if the content of each chip is equal to the link clicked and show the products items
          if (chipCol.innerText.trim() === linkTarget) {
            parentElement.classList.add('chips-label-active');
            chipCol.nextElementSibling.classList.add('-rotate-45')
            productCols.forEach((product) => {
              const productCollection = product.getAttribute('data-product-collection');
              if (chipCol.innerText.trim() === productCollection) {
                product.parentElement.classList.remove('hidden');
              }
            });
          }
        });
      });
    });


    //check screenSize to show the boat image container and link info pop-up
    function checkDevice() {
      const screenSize = window.innerWidth;
      const collectionDesktopInfo = document.querySelectorAll('.collection-info-container');
      const boatDesktopContainer = document.querySelector('.boat-image-container');
      const badges = document.querySelectorAll('.badge-product');
      const images = document.querySelectorAll('.boat-image-container img');

      if (screenSize <= 625) {
        collectionDesktopInfo.forEach((div) => {
          div.style.display = 'none';
        });
        if (boatDesktopContainer) {
          boatDesktopContainer.style.display = 'none';
        }
      } else {
        collectionDesktopInfo.forEach((div) => {
          div.style.display = 'flex';
        });
        if (boatDesktopContainer) {
          boatDesktopContainer.style.display = 'block';
        }

        images.forEach(image => {
          image.style.display = 'none';
        });

        badges.forEach(badge => {
          badge.addEventListener('click', function () {
            const target = badge.getAttribute('data-target');
            images.forEach(image => {
              image.style.display = 'none';
            });
            const selectedImage = document.querySelector(`.boat-image-container img[data-image="${target}"]`);
            if (selectedImage) {
              selectedImage.style.display = 'block';
            }
          });
        });
      }
    }

    checkDevice();
    window.addEventListener('resize', checkDevice);

  });
</script>