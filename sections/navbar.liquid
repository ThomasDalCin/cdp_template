<!-- navbar section -->
<!---->
<div
  class="navbar w-full h-auto fixed z-50 left-0 top-0 right-0 bg-transparent px-4 py-3 transition-all duration-300 ease-in-out lg:px-10 lg:py-6">
  <div class="navbar-container flex items-center justify-between flex-row relative">
    <div class="menu-yachts-label transition-colors duration-100 ease-linear cursor-pointer">
      <p class="body-small chip-text">Yachts</p>
    </div>
    <div
      class="menu-logo-container w-[93px] h-[23px] flex-shrink-0 absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2">
      <div class="pardo-logo w-auto h-auto">
        <a href="/" id="pardo-logo" class="w-auto h-auto">
          <div class="w-auto h-auto">
            {% render 'pardo-logo-one' %}
          </div>
        </a>
      </div>
    </div>
    <div class="menu-icon w-auto h-auto text-white transition-colors duration-300 ease-in-out">
      <div class="container-open-icon cursor-pointer">
        {% render 'menu-icon' %}
      </div>
      <div class="container-close-icon hidden">
        {% render 'x-icon' %}
      </div>
    </div>
  </div>

  <!-- Second level Menu Container -->
  <div class="w-full h-auto relative">
    <div
      class="second-level-menu-container w-full h-screen flex flex-col gap-y-3 bg-[var(--primary-background-color)] fixed left-0 right-0 p-4 z-30 hidden">

      <div class="back-nav-container flex items-center justify-start py-4">
        {% render 'back-arrow-icon' %}
      </div>

      <div
        class="chips-horizontal-container w-[calc(100%+2rem)] min-h-[40px] h-[40px] flex gap-x-2 overflow-x-auto px-4 -mx-4">
        {% assign collectionSorted = collections | sort : 'title' | reverse %}
        {% for collection in collectionSorted %}
        {% unless collection.title == 'Pardo approved' %}
        <div class="chips-label flex items-center space-x-2 min-h-[40px]">
          <div class="chips-text text-nowrap body-14" id="collection-chips-title">{{ collection.title }}</div>
          {% render 'arrow-down-icon' %}
        </div>
        {% endunless %}
        {% endfor %}
      </div>

      <div class="collection-description w-full h-auto flex items-start justify-center">
        {% for collection in collectionSorted %}
        {% unless collection.title == 'Pardo approved' %}
        <div
          class="description-box-container rounded-xl bg-[var(--secondary-background-color)] p-4 hidden flex flex-row gap-x-3"
          data-collection-description="{{ collection.title }}">
          <p class="body-12">{{ collection.description }}</p>
          <div class="container-x-icon">
            {% render 'x-icon-16' %}
          </div>
        </div>
        {% endunless %}
        {% endfor %}
      </div>

      <div
        class="second-level-menu-items w-full flex flex-col items-center justify-start gap-y-6 overflow-y-auto pb-52">
        {% for collection in collections %}
        {% for product in collection.products %}
        {% assign productMainImg = product.images[0] %}
        <div class="container-product-main w-full h-auto flex flex-col items-center justify-center">
          <li class="container-product-main-image w-full h-auto list-none"
            data-product-collection="{{ collection.title }}">
            <a href="{{ product.url }}" class="w-full h-auto">
              <img class="product-main-img w-full h-auto object-contain" src="{{ productMainImg | img_url: 'master' }}"
                alt="{{ product.title }}">
            </a>
          </li>
          <p class="header-1-medium">{{ product.title | replace: "Pardo", "" }}</p>
        </div>
        {% endfor %}
        {% endfor %}
      </div>

      <!-- Fixed "View all ranges" label at the bottom -->
      <div class="w-full h-auto chip-fixed fixed left-0 right-0 bottom-0 px-4 py-6 bg-white z-50">
        <div class="w-full h-auto flex flex-row justify-between">
          <div class="chips-text text-nowrap body-14" id="collection-chips-title">View all ranges</div>
          {% render 'arrow-down-menu' %}
        </div>
      </div>

    </div>
  </div>


  <!-- Yatch Menu Container -->
  <div class="yatch-menu-container w-full h-auto flex-col gap-y-10 mt-6 hidden lg:mt-10 lg:mb-10 relative">
    <div class="main-manu-container w-full h-auto flex flex-col gap-y-4 lg:gap-y-5">
      {% assign allLinksTitle = "Walkaround,Endurance,Grand Touring,View all ranges" | split: ',' %}

      {% for link in linklists.yatch.links %}
      {% assign matching_collection = collections[link.object.handle] %}
      {% assign product_count = 0 %}
      {% if matching_collection %}
      {% assign product_count = matching_collection.products_count %}
      {% endif %}
      {% unless link.title == 'Pardo approved' or link.title == 'Pardo experience' %}
      <li
        class="header-1-medium text-white list-none inline-flex flex-col justify-center items-start relative collection-menu-item"
        data-collection="{{ link.object.handle }}">
        <div class="relative inline-block">
          {% if allLinksTitle contains link.title %}
          {% if link.title == 'View all ranges' %}
          {{ link.title | link_to: 'javascript:void(0);', class: "text-[20px] font-light leading-[20px] lg:text-[24px]
          lg:leading-[24px]" }}
          {% else %}
          {{ link.title | link_to: 'javascript:void(0);', class: "text-[32px] leading-[32px] lg:text-[40px]
          lg:leading-[40px]" }}
          {% endif %}
          {% endif %}
          {% if matching_collection %}
          {% if product_count.size > 0 %}
          <span
            class="product-count absolute top-2 -right-2 text-white body-16 px-2 py-1 transform translate-x-1/2 -translate-y-1/2">
            {{ product_count }}
          </span>
          {% endif %}
          {% endif %}
        </div>
        <div
          class="collection-info-container w-auto inline-flex flex-col items-start justify-start transition-all duration-200 ease-linear overflow-hidden h-0">
          {% if link.title == "View all ranges" %}
            <div class="contaiener-badges h-auto flex flex-row flex-wrap gap-x-2 items-start justify-center w-[343px]">
              {% for collection in collections %}
                 {% if collection.title != 'Pardo approved' %}
                  {% for product in collection.products %}
                    <div class="badge-product border-white cursor-pointer mt-4 mb-4" data-target="{{ product.title }}">
                      <a href="{{ product.url }}">
                        {{ product.title | replace: 'Pardo', '' }}
                      </a>
                    </div>
                  {% endfor %}
                 {% endif %}
              {% endfor %}
            </div>
          {% endif %}
          <div class="contaiener-badges w-auto h-auto flex flex-row gap-x-2 items-start justify-center">
            {% for product in matching_collection.products %}
            <div class="badge-product border-white cursor-pointer mt-4 mb-4" data-target="{{ product.title }}">
              <a href="{{ product.url }}">
                {{ product.title | replace: 'Pardo', '' }}
              </a>
            </div>
            {% endfor %}
          </div>
          {% if matching_collection.description != "Pardo approved" %}
          <div
            class="collection-container-description lg:w-[343px] lg:min-w-[343px] h-auto inline-flex items-start justify-center p-4 rounded-lg bg-[var(--secondary-background-color)] text-black">
            <p class="body-12">{{ matching_collection.description }}</p>
          </div>
          {% endif %}
      </li>
      {% endunless %}
      {% endfor %}


      <div class="container-secondary-link w-full h-auto flex flex-col gap-y-2 lg:gap-y-2 mt-10">
        {% for link in linklists.yatch.links %}
        {% unless allLinksTitle contains link.title %}
        {{ link.title | link_to: link.url, class: "text-white font-light text-[16px] leading-[22px] lg:text-[16px]
        lg:leading-[22px] underline" }}
        {% endunless %}
        {% endfor %}
      </div>


      <div class="w-full h-auto flex items-center justify-end mt-10">
        <a href="/pages/locate-delear">
          <div class="cta-primary bg-white border-none lg:flex-1 lg:px-4 lg:py-2">
            <p class="body-14-medium">Locate Delear</p>
            {% render 'cta-icon' %}
          </div>
        </a>
      </div>


      <!-- boat image container on desktop -->
      <div class="boat-image-container w-auto h-auto absolute left-1/2 top-1/2 -translate-x-1/4 -translate-y-1/2 z-30">
        {% for collection in collections %}
        {% for product in collection.products %}
        {% assign boatImage = product.metafields.custom.boat_menu_image.value %}
        {% if boatImage %}
        <a href="{{ product.url }}">
          <img src="{{ boatImage | img_url: 'master' }}" alt="boat png image"
            class="boat-image w-auto h-auto object-contain" data-image="{{ product.title }}">
        </a>
        {% endif %}
        {% endfor %}
        {% endfor %}
      </div>
    </div>
  </div>


  <!-- Main Menu Container -->
  <div class="main-menu-container w-full h-auto flex-col gap-y-10 mt-6 hidden lg:mt-10 lg:mb-10">
    <div class="main-manu-container w-full h-auto flex flex-col gap-y-6">
      {% for link in linklists.main-menu.links %}
      {% unless link.title == 'Press room' or link.title == 'Pardo experience' %}
      <li class="header-1-medium text-white list-none inline-flex items-center relative lg:hover:text-shadow">
        {{ link.title | link_to: link.url, class: "text-[32px] leading-[32px] lg:text-[40px] lg:leading-[40px]" }}
      </li>
      {% endunless %}
      {% endfor %}

      <div class="grouped-links-container w-full h-auto flex flex-col gap-y-2 lg:gap-y-2 mt-10">
        {% for link in linklists.main-menu.links %}
        {% if link.title == 'Press room' or link.title == 'Pardo experience' %}

        {{ link.title | link_to: link.url, class: "text-white font-light text-[16px] leading-[22px] lg:text-[16px]
        lg:leading-[22px] underline" }}
        {% endif %}
        {% endfor %}
      </div>
      <div class="w-full h-auto flex items-center justify-end">
        <a href="/pages/locate-delear">
          <div class="cta-primary bg-white border-none lg:flex-1 lg:px-4 lg:py-2">
            <p class="body-14-medium">Locate Delear</p>
            {% render 'cta-icon' %}
          </div>
        </a>
      </div>
    </div>
  </div>


</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    //get current page and others
    const hadScrolled = window.scrollY;
    const currentPage = window.location.pathname;
    const isNotHomepage = currentPage !== '/';
    const isNewsArticle = currentPage.startsWith('/blogs/news/');
    // Navbar elements
    const navbar = document.querySelector('.navbar');
    const menuIcon = document.querySelector('.menu-icon');
    const menuChip = document.querySelector('.menu-yachts-label');
    const logo = document.getElementById('pardo-logo');
    // Menu types
    const menuYatch = document.querySelector('.yatch-menu-container');
    const mainMenu = document.querySelector('.main-menu-container');
    const secondMenu = document.querySelector('.second-level-menu-container');
    const navDynamicHeight = navbar.offsetHeight;
    secondMenu.style.top = `${navDynamicHeight}px`;
    // Chips label
    const chipText = document.querySelector('.chip-text');
    // Menu icons
    const openIcon = document.querySelector('.container-open-icon');
    const closeIcon = document.querySelector('.container-close-icon');
    //Style element
    const styleElement = document.createElement('style');
    styleElement.innerHTML = `
    .toBlack {
      color: #000;
      border-color: #000;
    }
    .navbar.toBlack {
      background-color: white;
    }
    .toAccent {
      background-color: var(--accent-dark-color);
    }
    .no-scroll {
      overflow: hidden;
    }
    .linear-gradient {
    background: linear-gradient(90deg, #6F6262 14.5%, #A59E9E 100%);
}

    `;
    //append style element to the document
    document.head.appendChild(styleElement);

    //handle scroll event and add style to the Navbar
    window.addEventListener('scroll', updateNavbarStyle);
    updateNavbarStyle();

    /*function updateNavbarStyle(nav, menu, handleMenuType) {
      const isOpen = menu.classList.contains('flex');

      // Cambia lo stato del menu
      if (isOpen) {
        menu.classList.remove('flex');
        menu.classList.add('hidden');
      } else {
        menu.classList.add('flex');
        menu.classList.remove('hidden');
      }

      // Passa il valore isOpen a handleMenuType
      handleMenuType(menu, isOpen);
    }

    menuChip.addEventListener('click', (e) => {
      const menuType = e.currentTarget;
      const navContainer = menuType.parentElement;
      const menuContainer = handleNextElement(navContainer, 'yatch-menu-container');

      if (menuContainer) {
        updateNavbarStyle(navbar, menuContainer, (menu, isOpen) => handleMenuType(menuType, menuType.classList[0], isOpen));
      } else {
        console.error('Yatch menu container not found!');
      }
    });

    menuIcon.addEventListener('click', (e) => {
      const menuType = e.currentTarget;
      const navContainer = menuType.parentElement;
      const menuContainer = handleNextElement(navContainer, 'main-menu-container');

      if (menuContainer) {
        updateNavbarStyle(navbar, menuContainer, (menu, isOpen) => handleMenuType(menuType, menuType.classList[0], isOpen));
      } else {
        console.error('Main menu container not found!');
      }
    });

    
    function handleMenuType(menuType, targetClass, isOpen) {
      // Cambia il testo in base allo stato del menu
      if (targetClass === 'menu-yachts-label') {
        menuType.firstElementChild.innerText = isOpen ? 'Yatch' : 'Close';
      } else if (targetClass === 'menu-icon') {
        const childrens = menuType.children;
        console.log(childrens);
      }
    }

    function handleNextElement(container, targetEl) {
      let nextElement = container.nextElementSibling;
      while (nextElement) {
        if (nextElement.classList.contains(targetEl)) {
          return nextElement;
        }
        nextElement = nextElement.nextElementSibling;
      }
      return null;
    }*/



    function updateNavbarStyle() {
      const isMenuYatchVisible = menuYatch.classList.contains('flex');
      const isMenuMainVisible = mainMenu.classList.contains('flex');
      const hasScrolled = window.scrollY > 0;

      if (isMenuYatchVisible || isMenuMainVisible) {
        navbar.classList.add('toAccent');
        navbar.classList.remove('toBlack');
        menuIcon.classList.remove('toBlack');
        menuChip.classList.remove('toBlack');
        logo.classList.remove('toBlack');
        logo.classList.add('text-white');

        const boatImages = document.querySelectorAll('.boat-image');
        boatImages.forEach(boatImage => {
          boatImage.style.display = 'none';
        });

      } else if (hasScrolled && !isNotHomepage) {
        navbar.classList.add('toBlack');
        menuIcon.classList.add('toBlack');
        menuChip.classList.add('toBlack');
        logo.classList.add('toBlack');
        logo.classList.remove('text-white');
        navbar.classList.remove('linear-gradient');
      } else if (hasScrolled) {
        navbar.classList.add('toBlack');
        menuIcon.classList.add('toBlack');
        menuChip.classList.add('toBlack');
        logo.classList.add('toBlack');
        logo.classList.remove('text-white');
      } else if (!isNotHomepage && !hasScrolled) {
        navbar.classList.remove('toBlack', 'toAccent');
        menuIcon.classList.remove('toBlack');
        menuChip.classList.remove('toBlack');
        logo.classList.remove('toBlack');
        logo.classList.add('text-white');
        navbar.classList.remove('linear-gradient');
      } else if (isNewsArticle && !hasScrolled) {
        navbar.classList.remove('toBlack');
        menuIcon.classList.remove('toBlack');
        menuChip.classList.remove('toBlack');
        logo.classList.remove('toBlack');
        logo.classList.add('text-white')
      } else {
        navbar.classList.remove('toBlack', 'toAccent');
        menuIcon.classList.add('toBlack');
        menuChip.classList.add('toBlack');
        logo.classList.add('toBlack');
        navbar.classList.remove('linear-gradient');
      }
    }


    //handle second menu layut base on device size
    window.addEventListener('resize', handleSecondMenuLevel);
    handleSecondMenuLevel();

    // Handle second menu
    function handleSecondMenuLevel() {
      const screenSize = window.innerWidth;
      let lastBadge;

      document.querySelectorAll('a[href="javascript:void(0);"]').forEach(link => {
        if (screenSize <= 625) {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            secondMenu.classList.remove('hidden');
            secondMenu.classList.add('flex');
            navbar.classList.add('toBlack');
            menuIcon.classList.add('toBlack');
            menuChip.classList.add('toBlack');
            logo.classList.add('toBlack')

          });
        }
        else {

          link.addEventListener('mouseover', (e) => {
            e.currentTarget.classList.add('text-shadow');
          });

          link.addEventListener('mouseout', (e) => {
            e.currentTarget.classList.remove('text-shadow');
          });

          link.addEventListener('click', (e) => {
            e.preventDefault();

            navbar.classList.add('linear-gradient');

            const collectionMenuItem = e.currentTarget.closest('.collection-menu-item');
            const collectionInfoContainer = collectionMenuItem.querySelector('.collection-info-container');
            const badgesProduct = collectionInfoContainer.querySelectorAll('.badge-product');
            const boatImages = document.querySelectorAll('.boat-image');


            boatImages.forEach(boatImage => {
              boatImage.style.display = 'none';
            });


            badgesProduct.forEach(badge => {
              badge.classList.remove('text-black', 'bg-white');
            });

            let lastBadge;
            if (badgesProduct.length === 1) {
              lastBadge = badgesProduct[0];
            } else {
              lastBadge = badgesProduct[badgesProduct.length - 1];
            }
            lastBadge.classList.add('text-black', 'bg-white');

            badgesProduct.forEach((badge) => {
              badge.addEventListener('mouseover', (e) => {
                badgesProduct.forEach(badge => {
                  badge.classList.remove('text-black', 'bg-white');
                });

                if (e.currentTarget !== lastBadge) {
                  e.currentTarget.classList.add('text-black', 'bg-white');
                  lastBadge.classList.remove('text-black', 'bg-white');
                  lastBadge = e.currentTarget;
                } else {
                  e.currentTarget.classList.add('text-black', 'bg-white');
                }
              });
            });

            const targetImage = lastBadge.getAttribute('data-target');
            boatImages.forEach(boatImage => {
              if (boatImage.getAttribute('data-image') === targetImage) {
                boatImage.style.display = 'block';
              }
            });

            const allCollectionMenuItems = document.querySelectorAll('.collection-menu-item');
            allCollectionMenuItems.forEach(item => {
              if (item !== collectionMenuItem) {
                const otherCollectionInfoContainer = item.querySelector('.collection-info-container');
                if (otherCollectionInfoContainer) {
                  otherCollectionInfoContainer.classList.remove('overflow-auto', 'h-auto');
                  otherCollectionInfoContainer.classList.add('overflow-hidden', 'h-0');
                }
              }
            });


            collectionInfoContainer.classList.remove('overflow-hidden', 'h-0');
            collectionInfoContainer.classList.add('overflow-auto', 'h-auto');

            function handleOutsideClick(event) {
              const clickedOutside = Array.from(allCollectionMenuItems).every(item => !item.contains(event.target));

              if (clickedOutside) {
                collectionInfoContainer.classList.remove('overflow-auto', 'h-auto');
                collectionInfoContainer.classList.add('overflow-hidden', 'h-0');

                boatImages.forEach((boatImage) => {
                  const badgeActive = collectionInfoContainer.querySelector('.bg-white').getAttribute('data-target');
                  if (boatImage.getAttribute('data-image') === badgeActive) {
                    boatImage.style.display = 'none';
                  }
                });

                document.removeEventListener('click', handleOutsideClick);
              }
            }

            setTimeout(() => {
              document.addEventListener('click', handleOutsideClick);
            }, 0);
          });


        }
      });
    }

    //check device on resize event
    window.addEventListener('resize', checkDevice);
    checkDevice();

    //check screenSize to show the boat image container and link info pop-up
    function checkDevice() {
      const screenSize = window.innerWidth;
      const collectionDesktopInfo = document.querySelectorAll('.collection-info-container');
      const boatDesktopContainer = document.querySelector('.boat-image-container');
      const badges = document.querySelectorAll('.badge-product');
      const images = document.querySelectorAll('.boat-image-container img');

      if (screenSize <= 625) {
        collectionDesktopInfo.forEach((div) => {
          div.style.display = 'none';
        });
        if (boatDesktopContainer) {
          boatDesktopContainer.style.display = 'none';
        }
      } else {
        collectionDesktopInfo.forEach((div) => {
          div.style.display = 'flex';
        });
        if (boatDesktopContainer) {
          boatDesktopContainer.style.display = 'block';
        }

        images.forEach(image => {
          image.style.display = 'none';
        });

        badges.forEach(badge => {
          badge.addEventListener('mouseover', function () {
            const target = badge.getAttribute('data-target');
            images.forEach(image => {
              image.style.display = 'none';
            });
            const selectedImage = document.querySelector(`.boat-image-container img[data-image="${target}"]`);
            if (selectedImage) {
              selectedImage.style.display = 'block';
            }
          });
        });
      }
    }


    menuChip.addEventListener('click', (e) => {
      const targetEl = navbar;
      const handleClickOutside = (event) => {
        if (!menuYatch.contains(event.target) && !menuChip.contains(event.target) && !navbar.contains(event.target)) {
          if (isNotHomepage) {
            menuYatch.classList.remove('flex');
            menuYatch.classList.add('hidden');
            targetEl.classList.remove('toAccent');
            targetEl.classList.add('toBlack');
            menuIcon.classList.add('toBlack');
            menuChip.classList.add('toBlack');
            logo.classList.add('toBlack');
            document.body.classList.remove('no-scroll');
            chipText.innerHTML = 'Yatch';
          } else {
            menuYatch.classList.remove('flex');
            menuYatch.classList.add('hidden');
            targetEl.classList.remove('toAccent');
            targetEl.classList.remove('toBlack');
            menuIcon.classList.remove('toBlack');
            menuChip.classList.remove('toBlack');
            logo.classList.add('text-white');
            document.body.classList.remove('no-scroll');
            chipText.innerHTML = 'Yatch';
            navbar.classList.remove('linear-gradient')
          }
        }
      };

      // Check if the main menu is visible, if yes do nothing
      if (mainMenu.classList.contains('flex')) return;

      const isMenuYatchHidden = menuYatch.classList.contains('hidden');
      const isSecondMenuOpen = secondMenu.classList.contains('flex');

      if (isMenuYatchHidden) {
        // Show the menu
        menuYatch.classList.remove('hidden');
        menuYatch.classList.add('flex');
        chipText.innerHTML = 'Close';
        document.body.classList.add('no-scroll');
        updateNavbarStyle();
        document.addEventListener('click', handleClickOutside);
      } else if (isSecondMenuOpen) {
        chipText.innerHTML = 'Yachts';
        secondMenu.classList.add('hidden');
        secondMenu.classList.remove('flex');
        // Hide the menu
        menuYatch.classList.remove('flex');
        menuYatch.classList.add('hidden');
        chipText.innerHTML = 'Yachts';
        document.body.classList.remove('no-scroll');
        navbar.classList.remove('toAccent');
        updateNavbarStyle();
      } else if (!isMenuYatchHidden && isNewsArticle) {
        navbar.classList.remove('toAccent');
        chipText.innerHTML = 'Yachts';
        secondMenu.classList.add('hidden');
        secondMenu.classList.remove('flex');
        // Hide the menu
        menuYatch.classList.remove('flex');
        menuYatch.classList.add('hidden');
        chipText.innerHTML = 'Yachts';
        document.body.classList.remove('no-scroll');
        updateNavbarStyle();
      } else {
        // Hide the menu
        menuYatch.classList.remove('flex');
        menuYatch.classList.add('hidden');
        chipText.innerHTML = 'Yachts';
        document.body.classList.remove('no-scroll');
        updateNavbarStyle();
      }
    });



    menuIcon.addEventListener('click', (e) => {
      const targetEl = navbar;
      const handleClickOutside = (event) => {
        if (!mainMenu.contains(event.target) && !menuIcon.contains(event.target) && !navbar.contains(event.target)) {
          if (isNotHomepage) {
            // Nascondi il menu e aggiorna le icone
            mainMenu.classList.remove('flex');
            mainMenu.classList.add('hidden');
            targetEl.classList.remove('toAccent');
            closeIcon.classList.remove('flex');
            closeIcon.classList.add('hidden');
            openIcon.classList.remove('hidden');
            openIcon.classList.add('flex');
            targetEl.classList.add('toBlack');
            menuIcon.classList.add('toBlack');
            menuChip.classList.add('toBlack');
            logo.classList.add('toBlack');
            document.body.classList.remove('no-scroll');
            document.removeEventListener('click', handleClickOutside);
          } else {
            // Nascondi il menu e aggiorna le icone
            navbar.classList.remove('toBlack');
            mainMenu.classList.remove('flex');
            mainMenu.classList.add('hidden');
            targetEl.classList.remove('toAccent');
            closeIcon.classList.remove('flex');
            closeIcon.classList.add('hidden');
            openIcon.classList.remove('hidden');
            openIcon.classList.add('flex');
            targetEl.classList.remove('toBlack');
            menuIcon.classList.remove('toBlack');
            menuChip.classList.remove('toBlack');
            logo.classList.add('text-white');
            document.body.classList.remove('no-scroll');
            document.removeEventListener('click', handleClickOutside);
          }
        }
      };

      // Check if the Yacht menu is visible, if yes, do nothing
      if (menuYatch.classList.contains('flex')) return;

      const isMenuMainHidden = mainMenu.classList.contains('hidden');

      if (isMenuMainHidden) {
        mainMenu.classList.remove('hidden');
        mainMenu.classList.add('flex');
        openIcon.classList.add('hidden');
        openIcon.classList.remove('flex');
        closeIcon.classList.add('flex');
        closeIcon.classList.remove('hidden');

        closeIcon.classList.add('text-white');
        closeIcon.classList.remove('text-black');

        document.body.classList.add('no-scroll');
        updateNavbarStyle();

        document.addEventListener('click', handleClickOutside);
      } else {
        mainMenu.classList.remove('flex');
        mainMenu.classList.add('hidden');
        openIcon.classList.add('flex');
        openIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        closeIcon.classList.remove('flex');
        navbar.classList.remove('toAccent');
        closeIcon.classList.remove('text-white');
        closeIcon.classList.add('text-black');

        document.body.classList.remove('no-scroll');
        updateNavbarStyle();


        document.removeEventListener('click', handleClickOutside);
      }
    });




    // Hide the second-level menu and show the main menu when the back arrow is clicked
    document.querySelector('.back-nav-container').addEventListener('click', () => {
      secondMenu.classList.add('hidden');
      secondMenu.classList.remove('flex');
      navbar.classList.remove('toBlack');
      menuIcon.classList.remove('toBlack');
      menuChip.classList.remove('toBlack');
      logo.classList.remove('toBlack');
    });


    const allSecondLinksMenu = Array.from(document.querySelectorAll('[data-collection]'));
    const allChipsCollection = Array.from(document.querySelectorAll('[id="collection-chips-title"]'));
    const allCollectionDescription = Array.from(document.querySelectorAll('[data-collection-description]'));
    const productCols = Array.from(document.querySelectorAll('[data-product-collection]'));
    const chipFixed = document.querySelector('.chip-fixed');

    // Gestione del clic sui link del menu
    allSecondLinksMenu.forEach((link) => {
      document.querySelector('.second-level-menu-items').scrollTop = 0;

      link.addEventListener('click', (e) => {
        const linkTarget = e.currentTarget.innerText.replace(/[0-9]/g, '').trim();
        allCollectionDescription.forEach((el) => {
          el.classList.add('flex');
        })
        // Nascondi tutti i prodotti
        productCols.forEach((product) => {
          product.parentElement.classList.add('hidden');
        });

        // Mostra la descrizione della collezione corrispondente
        allCollectionDescription.forEach((item) => {
          if (linkTarget === item.getAttribute('data-collection-description')) {
            item.classList.add('block');
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
            item.classList.remove('block');
          }
        });

        // Funzione per gestire la chiusura delle descrizioni
        function handleDescriptionContent(item) {
          if (item.classList.contains('flex') || item.classList.contains('flex-row')) {
            item.classList.remove('flex');
            item.classList.add('hidden');
          }
        }

        document.querySelectorAll('.container-x-icon').forEach((icon) => {
          icon.addEventListener('click', (e) => {
            const iconClicked = e.currentTarget;
            const contentToClose = iconClicked.closest('.description-box-container');
            handleDescriptionContent(contentToClose);
          });
        });

        // Gestione del clic sulle chips
        allChipsCollection.forEach((chipCol) => {
          const parentElement = chipCol.parentElement;
          parentElement.classList.remove('chips-label-active');
          
          document.querySelector('.second-level-menu-items').scrollTop = 0;
          chipCol.addEventListener('click', (e) => {
            const chipClicked = e.currentTarget;

            // Rimuovi l'attivazione da tutte le chips
            allChipsCollection.forEach((el) => {
              el.parentElement.classList.remove('chips-label-active');
              el.nextElementSibling.classList.add('-rotate-45');
            });

            // Gestisci il chip "View all ranges"
            if (chipClicked && chipClicked.innerHTML !== "View all ranges") {
              chipClicked.nextElementSibling.classList.remove('-rotate-45');
              chipClicked.parentElement.classList.add('chips-label-active');
              chipFixed.classList.remove('hidden');
            }

            // Mostra o nascondi le descrizioni in base alla chip selezionata
            allCollectionDescription.forEach((el) => {
              if (chipCol.innerHTML === el.getAttribute('data-collection-description')) {
                el.classList.add('flex');
                el.classList.remove('hidden');
              } else {
                el.classList.add('hidden');
                el.classList.remove('flex');
              }
            });

            // Mostra i prodotti associati alla chip selezionata
            productCols.forEach((product) => {
              if (chipClicked.innerText === product.getAttribute('data-product-collection')) {
                product.parentElement.classList.remove('hidden');
              } else if (chipClicked.innerText === 'View all ranges' && (product.getAttribute('data-product-collection') !== 'Pardo approved')) {
                product.parentElement.classList.remove('hidden');
                chipFixed.classList.add('hidden');
              } else {
                product.parentElement.classList.add('hidden');
              }
            });
          });

          // Se il chip è già selezionato dal link
          if (chipCol.innerText.trim() === linkTarget) {
            allChipsCollection.forEach((chipCol) => {
              chipCol.nextElementSibling.classList.add('-rotate-45');
            });
            parentElement.classList.add('chips-label-active');
            chipCol.nextElementSibling.classList.remove('-rotate-45');
            productCols.forEach((product) => {
              const productCollection = product.getAttribute('data-product-collection');
              if (chipCol.innerText.trim() === productCollection) {
                product.parentElement.classList.remove('hidden');
              }
            });
          }
        });
      });

      // Gestione speciale per "View all ranges"
      if (link.innerText.trim() === "View all ranges") {
        link.addEventListener('click', (e) => {
          // Mostra tutti i prodotti, tranne quelli "Pardo approved"
          productCols.forEach((product) => {
            if (product.getAttribute('data-product-collection') !== 'Pardo approved') {
              product.parentElement.classList.remove('hidden');
            } else {
              product.parentElement.classList.add('hidden');
            }
          });

          // Nascondi il chip fisso
          chipFixed.classList.add('hidden');

          // Chiudi tutte le descrizioni
          allCollectionDescription.forEach((el) => {
            el.classList.add('hidden');
            el.classList.remove('flex');
          });
        });

        // **Aggiungiamo qui il listener per il clic sul contenitore intero "View all ranges"**
        const viewAllRangesContainer = document.querySelector('.chip-fixed');

        viewAllRangesContainer.addEventListener('click', () => {
          document.querySelector('.second-level-menu-items').scrollTop = 0;
          // Mostra tutti i prodotti, tranne quelli "Pardo approved"
          productCols.forEach((product) => {
            if (product.getAttribute('data-product-collection') !== 'Pardo approved') {
              product.parentElement.classList.remove('hidden');
            } else {
              product.parentElement.classList.add('hidden');
            }
          });

          // Nascondi il chip fisso
          chipFixed.classList.add('hidden');

          // Chiudi tutte le descrizioni
          allCollectionDescription.forEach((el) => {
            el.classList.add('hidden');
            el.classList.remove('flex');
          });

          // Rimuovi l'attivazione da tutte le chips
          allChipsCollection.forEach((chip) => {
            chip.parentElement.classList.remove('chips-label-active');
            chip.nextElementSibling.classList.add('-rotate-45');
          });
        });
      }
    });

  });
</script>