<!-- Blog Tab Section -->
<div
  class="tab-blog-filter-section w-full h-auto flex flex-row items-center justify-start mt-[194px] mb-6 lg:justify-end">
  <div
    class="tab-blog-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer active lg:flex-none lg:w-[170px]"
    id="events-tab">
    <p class="body-14 font-medium">{{ section.settings.events_tab }}</p>
    <div
      class="tab-events-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black transition-transform duration-300 ease-in-out flex">
    </div>
  </div>
  <div
    class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer lg:flex-none lg:w-[170px]"
    id="news-tab">
    <p class="body-14 font-light">{{ section.settings.news_tab }}</p>
    <div
      class="tab-news-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black transition-transform duration-300 ease-in-out hidden">
    </div>
  </div>
</div>

<div
  class="chips-horizontal-container w-full flex items-center justify-center gap-x-2 overflow-auto p-4 lg:justify-start lg:px-10"
  id="blog-chips">
  {% if blogs['news'] %}
  {% assign all_tags = '' %}
  {% for article in blogs['news'].articles %}
  {% for tag in article.tags %}
  {% unless all_tags contains tag %}
  {% assign all_tags = all_tags | append: tag | append: ',' %}
  {% endunless %}
  {% endfor %}
  {% endfor %}
  {% assign tags_array = all_tags | split: ',' %}
  {% assign tags_array = tags_array | sort %}
  {% assign tags_array = tags_array | reverse %}

  <!-- Dynamic Tags -->
  {% for tag in tags_array %}
  {% if tag != '' %}
  <div
    class="chips-label flex items-center space-x-2 flex-1 {% if tag == 'News' %} chips-blog-active{% endif %} cursor-pointer lg:flex-none"
    data-tag="{{ tag }}">
    <div class="chips-text text-nowrap body-14 flex flex-row gap-x-2 items-center justify-start">
      <p class="body-14 chip-text-content">{{ tag }}</p>
      {% render 'arrow-down-icon' %}
    </div>
  </div>
  {% endif %}
  {% endfor %}
  {% else %}
  <p>No articles found in the 'news' blog.</p>
  {% endif %}
</div>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const eventsTab = document.getElementById('events-tab');
    const newsTab = document.getElementById('news-tab');
    const blogChips = document.getElementById('blog-chips');
    const eventsContent = document.querySelectorAll('.blog-events-container');
    const pastEvents = document.querySelector('.past-event');
    const newsContent = document.querySelector('.blog-news-container');
    const pressRoomContent = document.querySelector('.blog-pressroom-container');
    const awardsContent = document.querySelector('.blog-awards-container');
    const newsRect = document.querySelector('.tab-news-rect');
    const eventsRect = document.querySelector('.tab-events-rect');
    const chipsLabels = document.querySelectorAll('.chips-label');

    const eventsTabText = eventsTab.firstElementChild;
    const newsTabText = newsTab.firstElementChild;

    // Utility function to hide all content
    function hideAllContent() {
      if (newsContent) {
        newsContent.classList.add('hidden');
        newsContent.classList.remove('flex');
      }
      if (pressRoomContent) {
        pressRoomContent.classList.add('hidden');
        pressRoomContent.classList.remove('flex');
      }
      if (awardsContent) {
        awardsContent.classList.add('hidden');
        awardsContent.classList.remove('flex');
      }
      eventsContent.forEach((event) => {
        event.classList.add('hidden');
        event.classList.remove('flex');
      });
      if (pastEvents) {
        pastEvents.classList.add('hidden');
        pastEvents.classList.remove('flex');
      }
    }

    // Default state: Events tab active
    function activateEventsTab() {
      blogChips.classList.add('hidden'); // Nascondi i tag
      eventsRect.classList.add('flex');
      eventsRect.classList.remove('hidden');
      newsRect.classList.remove('flex');
      newsRect.classList.add('hidden');
      eventsTabText.classList.add('font-medium');
      eventsTabText.classList.remove('font-light');
      newsTabText.classList.remove('font-medium');
      newsTabText.classList.add('font-light');

      hideAllContent(); // Nascondi tutti i contenuti
      eventsContent.forEach((event) => {
        event.classList.add('flex'); // Mostra i contenuti Events
        event.classList.remove('hidden');
      });

      if (pastEvents) {
        pastEvents.classList.add('flex');
        pastEvents.classList.remove('hidden');
      }

      // Nascondi il contenuto News quando Events Ã¨ attivo
      if (newsContent) {
        newsContent.classList.add('hidden');
        newsContent.classList.remove('flex');
      }

      // Ripristina la posizione originale delle icone delle chips (se non sono attive)
      chipsLabels.forEach((chip) => {
        const icon = chip.querySelector('.chips-text svg');
        if (icon) {
          icon.classList.remove('rotate-0'); // Ripristina la posizione di rotazione
          icon.classList.add('-rotate-45'); // Ruota le icone non selezionate
        }
      });
    }

    // Activate News tab with default content
    function activateNewsTab() {
      blogChips.classList.remove('hidden'); // Mostra i tag
      eventsRect.classList.add('hidden');
      newsRect.classList.remove('hidden');
      eventsTabText.classList.remove('font-medium');
      eventsTabText.classList.add('font-light');
      newsTabText.classList.add('font-medium');
      newsTabText.classList.remove('font-light');

      hideAllContent(); // Nascondi tutti i contenuti
      if (newsContent) {
        newsContent.classList.remove('hidden'); // Mostra solo News Content
        newsContent.classList.add('flex');
      }

      // Attiva la chip News e lascia l'icona a 0 gradi
      chipsLabels.forEach((chip) => {
        const icon = chip.querySelector('.chips-text svg');
        if (chip.dataset.tag === 'News') {
          chip.classList.add('chips-blog-active'); // Marca la chip News come attiva
          if (icon) {
            icon.classList.remove('-rotate-45'); // Posizione non ruotata per News
            icon.classList.add('rotate-0'); // Posizione originale
          }
        } else {
          chip.classList.remove('chips-blog-active');
          if (icon) {
            icon.classList.remove('rotate-0'); // Posizione non ruotata per le altre chips
            icon.classList.add('-rotate-45'); // Ruota di 45 gradi
          }
        }
      });
    }

    // Handle chips click to filter content
    function handleChipClick(tag) {
      hideAllContent(); // Nascondi tutti i contenuti
      blogChips.classList.remove('hidden'); // I tag devono restare visibili

      // Rimuovi lo stato attivo da tutti i chip
      chipsLabels.forEach((chip) => {
        chip.classList.remove('chips-blog-active');
        const icon = chip.querySelector('.chips-text svg');
        if (icon) {
          icon.classList.remove('rotate-0');
          icon.classList.add('-rotate-45'); // Ruota le icone non selezionate
        }
      });

      // Marca il chip selezionato come attivo
      const selectedChip = document.querySelector(`[data-tag="${tag}"]`);
      selectedChip.classList.add('chips-blog-active');
      const currentIcon = selectedChip.querySelector('.chips-text svg');
      if (currentIcon) {
        currentIcon.classList.remove('-rotate-45');
        currentIcon.classList.add('rotate-0'); // Riporta l'icona selezionata alla posizione originale
      }

      // Mostra i contenuti filtrati in base al tag
      if (tag === 'News' && newsContent) {
        newsContent.classList.add('flex');
        newsContent.classList.remove('hidden');
      } else if (tag === 'Press Room' && pressRoomContent) {
        pressRoomContent.classList.add('flex');
        pressRoomContent.classList.remove('hidden');
      } else if (tag === 'Awards' && awardsContent) {
        awardsContent.classList.add('flex');
        awardsContent.classList.remove('hidden');
      }
    }

    // Attach click handlers to chips
    chipsLabels.forEach((chip) => {
      chip.addEventListener('click', () => {
        const tag = chip.dataset.tag;
        handleChipClick(tag); // Passa il tag selezionato alla funzione
      });
    });

    // Event listeners for tab clicks
    eventsTab.addEventListener('click', activateEventsTab);
    newsTab.addEventListener('click', activateNewsTab);

    // Set default active tab: Events (and hide News content by default)
    activateEventsTab();

    // Inizializzazione: Nascondi newsContent al caricamento della pagina
    if (newsContent) {
      newsContent.classList.add('hidden');
      newsContent.classList.remove('flex');
    }
  });


</script>

{% schema %}
{
"name": "blog-tab",
"settings": [
{
"type": "text",
"id": "news_tab",
"default": "News",
"label": "News Tab",
"info": "Set the text tab"
}, {
"type": "text",
"id": "events_tab",
"default": "Events",
"label": "Events Tab",
"info": "Set the text tab"
}
]
}
{% endschema %}