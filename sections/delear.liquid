<!-- delear section -->
<div
  class="w-full h-auto flex flex-col items-start justify-center gap-y-6 mb-10 overflow-x-hidden mt-[194px] lg:flex-row lg:flex-wrap lg:relative lg:pt-10">
  <!-- map wrapper -->
  <div class="delear-wrapper w-full h-auto md:pt-10 lg:w-1/2">
  <iframe src="https://my.atlist.com/map/04256125-7211-4b3d-8dc0-ebaa7026d1fa?share=true" allow="geolocation 'self' https://my.atlist.com" width="100%" height="700px" loading="lazy" frameborder="0" scrolling="no" allowfullscreen id="atlist-embed"></iframe>
  </div>
  <!-- list wrapper -->
  <div
    class="list-wrapper w-full h-auto hidden flex-col items-start justify-center p-4 gap-y-10 md:px-12 md:pt-10 lg:w-1/2 lg:flex lg:px-10 lg:py-0 lg:gap-y-0">
    <div
      class="chips-container w-[calc(100%_+_2rem)] h-auto flex flex-row gap-x-2 px-4 -mx-4 overflow-x-auto lg:p-0 lg:-mx-0 lg:w-full lg:py-10">
      <!-- render dynamically chip buttons -->
    </div>
    <div
      class="cards-container w-[calc(100%_+_2rem)] h-auto flex gap-x-2 px-4 -mx-4 overflow-x-auto md:w-[calc(100%_+_6rem)] md:px-12 md:-mx-12 lg:w-full lg:flex-col lg:gap-4 lg:-mx-0 lg:p-0 lg:h-[620px] lg:overflow-y-scroll lg:overflow-x-hidden">
      <!-- render dynamically card dealer -->
    </div>

  </div>

  <!-- cta icons -->
  <div class="w-full h-auto flex items-center justify-center cta_list cursor-pointer lg:hidden">
    <div class="cta-choco-round inline-flex items-center justify-center">
      {% render 'list-icon' %}
      <p class="body-14">{{ section.settings.cta_list }}</p>
    </div>
  </div>
  <div class="w-full h-auto items-center justify-center hidden cta_map cursor-pointer lg:hidden">
    <div class="cta-choco-round inline-flex items-center justify-center" style="color: white;">
      {% render 'map-icon' %}
      <p class="body-14">{{ section.settings.cta_map }}</p>
    </div>
  </div>

  <div
    class="w-full h-auto flex flex-col items-start justify-center p-4 gap-y-2 md:px-12 lg:absolute lg:left-10 lg:top-[calc(820px_+_1rem)]">
    <p class="body-14-medium">{{ section.settings.delear_heading }}</p>
    <p class="body-12">{{ section.settings.delear_text }}</p>
  </div>
</div>


<!-- Mobile CSS -->
<style>
  @media only screen and (max-width: 640px) {
    #atlist-embed {
      height: 375px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    //get elements from DOM
    const chipsContainer = document.querySelector('.chips-container');
    const cardContainer = document.querySelector('.cards-container');
    const uniqueAreas = [];

    //get cta button & wrapper content
    const listWrap = document.querySelector('.list-wrapper');
    const mapWrap = document.querySelector('.delear-wrapper');
    const ctaList = document.querySelector('.cta_list');
    const ctaMap = document.querySelector('.cta_map');
    //handle click on cta to display relative wrap
    ctaList.addEventListener('click', () => {
      mapWrap.classList.remove('flex');
      mapWrap.classList.add('hidden');
      listWrap.classList.add('flex');
      listWrap.classList.remove('hidden');
      //handle cta
      ctaList.classList.remove('flex');
      ctaList.classList.add('hidden');
      ctaMap.classList.add('flex');
      ctaMap.classList.remove('hidden');
    })
    ctaMap.addEventListener('click', () => {
      listWrap.classList.add('hidden');
      listWrap.classList.remove('flex');
      mapWrap.classList.add('flex');
      mapWrap.classList.remove('hidden');
      //handle cta
      ctaList.classList.add('flex');
      ctaList.classList.remove('hidden');
      ctaMap.classList.remove('flex');
      ctaMap.classList.add('hidden');
    })


    const getDelearData = async () => {
      try {
        const response = await fetch('{{ 'delear.json' | asset_url }}');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();

        data.forEach((delear) => {
          const delearArea = delear.Area.trim();
          if (!uniqueAreas.includes(delearArea)) {
            uniqueAreas.push(delearArea);
          }
        });

        return data;
      } catch (error) {
        console.error(error);
      }
    };

    //Function to create the chips
    async function createChips() {
      try {
        const data = await getDelearData();

        if (uniqueAreas.length === 0) {
          console.log("No data available");
          return;
        }

        //Europe at first
        uniqueAreas.sort((a, b) => {
          if (a === "Europa") return -1;
          if (b === "Europa") return 1;
          return a.localeCompare(b);
        });

        uniqueAreas.forEach((area, index) => {
          const chipLabel = document.createElement('div');
          chipLabel.innerHTML = `
        <div class="chips-label flex items-center cursor-pointer">
          <div class="chips-text text-nowrap flex flex-row gap-x-2 items-center justify-center body-14" id="${area}">
            <p class="body-14">${area}</p>
            {% render 'arrow-down-icon' %}
          </div>
        </div>
      `;

          chipsContainer.appendChild(chipLabel);

          //handle click on each chips
          chipLabel.addEventListener('click', (e) => {
            const chipClicked = e.currentTarget;
            const containerCardssScrolled = cardContainer.scrollLeft;

            document.querySelectorAll('.chips-label').forEach((chip) => {
              chip.classList.remove('chips-label-active');
              const svgIcon = chip.querySelector('.chips-text svg');
              if (svgIcon) {
                svgIcon.classList.remove('rotate-0');
              }
            });

            chipClicked.querySelector('.chips-label').classList.add('chips-label-active');
            const activeSvgIcon = chipClicked.querySelector('.chips-text svg');
            if (activeSvgIcon) {
              activeSvgIcon.classList.add('rotate-0');
            }

            filterCards(area);

            if (containerCardssScrolled > 0) {
              cardContainer.scrollTo({
                behavior: 'smooth',
                left: 0
              });
            }
          });

          //set europe as default
          if (area === "Europa") {
            chipLabel.querySelector('.chips-label').classList.add('chips-label-active');
            const defaultSvgIcon = chipLabel.querySelector('.chips-text svg');
            if (defaultSvgIcon) {
              defaultSvgIcon.classList.add('rotate-0');
            }
            filterCards(area);

          }
        });
      } catch (error) {
        console.log(error);
      }
    }

    const flagMaps = {
      ITALY: "{{ 'Italy (IT).png' | asset_url }}",
      Mexico: "{{ 'Mexico (MX).png' | asset_url }}",
      AUSTRALIA: "{{ 'Australia (AU).png' | asset_url }}",
      THAILAND: "{{ 'Thailand (TH).png' | asset_url }}",
      MALAYSIA: "{{ 'Malaysia (MY).png' | asset_url }}",
      SINGAPORE: "{{ 'Singapore (SG).png' | asset_url }}",
      TURKEY: "{{ 'Turkey (TK).png' | asset_url }}",
      FRANCE: "{{ 'France (FR).png' | asset_url }}",
      SPAIN: "{{ 'Spain (ES).png' | asset_url }}",
      NETHERLANDS:"{{ 'Netherlands (NL).png' | asset_url }}",
      CYPRUS: "{{ 'Cyprus (CY).png' | asset_url }}",
      SWITZERLAND: "{{ 'Switzerland (CH).png' | asset_url }}",
      GREECE: "{{ 'Greece (GR).png' | asset_url }}",
      CAZECH_REPUBLIC: "{{ 'Czech Republic (CZ).png' | asset_url }}",
      CROATIA: "{{ 'Croatia (HR).png' | asset_url }}",
      SLOVENIA: "{{ 'Slovenia (SI).png' | asset_url }}",
      BULGARIA: "{{ 'Bulgaria (BG).png' | asset_url }}",
      ISRAEL: "{{ 'Israel (IL).png' | asset_url }}",
      GERMANY: "{{ 'Germany (DE).png' | asset_url }}",
      UK: "{{ 'United Kingdom (UK).png' | asset_url }}",
      USA: "{{ 'United States of America (US).png' | asset_url }}",
      Uruguay: "{{ 'Italy (IT).png' | asset_url }}",
    }


    //Function to create Cards
    async function createCard() {
      try {
        const data = await getDelearData();

        data.forEach((delear) => {
          const card = document.createElement('div');
          card.classList.add('card');
          card.classList.add('lg:w-full');
          card.dataset.area = delear.Area.trim();
          
          const flagSrc = flagMaps[delear.Nazione] || "";

          card.innerHTML = `
          <div class="w-[300px] h-[344px] flex flex-col gap-y-4 p-4 rounded-lg bg-[var(--primary-background-color)] relative lg:w-full lg:p-6 lg:h-auto lg:justify-center">
            <div class="w-full h-auto flex flex-col gap-y-4 items-start justify-center">
              <div class="w-full h-auto flex flex-col gap-y-1 items-start justify-center">
                <div class="w-full h-auto flex flex-row items-center justify-between">
                     <p class="text-[18px] leading-[24px] tt-norms-pro-med">${delear.Dealer}</p>
                     <div class="w-auto h-auto flag-content">
                      <img src="${flagSrc}" alt="${delear.Nazione}flag" class="w-6 h-4">
                     </div>
                </div>
                <p class="font-16 tt-norms-pro-reg">${delear.Nazione}</p>
              </div>
              <div class="w-full h-auto flex flex-col gap-y-1 items-start justify-center">
                <p class="font-16 tt-norms-pro-reg text-[#646464]">{{ section.settings.card_contact }}</p>
                <p class="font-16 tt-norms-pro-reg">{{ section.settings.card_mobile |  default: "Mobile" }}: ${delear['Mobile:']}</p>
                <p class="font-16 tt-norms-pro-reg">{{ section.settings.card_email |  default: "Email" }}: ${delear['E: Mail']}</p>
              </div>
              <div class="hidden card-description">
                <p class="font-16 tt-norms-pro-reg">Vorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vulputate libero et velit interdum, ac aliquet odio mattis. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.</p>
              </div>
            </div>
            <div class="w-full h-auto flex flex-col gap-y-2 items-start justify-center">
              <a href=${delear['Sito Web']} class="underline font-14-medium flex flex-row gap-x-1 items-start items-center">
                <p class="font-16 tt-norms-pro-reg">Visita il sito web</p>
                {% render 'website-icon' %}
              </a>
            </div>
            <div class="w-full h-auto lg:w-full lg:flex lg:items-center lg:justify-end">
            <div class="w-auto h-auto flex items-center justify-center absolute right-6 bottom-6 cta-choco-round h-[32px] w-[124px] min-w-[124px] cta-open-delear lg:static lg:w-[124px] lg:items-end">
              <a href="/pages/delear">
                <p class="font-16 tt-norms-pro-reg">Scopri</p>
              </a>
            </div>
            </div>
          </div>
        `;

          // Aggiungi evento click al bottone "cta-open-delear"
          const ctaButton = card.querySelector('.cta-open-delear a');
          ctaButton.addEventListener('click', () => {
            const cardDescription = card.querySelector('.card-description').innerText.trim();

            const cardData = {
              dealer: delear.Dealer,
              indirizzo: delear.Indirizzo,
              manager: delear['Manager Vendite'],
              mobile: delear['Mobile:'],
              email: delear['E: Mail'],
              sitoWeb: delear['Sito Web'],
              description: cardDescription,
              flagSrc: flagSrc
            };

            // Salva i dati nel localStorage
            localStorage.setItem('selectedDelear', JSON.stringify(cardData));

            console.log('Dati salvati nel localStorage:', cardData);
          });

          cardContainer.appendChild(card);
        });

      } catch (error) {
        console.log(error);
      }
    }

    function filterCards(area) {
      const cards = document.querySelectorAll('.card');
      cards.forEach((card) => {
        const cardArea = card.dataset.area;
        if (cardArea === area || area === 'all') {
          card.style.display = 'flex';
        } else {
          card.style.display = 'none';
        }
      });
    }

    createCard();
    createChips();
  });
</script>


{% comment %}
Section Schema Settings here;
{% endcomment %}
{% schema %}
{
"name": "delear-page-content",
"settings": [
{
"type": "text",
"id": "delear_heading",
"default": "Our network of experts",
"label": "Delear Info Heading"
},
{
"type": "text",
"id": "delear_text",
"default": "The experience of our expert dealers is irreplaceable. Find a local dealer to learn more.",
"label": "Delear Info Text"
},
{
"type": "text",
"id": "cta_list",
"default": "List Delear",
"label": "List delear cta"
},
{
"type": "text",
"id": "cta_map",
"default": "Map Delear",
"label": "Map delear cta"
}, {
"type": "text",
"id": "manager_sales",
"default": "Manager sales",
"label": "Manager sales"
}, {
"type": "text",
"id": "card_contact",
"default": "Contact",
"label": "Card contact"
}

]
}
{% endschema %}