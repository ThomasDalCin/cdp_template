<!-- delear section -->
<div class="w-full h-auto flex flex-col items-start justify-center gap-y-6 mb-10">
  <!-- map wrapper -->
  <div class="delear-wrapper w-full h-auto">
    <iframe src="https://my.atlist.com/map/8d8aed69-bfc1-483b-999c-63d30b85ec11?share=true" allow="geolocation 'self' https://my.atlist.com" width="100%" height="820px" loading="lazy" frameborder="0" scrolling="no" allowfullscreen id="atlist-embed"></iframe>
  </div>
  <!-- list wrapper -->
  <div class="list-wrapper w-full h-auto hidden flex-col items-start justify-center p-4 gap-y-3">
    <div class="chips-container w-[calc(100%_+_2rem)] h-auto flex flex-row gap-x-2 px-4 -mx-4 overflow-x-auto">
      <!-- render dynamically chip buttons -->
    </div>
    <div class="cards-container w-[calc(100%_+_2rem)] h-auto flex flex-row gap-x-2 px-4 -mx-4 overflow-x-auto">
      <!-- render dynamically card delear -->
    </div>
  </div>

  <!-- cta icons -->
  <div class="w-full h-auto flex items-center justify-center cta_list">
    <div class="cta-accent inline-flex items-center justify-center">
      {% render 'list-icon' %}
      <p class="body-14">{{ section.settings.cta_list }}</p>
    </div>
  </div>
  <div class="w-full h-auto items-center justify-center hidden cta_map">
    <div class="cta-accent inline-flex items-center justify-center" style="color: white;">
      {% render 'map-icon' %}
      <p class="body-14">{{ section.settings.cta_map }}</p>
    </div>
  </div>

  <div class="w-full h-auto flex flex-col items-start justify-center p-4 gap-y-2">
    <p class="body-14-medium">{{ section.settings.delear_heading }}</p>
    <p class="body-12">{{ section.settings.delear_text }}</p>
  </div>
</div>


<!-- Mobile CSS -->
<style>
  @media only screen and (max-width: 640px) {
    #atlist-embed {
      height: 375px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    //get elements from DOM
    const chipsContainer = document.querySelector('.chips-container');
    const cardContainer = document.querySelector('.cards-container');
    const uniqueAreas = [];

    //get cta button & wrapper content
    const listWrap = document.querySelector('.list-wrapper');
    const mapWrap = document.querySelector('.delear-wrapper');
    const ctaList = document.querySelector('.cta_list');
    const ctaMap = document.querySelector('.cta_map');
    //handle click on cta to display relative wrap
    ctaList.addEventListener('click', () => {
      mapWrap.classList.remove('flex');
      mapWrap.classList.add('hidden');
      listWrap.classList.add('flex');
      listWrap.classList.remove('hidden');
      //handle cta
      ctaList.classList.remove('flex');
      ctaList.classList.add('hidden');
      ctaMap.classList.add('flex');
      ctaMap.classList.remove('hidden');
    })
    ctaMap.addEventListener('click', () => {
      listWrap.classList.add('hidden');
      listWrap.classList.remove('flex');
      mapWrap.classList.add('flex');
      mapWrap.classList.remove('hidden');
      //handle cta
      ctaList.classList.add('flex');
      ctaList.classList.remove('hidden');
      ctaMap.classList.remove('flex');
      ctaMap.classList.add('hidden');
    })


    const getDelearData = async () => {
      try {
        const response = await fetch('{{ 'delear.json' | asset_url }}');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();

        data.forEach((delear) => {
          const delearArea = delear.Area.trim();
          if (!uniqueAreas.includes(delearArea)) {
            uniqueAreas.push(delearArea);
          }
        });

        return data;
      } catch (error) {
        console.error(error);
      }
    };

    //Function to create the chips
    async function createChips() {
      try {
        const data = await getDelearData();

        if (uniqueAreas.length === 0) {
          console.log("No data available");
          return;
        }

        //Europe at first
        uniqueAreas.sort((a, b) => {
          if (a === "Europa") return -1; 
          if (b === "Europa") return 1;
          return a.localeCompare(b);
        });

        uniqueAreas.forEach((area, index) => {
          const chipLabel = document.createElement('div');
          chipLabel.innerHTML = `
        <div class="chips-label flex items-center">
          <div class="chips-text text-nowrap flex flex-row gap-x-2 items-center justify-center body-14" id="${area}">
            <p class="body-14">${area}</p>
            {% render 'arrow-down-icon' %}
          </div>
        </div>
      `;

          chipsContainer.appendChild(chipLabel);

          //handle click on each chips
          chipLabel.addEventListener('click', (e) => {
            const chipClicked = e.currentTarget;
            const containerCardssScrolled = cardContainer.scrollLeft;

            document.querySelectorAll('.chips-label').forEach((chip) => {
              chip.classList.remove('chips-label-active');
              const svgIcon = chip.querySelector('.chips-text svg');
              if (svgIcon) {
                svgIcon.classList.remove('rotate-0');
              }
            });

            chipClicked.querySelector('.chips-label').classList.add('chips-label-active');
            const activeSvgIcon = chipClicked.querySelector('.chips-text svg');
            if (activeSvgIcon) {
              activeSvgIcon.classList.add('rotate-0');
            }

            filterCards(area);

            if(containerCardssScrolled > 0){
              cardContainer.scrollTo({
              behavior: 'smooth',
              left: 0
            });
            }
          });

          //set europe as default
          if (area === "Europa") {
            chipLabel.querySelector('.chips-label').classList.add('chips-label-active');
            const defaultSvgIcon = chipLabel.querySelector('.chips-text svg');
            if (defaultSvgIcon) {
              defaultSvgIcon.classList.add('rotate-0');
            }
            filterCards(area);

          }
        });
      } catch (error) {
        console.log(error);
      }
    }


    //Function to create Cards
    async function createCard() {
      try {
        const data = await getDelearData();

        data.forEach((delear) => {
          const card = document.createElement('div');
          card.classList.add('card');
          card.dataset.area = delear.Area.trim();

          card.innerHTML = `
            <div class="w-[300px] h-[344px] flex flex-col gap-y-4 p-4 rounded-lg bg-[var(--secondary-background-color)]">
              <div class="w-auto h-auto flex flex-col gap-y-2 items-start justify-center">
                <div class="w-auto h-auto flex flex-col gap-y-1 items-start justify-center">
                <p class="font-14-medium">${delear.Dealer}</p>
                <p class="font-12">${delear.Indirizzo}</p>
                </div>
                <div class="w-auto h-auto flex flex-col gap-y-1 items-start justify-center">
                <p class="font-12 text-[var(--hover-gray)]">{{ section.settings.manager_sales }}</p>
                <p class="font-12">${delear['Manager Vendite']}</p>
                </div>
                <div class="w-auto h-auto flex flex-col gap-y-1 items-start justify-center">
                <p class="font-12 text-[var(--hover-gray)]">{{ section.settings.card_contact }}</p>
                <p class="font-12">${delear['Mobile:']}</p>
                <p class="font-12">${delear['E: Mail']}</p>
                </div>
              </div>
              <div class="w-auto h-auto flex flex-col gap-y-2 items-start justify-center">
                <a href=${delear['Sito Web']} class="underline font-14-medium flex flex-row gap-x-1 items-start items-center">
                  <p class="font-14">Visita il sito web</p>
                  {% render 'website-icon' %}
                </a>
              </div>
            </div>
          `;

          cardContainer.appendChild(card);

        });

      } catch (error) {
        console.log(error);
      }
    }

    function filterCards(area) {
      const cards = document.querySelectorAll('.card');
      cards.forEach((card) => {
        const cardArea = card.dataset.area;
        if (cardArea === area || area === 'all') {
          card.style.display = 'flex';
        } else {
          card.style.display = 'none';
        }
      });
    }

    createCard();
    createChips();
  });
</script>


{% comment %}
Section Schema Settings here;
{% endcomment %}
{% schema %}
{
"name": "delear-page-content",
"settings": [
{
"type": "text",
"id": "delear_heading",
"default": "Our network of experts",
"label": "Delear Info Heading"
},
{
"type": "text",
"id": "delear_text",
"default": "The experience of our expert dealers is irreplaceable. Find a local dealer to learn more.",
"label": "Delear Info Text"
},
{
"type": "text",
"id": "cta_list",
"default": "List Delear",
"label": "List delear cta"
},
{
"type": "text",
"id": "cta_map",
"default": "Map Delear",
"label": "Map delear cta"
}, {
"type": "text",
"id": "manager_sales",
"default": "Manager sales",
"label": "Manager sales"
}, {
"type": "text",
"id": "card_contact",
"default": "Contact",
"label": "Card contact"
}

]
}
{% endschema %}