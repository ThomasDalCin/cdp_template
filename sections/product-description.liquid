<!--product description drowpdown component -->
<div class="dropdown-container w-full h-auto flex flex-col gap-y-10 px-4 mb-[40px] lg:px-0 lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:mb-10">
    <div class="dropdown-content w-full h-auto flex flex-col p-4 rounded-xl bg-[var(--primary-background-color)] lg:bg-transparent lg:flex-row lg:gap-x-10">
        <div class="dropdown-container-top w-full h-auto flex flex-row justify-between items-center lg:w-auto lg:min-w-[323px] lg:items-start">
            <p class="body-16 font-semibold">{{ section.settings.description_text }}</p>
            <div class="dropdown-container-icon w-auto h-auto lg:hidden" id="plus-icon">
                {% render 'plus-icon' %}
            </div>
            <div class="dropdown-container-icon w-auto h-auto hidden lg:hidden" id="minus-icon">
                {% render 'minus-icon' %}
            </div>
        </div>
        <div class="dropdown-container-text transition-height duration-300 ease close-dropDown lg:w-1/3">
            <p class="body-12">{{ product.description }}</p>
        </div>
    </div>
</div>


<style>
.open-dropDown {
    height: auto;
    overflow: auto;
    padding-top: 8px;
    padding-bottom: 8px;
}

@media (min-width: 1024px) {
    .dropdown-container-text {
        height: auto !important;
        overflow: auto !important;
    }
}

.close-dropDown {
    height: 0;
    overflow: hidden;
    padding-top: 0px;
    padding-bottom: 0px;
}
</style>

<script>
// Get dropdown icons
const openIcon = document.getElementById('plus-icon');
const closeIcon = document.getElementById('minus-icon');
const icons = [openIcon, closeIcon]
// Get dropdown container
const dropDownWrap = document.querySelector('.dropdown-container-text');

// Function to toggle dropdown
function toggleDropdown() {
    if (dropDownWrap.classList.contains('close-dropDown')) {
        dropDownWrap.classList.remove('close-dropDown');
        dropDownWrap.classList.add('open-dropDown');
        openIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
    } else {
        dropDownWrap.classList.remove('open-dropDown');
        dropDownWrap.classList.add('close-dropDown');
        closeIcon.classList.add('hidden');
        openIcon.classList.remove('hidden');
    }
}

icons.forEach((icon)=>{
    icon.addEventListener('click', toggleDropdown)
})
</script>

{% comment %}
  Section Schema Settings here;
{% endcomment %}
{% schema %}
{
    "name": "product-description",
    "settings": [
        {
            "type": "text",
            "id": "description_text",
            "default": "Description",
            "label": "Description"
        }
        ]
}
{% endschema %}