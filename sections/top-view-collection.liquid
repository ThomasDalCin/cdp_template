<!--container badge product collection-->
<div class="w-full h-auto flex items-center justify-center relative mt-[227px] flex-col gap-y-12">

    <!--container first text-->
    <div class="w-full h-auto flex items-center justify-center">
        <p class="text-[40px] leading-[40px] tt-norms-pro-light text-center lg:text-[96px] lg:leading-[96px]">
            {{ section.settings.main_title | default: "Experience the " }}
            <span class="tt-norms-pro-reg text-[40px] leading-[40px] lg:text-[96px] lg:leading-[96px]">{{ collection.title }}</span>
        </p>
    </div>

    <div
        class="badge-container w-auto h-auto bg-[#EFEEED] rounded-full flex flex-row items-center justify-start gap-x-2 p-1 relative">
        {% for product in collection.products %}
        <div class="w-[61px] min-w-[61px] h-[38px] min-h-[38px] flex items-center justify-center p-badge z-10"
            data-attribute="{{ product.title }}" data-index="{{ forloop.index0 }}"
            onclick="selectBadge({{ forloop.index0 }})">
            <p class="body-16">{{ product.title | replace: "Pardo", ""}}</p>
        </div>
        {% endfor %}
        <!--moving badge here-->
        <div class="w-[61px] min-w-[61px] h-[38px] min-h-[38px] absolute left-1 top-1 z-0 bg-white rounded-full">
        </div>
    </div>
</div>

<!--container product image-->
<div class="w-full h-auto relative">
    <!--layer blur (posizionato una sola volta fuori dal ciclo)-->
    <div class="w-full h-[135px] rounded-[372px] bg-[#A9A09E] blur-[150px] lg:blur-[150px] absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 lg:w-full lg:h-[524px]">
    </div>

    <!--square white-->
    <div class="w-full h-[205px] bg-white absolute left-0 top-1/2 z-0 lg:h-[524px] lg:overflow-y-hidden"></div>

    <!--produt badge-->
    <div class="w-full h-auto flex items-center justify-center absolute left-0 right-0 bottom-12 z-10 lg:bottom-64">
        {% for product in collection.products %}
        {% if product.images.size > 0 %}
        {% assign firstImage = product.images[0] %}
        <a href="{{ product.url }}" class="product-cta" data-index="{{ forloop.index0 }}"
            style="display: {% if forloop.index0 == 0 %} block {% else %} none {% endif %};">
            <div class="cta-transparent-round w-[113px] h-auto max-h-[36px]">
                <p class="body-14 tt-norms-pro-reg">{{ section.settings.product_cta | default: "Discover " }} {{ product.title | replace: "Pardo", ""}}</p>
            </div>
        </a>
        {% endif %}
        {% endfor %}
    </div>

    <!-- Immagini dei prodotti -->
    {% for product in collection.products %}
    {% if product.images.size > 0 %}
    {% assign firstImage = product.images[0] %}
    <div class="w-full h-[268px] min-h-[268px] relative product-image z-10 lg:h-[720px]"
        data-index="{{ forloop.index0 }}"
        style="display: {% if forloop.index0 == 0 %} block {% else %} none {% endif %};">
        <img src="{{ firstImage | img_url: 'master' }}" alt="{{ product.title }} "
            class="w-full h-full object-contain object-center" data-attribute="{{ product.title }} ">
    </div>
    {% endif %}
    {% endfor %}

    <!-- Frecce di navigazione -->
    <div class="arrow-left-content hidden lg:absolute h-full left-10 top-0 lg:flex flex-col items-center justify-center z-40 -mt-[100px]">
        <div class="container-arrow w-[56px] h-[56px] bg-white rounded-full flex items-center justify-center cursor-pointer lg:hover:w-[72px] transition-all duration-150 ease-in " onclick="changeImage(-1)">
            {% render 'arrow-left-icon' %}
        </div>
    </div>
    <div class="arrow-right-content hidden lg:absolute h-full right-10 top-0 lg:flex flex-col items-center justify-center z-40 -mt-[100px]">
        <div class="container-arrow w-[56px] h-[56px] bg-white rounded-full flex items-center justify-center cursor-pointer lg:hover:w-[72px] transition-all duration-150 ease-in " onclick="changeImage(1)">
            {% render 'arrow-right-icon' %}
        </div>
    </div>
</div>


<!--scroll-info-collection-->
<div class="w-full h-auto flex items-center justify-center flex-col gap-y-4 relative px-4 z-20 overflow-x-hidden lg:px-0 lg:gap-y-20">
    <div class="auto h-auto flex flex-col items-center justify-center gap-y-4">
        <p class="text-[24px] leading-[40px] lg:text-[64px] lg:leading-[64px] tt-norms-pro-light">{{ section.settings.scroll_info_little_title | default: "Open the world" }}</p>
        <p class="text-[40px] leading-[40px] lg:text-[96px] lg:leading-[96px] tt-norms-pro-light">{{ section.settings.scroll_info_main_title | default: "Adventure & Ocean" }}</p>
    </div>

    <div class="product-details-magnetic-scroll w-full py-6 h-auto flex flex-row items-center justify-start gap-x-2 overflow-x-auto lg:w-full lg:px-[166px] lg:gap-x-10 lg:py-0">
        {% assign productMetafieldsValues = 'top_speed,lenght,dry_weight' | split: ',' %}
        {% for productMetafieldsValue in productMetafieldsValues %}
        {% assign metafieldCustom = product.metafields.custom[productMetafieldsValue].value %}
        <div class="details-badge flex flex-1 p-4 flex-col items-center justify-center gap-y-1 rounded-xl bg-[#EFEEED] flex-shrink-0 lg:h-[180px] lg:flex-1">
            <p class="body-14 text-nowrap lg:text-[24px] lg:leading-[30px]">{{ metafieldCustom }}</p>
            <p class="body-12 text-[#818181] text-nowrap lg:text-[32px] lg:leading-[38px]">{{ productMetafieldsValue | replace: '_', ' ' | upcase }}</p>
          
        </div>
        {% endfor %}
    </div>
</div>

<style>
    
    @media screen and (max-width: 440px) {
        .details-badge {
            width: 129.953px;
            max-width: 129.953px;
            padding: 16.372px;
            height: 79.814px;
        }
    }

    @media screen and (max-width: 430px) {
        .details-badge {
            width: 127px;
            max-width: 127px;
            padding: 16px;
            height: 78px;
        }

    }

    @media screen and (max-width: 393px) {
        .details-badge {
            width: 116.072px;
            max-width: 116.072px;
            padding: 14.623px;
            height: 71.288px;
        }
 
    }

    @media screen and (max-width: 375px) {
        .details-badge {
            width: 110.756px;
            max-width: 110.756px;
            padding: 13.953px;
            height: 68.023px;
        }
    }

    @media screen and (max-width: 320px) {
        .details-badge {
            width: 94.512px;
            max-width: 94.512px;
            padding: 11.907px;
            height: 58.047px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const badges = document.querySelectorAll('.p-badge');
        const productImages = document.querySelectorAll('.product-image');
        const productCtas = document.querySelectorAll('.product-cta');
        const movingBadge = document.querySelector('.badge-container .z-0');

        let currentIndex = 0;
        let touchStartX = 0;
        let touchEndX = 0;

        // Calcola il gap tra i badge
        function calculateBadgeGap() {
            if (badges.length < 2) return 0;
            const firstBadge = badges[0].getBoundingClientRect();
            const secondBadge = badges[1].getBoundingClientRect();
            return secondBadge.left - firstBadge.right;
        }

        // Mostra l'immagine del prodotto selezionato
        function showProductImage(index) {
            productImages.forEach((img, i) => {
                img.style.display = i === index ? 'block' : 'none';
            });
        }

        // Mostra il CTA del prodotto selezionato
        function showProductCta(index) {
            productCtas.forEach((cta, i) => {
                cta.style.display = i === index ? 'block' : 'none';
            });
        }

        // Sposta il badge mobile sotto il badge selezionato
        function moveBadge(index) {
            const badgeGap = calculateBadgeGap();
            const selectedBadge = badges[index];
            const badgeContainer = selectedBadge.parentNode;
            const badgeRect = selectedBadge.getBoundingClientRect();
            const containerRect = badgeContainer.getBoundingClientRect();

            const offsetX = badgeRect.left - containerRect.left + selectedBadge.offsetWidth / 2 - movingBadge.offsetWidth / 2 - badgeGap / 2;

            requestAnimationFrame(() => {
                movingBadge.style.transform = `translate(${offsetX}px)`;
                movingBadge.style.transition = "transform 0.3s ease";
            });
        }

        // Funzione per cambiare l'immagine in base all'indice
        window.changeImage = function (direction) {
            currentIndex = (currentIndex + direction + productImages.length) % productImages.length;
            showProductImage(currentIndex);
            showProductCta(currentIndex);
            moveBadge(currentIndex);
        }

        // Funzione per selezionare il badge
        window.selectBadge = function (index) {
            showProductImage(index);
            showProductCta(index);
            moveBadge(index);
            currentIndex = index;
        }

        // Funzioni touch per dispositivi mobili
        productImages.forEach((image) => {
            image.addEventListener('touchstart', (e) => {
                touchStartX = e.changedTouches[0].screenX;  // Memorizza la posizione iniziale del tocco
            });

            image.addEventListener('touchmove', (e) => {
                touchEndX = e.changedTouches[0].screenX;  // Aggiorna la posizione finale del tocco
            });

            image.addEventListener('touchend', () => {
                if (touchStartX - touchEndX > 50) {
                    // Swipe verso sinistra (passa al prossimo prodotto)
                    changeImage(1);
                } else if (touchEndX - touchStartX > 50) {
                    // Swipe verso destra (passa al prodotto precedente)
                    changeImage(-1);
                }
            });
        });

        // Inizializza il primo prodotto e il relativo CTA
        showProductImage(0);
        showProductCta(0);
        moveBadge(0);
    });
</script>
