<!-- Overlay Swiper Container -->
<div class="overlay hidden fixed z-50 inset-0 w-full h-dvh bg-[#EFEEED]">

    <!--container-closing-icon-->
    <div
        class="w-auto h-auto bg-white rounded-full flex items-center justify-center p-3 absolute right-4 top-16 close-overlay z-50 cursor-pointer">
        {% render 'x-icon' %}
    </div>

    <!--Swiper wrapper-->
    <div class="swiper swiper-container-overlay transition-all duration-200 ease-linear relative">


        <div class="swiper-wrapper swiper-wrapper-overlay">
            <!-- swiper slide here -->
        </div>


        <!--  Swiper bullets pagination -->
        <div
            class="container-swiper-pagination w-full h-auto absolute left-0 right-0 bottom-6 z-10 flex items-start justify-center lg:left-6 lg:top-[150px] lg:flex lg:flex-col lg:gap-y-6 lg:items-center lg:justify-center">
            <div class="w-auto h-auto">
                <div class="swiper-pagination-overlay"></div>
            </div>
        </div>

        <!--container button more info-->
        <div class="w-full h-auto flex items-center justify-center absolute z-50 left-0 right-0 bottom-16">
            <div class="w-auto h-auto px-4 py-2 rounded-3xl bg-[rgba(0,0,0,0.20)] backdrop-blur-lg text-white">
                <p class="overlay-button text-[14px] leading-[20px] tt-norms-pro-med">{{
                    section.settings.more_info_cta | default:
                    "More
                    info" }}</p>
            </div>
        </div>
    </div>



    <!--more info button container & text-->
    <div class="w-full h-auto flex flex-col items-start justify-center absolute z-50 left-0 right-0 bottom-0">

        <!--get metafields content text-->
        {% assign topViewGalleyUpText = product.metafields.custom.top_view_galley_up_description.value %}
        {% assign topViewGalleyDownText = product.metafields.custom.top_view_galley_down_description.value %}
        {% assign topViewInteriorGalleyUpText = product.metafields.custom.interiori_view_galley_up_description.value %}
        {% assign topViewInteriorGalleyDownText =
        product.metafields.custom.interior_view_galley_down_description.value%}
        {% assign topViewLowerDeckText = product.metafields.custom.interior_view_galley_down_description.value%}
        {% assign topViewFlyBridgeText = product.metafields.custom.interior_view_galley_down_description.value%}


        <!--container more info text-->
        <div class="w-full h-0  bg-white flex items-start justify-center overflow-y-hidden overlay-description transition-all duration-200 ease-linear"
            data-overlay="overlay-galley-up">
            <div class="w-auto h-auto p-6">
                <p class="body-14">{{ topViewGalleyUpText }}</p>
            </div>
        </div>

        <!--container more info text-->
        <div class="w-full h-0  bg-white flex items-start justify-center overflow-y-hidden overlay-description transition-all duration-200 ease-linear"
            data-overlay="overlay-galley-down">
            <div class="w-auto h-auto p-6">
                <p class="body-14">{{ topViewGalleyDownText }}</p>
            </div>
        </div>

        <!--container more info text-->
        <div class="w-full h-0  bg-white flex items-start justify-center overflow-y-hidden overlay-description transition-all duration-200 ease-linear"
            data-overlay="overlay-interior-galley-up">
            <div class="w-auto h-auto p-6">
                <p class="body-14">{{ topViewInteriorGalleyUpText }}</p>
            </div>
        </div>

        <!--container more info text-->
        <div class="w-full h-0 bg-white flex items-start justify-center overflow-y-hidden overlay-description transition-all duration-200 ease-linear"
            data-overlay="overlay-interior-galley-down">
            <div class="w-auto h-auto p-6">
                <p class="body-14">{{ topViewInteriorGalleyDownText }}</p>
            </div>
        </div>

        <!--container more info text-->
        <div class="w-full h-0 bg-white flex items-start justify-center overflow-y-hidden overlay-description transition-all duration-200 ease-linear"
            data-overlay="overlay-interior-galley-down">
            <div class="w-auto h-auto p-6">
                <p class="body-14">{{ overlay-lower-deck }}</p>
            </div>
        </div>

        <!--container more info text-->
        <div class="w-full h-0 bg-white flex items-start justify-center overflow-y-hidden overlay-description transition-all duration-200 ease-linear"
            data-overlay="overlay-fly-bridge">
            <div class="w-auto h-auto p-6">
                <p class="body-14">{{ topViewFlyBridgeText }}</p>
            </div>
        </div>
    </div>


</div>


<!-- Top View Galley Section -->
<div class="top-view-horizontal-scroll w-full h-auto px-6 flex flex-col mb-[40px] overflow-x-hidden bg-[#A9A09E] lg:px-20 lg:mb-0"
    id="Topview">

    <!-- Main Title Content -->
    <div
        class="top-view-horizontal-scroll-heading w-full h-auto flex items-center justify-start pt-14 pb-6 lg:pt-20 lg:pb-0">
        <h2 class="header-2 lg:text-[64px] lg:leading-[70px] tt-norms-pro-reg">{{ section.settings.main_title | default:
            "Top view" }}</h2>
    </div>

    <!-- Tab container -->
    <div class="wrap-container w-full h-auto lg:py-[60px] lg:flex lg:items-center lg:justify-center">
        <div
            class="w-full h-auto flex flex-row items-center justify-start py-6 gap-x-6 relative wrap-content overflow-x-auto lg:items-center lg:gap-x-10 lg:justify-center lg:inline-flex lg:w-auto">

            {% assign categoriesTabs = "Main deck, Lower Deck" | split: "," %}

            {% if product.metafields.custom.fly_bridge_std.value or  product.metafields.custom.fly_bridge_opt.value  %}
            {% assign categoriesTabs = categoriesTabs | join: ", " | append: ", Fly Bridge" | split: ", " %}
            {% endif %}

            {% for tabItem in categoriesTabs %}
            <div class="w-auto max-w-[99px] h-auto tab-gamma lg:cursor-pointer lg:max-w-none tab-categories"
                id="{{ tabItem | strip }}">
                <p
                    class="text-[18px] leading-[24px] tt-norms-pro-light text-nowrap tab-text lg:text-[40px] lg:leading-[40px]">
                    {{ tabItem | strip }}</p>
            </div>
            {% endfor %}

            <div class="union-icon w-auto h-auto absolute transition-all duration-200 ease-in top-1">
                {% render 'union-icon' %}
            </div>

        </div>
    </div>


    <!-- arrows box -->
    <div class="w-full h-auto hidden lg:flex lg:justify-end lg:gap-x-6 lg:px-10 container-arrows">
        <div
            class="w-auto h-auto flex-row inline-flex gap-x-4 rounded-full bg-[#F7F7F7] px-4 py-2 hover:bg-[#A9A09E] transition-all duration-150 ease-in cursor-pointer">
            <button id="prevArrowPng" class="carousel-arrow left-arrow flex items-center justify-center w-6 h-6">
                {% render 'arrow-left-black' %}
            </button>
            <button id="nextArrowPng" class="carousel-arrow right-arrow flex items-center justify-center w-6 h-6">
                {% render 'arrow-right-black' %}
            </button>
        </div>
    </div>

    <!-- Horizontal Container Scrolling -->
    <div
        class="horizontal-magnetic-scroll-container w-[calc(100%_+_3rem)] px-6 -mx-6 py-14 h-auto flex flex-row items-center justify-start gap-x-3 overflow-x-auto flex-shrink-0 lg:w-[calc(100%_+_10rem)] lg:px-20 lg:-mx-20 lg:py-[60px] lg:mb-[60px]">

        <!-- Metafield Assignment -->
        <!--standard-->
        {% assign flyBridge = product.metafields.custom.fly_bridge_std.value %}
        {% assign flyBridgeOpt = product.metafields.custom.fly_bridge_opt.value %}
        {% assign mainDeck = product.metafields.custom.main_deck_std.value %}
        {% assign mainDeckOpt = product.metafields.custom.main_deck_opt.value %}

        {% assign lowerDeck = product.metafields.custom.lower_deck_std.value %}
        {% assign lowerDeck_1 = product.metafields.custom.lower_deck_opt_1.value %}
        {% assign lowerDeck_2 = product.metafields.custom.lower_deck_opt_2.value %}
        {% assign lowerDeck_3 = product.metafields.custom.lower_deck_opt_3.value %}
        {% assign lowerDeck_4 = product.metafields.custom.lower_deck_opt_4.value %}



        {% if flyBridge %}
        {% assign flyBridge_images = 'image_one,image_two,image_three,image_four' | split: ',' %}

        <!-- Loop Through Galley Up Images and Render Only the First Image -->
        {% for image_key in flyBridge_images %}
        {% assign image_item = flyBridge[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center  lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="flyBridge"
                data-image="lower-deck">



                <!--container standard badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.standard_badge_text |
                            default: "Standard" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images|
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="flyBridge">
            {% for image_key in flyBridge_images %}
            {% assign image_item = flyBridge_images[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>
        {% endif %}

        {% if flyBridgeOpt %}
        {% assign flyBridgeOpt_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in flyBridgeOpt_images %}
        {% assign image_item = flyBridgeOpt[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="flyBridgeOpt"
                data-image="lower-deck">

                <!--container standard badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.standard_badge_text |
                            default: "Standard" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="flyBridgeOpt">
            {% for image_key in flyBridgeOpt_images %}
            {% assign image_item = flyBridgeOpt[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>



        {% if mainDeck %}
        {% assign mainDeck_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in mainDeck_images %}
        {% assign image_item = mainDeck[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="mainDeck"
                data-image="main-deck">

                <!--container standard badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.standard_badge_text |
                            default: "Standard" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="mainDeck">
            {% for image_key in mainDeck_images %}
            {% assign image_item = mainDeck[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>



        {% if mainDeckOpt %}
        {% assign mainDeckOpt_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in mainDeckOpt_images %}
        {% assign image_item = mainDeckOpt[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="mainDeckOpt"
                data-image="main-deck">

                <!--container standard badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.standard_badge_text |
                            default: "Standard" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="mainDeckOpt">
            {% for image_key in mainDeckOpt_images %}
            {% assign image_item = mainDeckOpt[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>


        {% if lowerDeck %}
        {% assign lowerDeck_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in lowerDeck_images %}
        {% assign image_item = lowerDeck[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="lowerDeck"
                data-image="lower-deck">

                <!--container standard badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.standard_badge_text |
                            default: "Standard" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="lowerDeck">
            {% for image_key in lowerDeck_images %}
            {% assign image_item = lowerDeck[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>



        {% if lowerDeck_1 %}
        {% assign lowerDeck_1_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in lowerDeck_1_images %}
        {% assign image_item = lowerDeck_1[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="lowerDeck_1"
                data-image="lower-deck">

                <!--container optional badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.optional_badge_text |
                            default: "Optional" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}


        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="lowerDeck_1">
            {% for image_key in lowerDeck_1_images %}
            {% assign image_item = lowerDeck_1[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>


        {% if lowerDeck_2 %}
        {% assign lowerDeck_2_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in lowerDeck_2_images %}
        {% assign image_item = lowerDeck_2[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:w-full lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="lowerDeck_2"
                data-image="lower-deck">

                <!--container optional badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.optional_badge_text |
                            default: "Optional" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="lowerDeck_2">
            {% for image_key in lowerDeck_2_images %}
            {% assign image_item = lowerDeck_2[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>



        {% if lowerDeck_3 %}
        {% assign lowerDeck_3_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in lowerDeck_3_images %}
        {% assign image_item = lowerDeck_3[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="lowerDeck_3"
                data-image="lower-deck">

                <!--container optional badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.optional_badge_text |
                            default: "Optional" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="lowerDeck_3">
            {% for image_key in lowerDeck_3_images %}
            {% assign image_item = lowerDeck_3[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>



        {% if lowerDeck_4 %}
        {% assign lowerDeck_4_images = 'image_one,image_two,image_three,image_four' | split: ',' %}
        {% for image_key in lowerDeck_4_images %}
        {% assign image_item = lowerDeck_4[image_key] %}
        {% if image_item %}
        {% if forloop.first %}
        <div
            class="top-view-scroll-img-container w-auto h-auto flex flex-col gap-y-2 items-start justify-center lg:h-[560px] lg:flex-1">

            <div class="top-view-scroll-img rounded-xl w-[320px] max-w-[320px] h-[560px] bg-[#F2EDED] bg-contain bg-center flex-shrink-0 relative lg:w-[308px] lg:bg-no-repeat lg:bg-55% lg:max-h-[560px]"
                style="background-image: url('{{ image_item | img_url: 'master' }}');" data-overlay="lowerDeck_4"
                data-image="lower-deck">

                <!--container optional badge -->
                <div class="w-full h-auto absolute left-0 top-0 pl-6 pt-6 flex flex-col items-start justify-center">
                    <div class="w-auto h-auto rounded-[48px] bg-white px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med layout-type">{{
                            section.settings.optional_badge_text |
                            default: "Optional" | upcase }}</p>
                    </div>
                </div>

                <!--container see more images-->
                <div class="w-full h-auto absolute right-0 bottom-0 pr-6 pb-6 flex flex-col items-end justify-center">
                    <div class="w-auto h-auto rounded-3xl bg-[#423C3B] px-4 py-[2px]">
                        <p class="text-[12px] leading-[20px] tt-norms-pro-med text-white">{{
                            section.settings.see_more_images |
                            default: "See more images" }}</p>
                    </div>
                </div>

            </div>

        </div>
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}


        <!-- Hidden Images -->
        <div class="hidden-images-container" style="display: none;" data-overlay="lowerDeck_4">
            {% for image_key in lowerDeck_4_images %}
            {% assign image_item = lowerDeck_4[image_key] %}
            {% if image_item %}
            <div class="hidden-image" data-image="{{ image_item | img_url: 'master' }}"></div>
            {% endif %}
            {% endfor %}
        </div>

    </div>
</div>

<style>
    .tab-categories {
        color: white;
        transition: color 0.3s ease;
    }

    .tab-categories.active-tab>p {
        color: black;
        font-family: "TT-Norms-Pro-Regular";
    }

    .tab-gamma:hover>p {
        color: #000;
    }

    .union-icon {
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.3s ease;
    }
</style>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const overlay = document.querySelector('.overlay');
        const swiperWrapper = document.querySelector('.swiper-wrapper-overlay');
        const swiperContainer = document.querySelector('.swiper-container-overlay');
        const overlayButton = document.querySelector('.overlay-button');
        const overlayDescriptions = document.querySelectorAll('.overlay-description');

        const unionIcon = document.querySelector('.union-icon');
        const wrapContent = document.querySelector('.wrap-content');
        const tabs = document.querySelectorAll('.tab-categories');

        const imageContainers = document.querySelectorAll('.top-view-scroll-img');
        let swiperOverlay;

        function openOverlay(images, layoutTypeText) {
            // Svuota il contenuto del wrapper prima di creare le slide
            swiperWrapper.innerHTML = '';

            const existingBadge = overlay.querySelector('.layout-badge');
            if (existingBadge) {
                existingBadge.remove();
            }


            // Classi da aggiungere ad ogni slide
            const slideClasses = ["h-screen", "flex", "items-center", "justify-center"];
            const badgeElClasses = ["layout-badge", "absolute", "left-6", "top-16", "w-auto", "h-auto", "rounded-[48px]", "bg-white", "px-4", "py-[2px]", "text-[12px]", "leading-[20px]", "tt-norms-pro-med"];

            // Crea badge se layoutTypeText è presente
            if (layoutTypeText) {
                const layoutBadgeEl = document.createElement('div');
                layoutBadgeEl.innerText = layoutTypeText;
                badgeElClasses.forEach((cls) => {
                    layoutBadgeEl.classList.add(cls);
                });
                overlay.appendChild(layoutBadgeEl);
            }


            // Aggiungi le immagini al wrapper
            images.forEach(imageUrl => {
                const slide = document.createElement('div');
                slide.classList.add('swiper-slide');
                slideClasses.forEach(cls => {
                    slide.classList.add(cls);
                });

                const slideImg = document.createElement('img');
                slideImg.classList.add('w-[247px]', 'h-[598px]');
                slideImg.setAttribute('src', imageUrl);
                slide.appendChild(slideImg);
                swiperWrapper.appendChild(slide);
            });

            // Inizializza Swiper
            swiperOverlay = new Swiper('.swiper-container-overlay', {
                slidesPerView: 1,
                spaceBetween: 0,
                pagination: {
                    el: '.swiper-pagination-overlay',
                    clickable: true
                },
            });

            // Mostra l'overlay e disabilita lo scroll del corpo
            overlay.classList.remove('hidden');
            document.body.classList.add('no-scroll');
        }

        function openOverlayText(overlayDescription) {
            // Nascondi tutte le altre descrizioni
            overlayDescriptions.forEach((desc) => {
                desc.style.height = '0'; // Chiudi tutte le descrizioni
            });

            // Mostra solo la descrizione attiva
            const descriptionHeight = overlayDescription.scrollHeight;
            overlayDescription.style.height = `${descriptionHeight}px`;

            // Cambia il testo del pulsante da "Read More" a "Less Info"
            overlayButton.textContent = 'Less Info';

            // Aggiustiamo l'altezza di swiperContainer per fare spazio alla descrizione
            const swiperHeight = swiperContainer.clientHeight;
            const adjustedHeight = swiperHeight - descriptionHeight;
            swiperContainer.style.height = `${Math.max(adjustedHeight, 0)}px`;

            // Aggiungi un event listener per nascondere di nuovo il testo
            overlayButton.removeEventListener('click', openOverlayText); // Rimuovi eventuali precedenti event listener
            overlayButton.addEventListener('click', function () {
                // Nascondi il testo
                overlayDescription.style.height = '0';

                // Cambia il testo del pulsante
                overlayButton.textContent = 'Read More';

                // Ripristina l'altezza di swiperContainer
                swiperContainer.style.height = '100%'; // Ripristina l'altezza predefinita

                // Aggiungi un nuovo event listener per mostrarlo di nuovo
                overlayButton.removeEventListener('click', arguments.callee); // Rimuovi l'event listener precedente
                overlayButton.addEventListener('click', function () {
                    openOverlayText(overlayDescription); // Riapri il testo
                });
            });
        }

        // Funzione per aggiornare la posizione dell'icona rispetto a wrapContainer
        function updateUnionIconPosition(target) {
            const targetRect = target.getBoundingClientRect();
            const containerRect = wrapContent.getBoundingClientRect();
            const unionIconWidth = unionIcon.offsetWidth;

            // Considera lo scroll di wrapContent nel calcolo
            const scrollOffset = wrapContent.scrollLeft;

            // Calcola la posizione centrale della tab selezionata rispetto al contenitore
            const tabCenterX = targetRect.left - containerRect.left + (targetRect.width / 2) + scrollOffset;

            // Muovi l'icona nella posizione calcolata
            unionIcon.style.transform = `translateX(${tabCenterX - unionIconWidth / 2}px)`;
            unionIcon.style.transition = "transform 0.3s ease";
        }

        // Funzione per convertire l'ID della tab in un formato compatibile con data-image
        function convertIdToDataImage(tabId) {
            return tabId.toLowerCase().replace(/\s+/g, '-'); // Minuscolo e sostituisce gli spazi con trattini
        }

        // Funzione per gestire il click sulla tab
        function handleTabClick(event) {
            const clickedTab = event.currentTarget;

            // Aggiorna la tab attiva
            tabs.forEach(tab => tab.classList.remove('active-tab'));
            clickedTab.classList.add('active-tab');

            // Aggiorna la posizione dell'icona
            updateUnionIconPosition(clickedTab);

            // Ottieni l'ID della tab cliccata e convertilo in formato data-image
            const tabId = clickedTab.textContent.trim();
            const dataImageValue = convertIdToDataImage(tabId);

            // Mostra solo i container delle immagini corrispondenti
            imageContainers.forEach(container => {
                const imageType = container.getAttribute('data-image');
                if (imageType === dataImageValue) {
                    container.parentElement.classList.remove('hidden');
                    container.classList.remove('hidden');
                } else {
                    container.parentElement.classList.add('hidden');
                    container.classList.add('hidden');
                }
            });

            handleScrollPngImages();
        }

        // Gestione del click sulle immagini principali per aprire l'overlay
        imageContainers.forEach(container => {
            container.addEventListener('click', function () {
                const overlayType = container.getAttribute('data-overlay');
                let images = [];

                // Ottieni tutte le immagini del container cliccato
                const hiddenImages = document.querySelectorAll(`.hidden-images-container[data-overlay="${overlayType}"] .hidden-image`);
                const hiddenDescription = document.querySelector(`.overlay-description[data-overlay="${overlayType}"]`);

                //get badge value
                const layoutType = container.querySelector('.layout-type');
                const layoutTypeText = layoutType ? layoutType.textContent.trim() : "";
                console.log(layoutType)

                hiddenImages.forEach(hiddenImage => {
                    images.push(hiddenImage.getAttribute('data-image'));
                });

                overlayButton.addEventListener('click', () => {
                    if (hiddenDescription) {
                        openOverlayText(hiddenDescription);
                    }
                });

                // Apri l'overlay con Swiper inizializzato
                openOverlay(images, layoutTypeText);
            });
        });

        // Gestione della chiusura dell'overlay
        const closeButton = document.querySelector('.close-overlay');
        if (closeButton) {
            closeButton.addEventListener('click', function () {
                if (swiperOverlay) {
                    swiperOverlay.destroy(true, true);
                    swiperWrapper.innerHTML = '';
                }
                overlay.classList.add('hidden');
                document.body.classList.remove('no-scroll');
                overlayDescriptions.forEach((overlayDescription) => {
                    overlayDescription.style.height = '0';
                });
                swiperContainer.style.height = '100%'; // Ripristina l'altezza predefinita di swiperContainer
            });
        }

        // Aggiungi l'evento di clic alle tab
        tabs.forEach(tab => {
            tab.addEventListener('click', handleTabClick);
            handleScrollPngImages();
        });

        // Imposta la tab iniziale come attiva
        tabs.forEach((tab, index) => {
            if (index === 0) {
                tab.classList.add('active-tab');
                updateUnionIconPosition(tab);

                // Mostra inizialmente solo le immagini della prima tab
                const tabId = tab.textContent.trim();
                const dataImageValue = convertIdToDataImage(tabId);
                imageContainers.forEach(container => {
                    if (container.getAttribute('data-image') === dataImageValue) {
                        container.parentElement.classList.remove('hidden');
                        container.classList.remove('hidden');
                    } else {
                        container.parentElement.classList.add('hidden');
                        container.classList.add('hidden');
                    }
                });
            }
            handleScrollPngImages();
        });

        //handle scrolling png
        function handleScrollPngImages() {
            const containerArrows = document.querySelector('.container-arrows');
            const prevArrow = document.getElementById('prevArrowPng');
            const nextArrow = document.getElementById('nextArrowPng');
            const scrollContainer = document.querySelector('.horizontal-magnetic-scroll-container');
            const imagesToScroll = Array.from(scrollContainer.querySelectorAll('.top-view-scroll-img'));

            //get the exact width + border of the image inside scroll container
            const imageslenght = imagesToScroll.length;
            const totalImageWidth = imagesToScroll.map((image) => {
                const width = image.offsetWidth;
                const marginRight = parseInt(getComputedStyle(image).marginRight);
                return width + marginRight;
            }).reduce((acc, width) => acc + width, 0);
            const scrollAmout = totalImageWidth / imageslenght;

            //check if there's images
            if (imagesToScroll.length > 0) {
                //update the arrows layout during scroll
                function updateArrows() {
                    //check the scrollable values
                    const currentScrollLeft = scrollContainer.scrollLeft;
                    const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;
                    prevArrow.classList.toggle('disabled', currentScrollLeft === 0);
                    nextArrow.classList.toggle('disabled', currentScrollLeft >= maxScrollLeft);
                }
                //function to scroll the container with the scrollAmount value
                function scrollContainerBy(amount) {
                    const currentScrollLeft = scrollContainer.scrollLeft;
                    let newScrollLeft = currentScrollLeft + amount;
                    const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;

                    if (newScrollLeft < 0) {
                        newScrollLeft = 0;
                    } else if (newScrollLeft > maxScrollLeft) {
                        newScrollLeft = maxScrollLeft;
                    }

                    scrollContainer.scrollTo({
                        left: newScrollLeft,
                        behavior: 'smooth'
                    });

                    setTimeout(updateArrows, 300);
                }

                //handle the scrollContainer by clicking on arrows
                if (prevArrow && nextArrow && scrollContainer) {
                    prevArrow.addEventListener('click', function () {
                        scrollContainerBy(scrollAmout);
                    });

                    nextArrow.addEventListener('click', function () {
                        scrollContainerBy(-scrollAmout);
                    });

                    updateArrows();
                    scrollContainer.addEventListener('scroll', updateArrows);
                }
            }

            if ((scrollContainer.scrollWidth - scrollContainer.clientWidth) > 0 && window.innerWidth > 1024) {
                containerArrows.style.display = "flex"
            } else {
                containerArrows.style.display = "none";
            }
        }

    });

</script>