<!-- Features Container -->
<div class="features-container w-full h-auto flex flex-col px-6 mb-[40px] lg:p-20 lg:flex-row lg:flex-wrap">

  <!-- Basics Information -->
  {% assign productBasics = product.metafields.custom.basics.value %}
  {% if productBasics %}
  {% assign basicFields = "year,make,model,series,lenght,fuel_type,hull_material" | split: "," %}
  <div
    class="specifiactions-list-row w-full flex flex-col gap-6 lg:flex-row lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:pb-10 lg:gap-x-5 lg:px-10 lg:px-10 lg:w-[calc(50%_-_1rem)]"
    id="General">

    <div class="specification-container-heading w-auto h-auto lg:w-auto lg:min-w-[323px] pt-14 pb-8">
      <p class="specification-heading text-[48px] leading-[52px] tt-norms-pro-light">{{ section.settings.product_basics
        }}</p>
    </div>

    <div class="w-full h-auto flex flex-row items-center justify-between py-6 dropdown-header"
      data-dropdown-target="basics">
      <p class="text-[20px] leading-[18px] tt-norms-pro-reg">{{ section.settings.basics_dropdown_title | default: "Basic
        boat details" }}</p>
      {% render "plus-icon" %}
    </div>

    <div class="specification-container-list w-full h-0 overflow-y-hidden lg:flex-1 dropdown-content basics">
      <ul class="list-features w-full h-auto flex flex-col gap-y-2 lg:flex-wrap lg:gap-x-3 lg:flex-row">
        {% for basicField in basicFields %}
        {% assign items_basics = productBasics[basicField] %}
        {% if items_basics %}
        {% for item in items_basics %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="body-12-medium text-[#818181] tt-norms-pro-reg">{{ basicField | replace: '_', ' ' | capitalize
            }}:</span>
          <span class="font-12-medium tt-norms-pro-reg">{{ item }}</span>
        </li>
        {% endfor %}
        {% else %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="font-bold">{{ basicField | replace: '_', ' ' | capitalize }}:</span>
          <span>No data available</span>
        </li>
        {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- Dimensions -->
  {% assign productDimensions = product.metafields.custom.dimensions.value %}
  {% if productDimensions %}
  {% assign dimensionFields = "lenght_over_all,max_draft,beam," | split: "," %}
  <div
    class="specifiactions-list-row w-full flex flex-col gap-6 lg:flex-col lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:pb-10 lg:gap-x-5 lg:px-10 lg:w-[calc(50%_-_1rem)]"
    id="Tech">

    <div class="specification-container-heading w-auto h-auto lg:w-auto lg:min-w-[323px] pt-14 pb-8">
      <p class="specification-heading text-[48px] leading-[52px] tt-norms-pro-light">{{
        section.settings.technical_features | default: "Technical Feature" }}</p>
    </div>

    <div class="w-full h-auto flex flex-row items-center justify-between py-6 dropdown-header"
      data-dropdown-target="dimensions">
      <p class="text-[20px] leading-[18px] tt-norms-pro-reg">{{ section.settings.dimensions_dropdown_title | default:
        "Dimensions" }}</p>
      {% render "plus-icon" %}
    </div>

    <div class="specification-container-list w-full h-0 overflow-y-hidden lg:flex-1 dropdown-content dimensions">
      <ul class="list-features w-full h-auto flex flex-col gap-y-2 lg:flex-wrap lg:gap-x-3 lg:flex-row">
        {% for dimensionField in dimensionFields %}
        {% assign items_dimensions = productDimensions[dimensionField] %}
        {% if items_dimensions %}
        {% for item in items_dimensions %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="body-12-medium text-[#818181] tt-norms-pro-reg">{{ dimensionField | replace: '_', ' ' |
            capitalize }}:</span>
          <span class="font-12-medium tt-norms-pro-reg">{{ item }}</span>
        </li>
        {% endfor %}
        {% else %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="font-bold">{{ dimensionField | replace: '_', ' ' | capitalize }}:</span>
          <span>No data available</span>
        </li>
        {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- Speed & Distance -->
  {% assign productSpeedDistance = product.metafields.custom.speed_distance.value %}
  {% if productSpeedDistance %}
  {% assign speedFields = "engine_make,engine_model" | split: "," %}
  <div
    class="specifiactions-list-row w-full flex flex-col gap-6 lg:flex-col lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:pb-10 lg:gap-x-5 lg:px-10 lg:w-[calc(50%_-_1rem)]">

    <div class="w-full h-auto flex flex-row items-center justify-between py-6 dropdown-header"
      data-dropdown-target="speed-distance">
      <p class="text-[20px] leading-[18px] tt-norms-pro-reg">{{ section.settings.speed_dropdown_title | default: "Speed
        & Distance" }}</p>
      {% render "plus-icon" %}
    </div>

    <div class="specification-container-list w-full h-0 overflow-y-hidden lg:flex-1 dropdown-content speed-distance">
      <ul class="list-features w-full h-auto flex flex-col gap-y-2 lg:flex-wrap lg:gap-x-3 lg:flex-row">
        {% for speedField in speedFields %}
        {% assign items_speeds = productSpeedDistance[speedField] %}
        {% if items_speeds %}
        {% for item in items_speeds %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="body-12-medium text-[#818181] tt-norms-pro-reg">{{ speedField | replace: '_', ' ' | capitalize
            }}:</span>
          <span class="font-12-medium tt-norms-pro-reg">{{ item }}</span>
        </li>
        {% endfor %}
        {% else %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="font-bold">{{ speedField | replace: '_', ' ' | capitalize }}:</span>
          <span>No data available</span>
        </li>
        {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- Weights -->
  {% assign productWeights = product.metafields.custom.weights.value %}
  {% if productWeights %}
  {% assign weightFields = "dry_weight" | split: "," %}
  <div
    class="specifiactions-list-row w-full flex flex-col gap-6 lg:flex-col lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:pb-10 lg:gap-x-5 lg:px-10 lg:w-[calc(50%_-_1rem)]">

    <div class="w-full h-auto flex flex-row items-center justify-between py-6 dropdown-header"
      data-dropdown-target="weights">
      <p class="text-[20px] leading-[18px] tt-norms-pro-reg">{{ section.settings.weights_dropdown_title | default:
        "Weights" }}</p>
      {% render "plus-icon" %}
    </div>

    <div class="specification-container-list w-full h-0 overflow-y-hidden lg:flex-1 dropdown-content weights">
      <ul class="list-features w-full h-auto flex flex-col gap-y-2 lg:flex-wrap lg:gap-x-3 lg:flex-row">
        {% for weightField in weightFields %}
        {% assign items_weights = productWeights[weightField] %}
        {% if items_weights %}
        {% for item in items_weights %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="body-12-medium text-[#818181] tt-norms-pro-reg">{{ weightField | replace: '_', ' ' | capitalize
            }}:</span>
          <span class="font-12-medium tt-norms-pro-reg">{{ item }}</span>
        </li>
        {% endfor %}
        {% else %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="font-bold">{{ weightField | replace: '_', ' ' | capitalize }}:</span>
          <span>No data available</span>
        </li>
        {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- Tanks -->
  {% assign productTanks = product.metafields.custom.tanks.value %}
  {% if productTanks %}
  {% assign tankFields = "fuel_tank,fresh_water_tank,holding_tank," | split: "," %}
  <div
    class="specifiactions-list-row w-full flex flex-col gap-6 lg:flex-col lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:pb-10 lg:gap-x-5 lg:px-10 lg:w-[calc(50%_-_1rem)]">

    <div class="w-full h-auto flex flex-row items-center justify-between py-6 dropdown-header"
      data-dropdown-target="tanks">
      <p class="text-[20px] leading-[18px] tt-norms-pro-reg">{{ section.settings.tanks_dropdown_title | default: "Tanks"
        }}</p>
      {% render "plus-icon" %}
    </div>

    <div class="specification-container-list w-full h-0 overflow-y-hidden lg:flex-1 dropdown-content tanks">
      <ul class="list-features w-full h-auto flex flex-col gap-y-2 lg:flex-wrap lg:gap-x-3 lg:flex-row">
        {% for tankField in tankFields %}
        {% assign items_tanks = productTanks[tankField] %}
        {% if items_tanks %}
        {% for item in items_tanks %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="body-12-medium text-[#818181] tt-norms-pro-reg">{{ tankField | replace: '_', ' ' | capitalize
            }}:</span>
          <span class="font-12-medium tt-norms-pro-reg">{{ item }}</span>
        </li>
        {% endfor %}
        {% else %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="font-bold">{{ tankField | replace: '_', ' ' | capitalize }}:</span>
          <span>No data available</span>
        </li>
        {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- Accommodations -->
  {% assign productAccommodations = product.metafields.custom.accomodations.value %}
  {% if productAccommodations %}
  {% assign accommodationFields = "cabins,bathrooms," | split: "," %}
  <div
    class="specifiactions-list-row w-full flex flex-col gap-6 lg:flex-col lg:border-b-[1px] lg:border-color-[var(--hover-accent-color)] lg:pb-10 lg:gap-x-5 lg:px-10 lg:w-[calc(50%_-_1rem)]">

    <div class="specification-container-heading w-auto h-auto lg:w-auto lg:min-w-[323px] pt-14 pb-8">
      <p class="specification-heading text-[48px] leading-[52px] tt-norms-pro-light">{{
        section.settings.general_features | default: "General arrangement" }}</p>
    </div>



    <div class="w-full h-auto flex flex-row items-center justify-between py-6 dropdown-header"
      data-dropdown-target="accommodations">
      <p class="text-[20px] leading-[18px] tt-norms-pro-reg">{{ section.settings.accommodations_dropdown_title |
        default: "Accommodations" }}</p>
      {% render "plus-icon" %}
    </div>

    <div class="specification-container-list w-full h-0 overflow-y-hidden lg:flex-1 dropdown-content accommodations">
      <ul class="list-features w-full h-auto flex flex-col gap-y-2 lg:flex-wrap lg:gap-x-3 lg:flex-row">
        {% for accommodationField in accommodationFields %}
        {% assign items_accommodations = productAccommodations[accommodationField] %}
        {% if items_accommodations %}
        {% for item in items_accommodations %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="body-12-medium text-[#818181] tt-norms-pro-reg">{{ accommodationField | replace: '_', ' ' |
            capitalize }}:</span>
          <span class="font-12-medium tt-norms-pro-reg">{{ item }}</span>
        </li>
        {% endfor %}
        {% else %}
        <li
          class="list-feature min-h-[52px] flex justify-between items-center rounded border border-[#F2EDED] px-4 py-[10px] lg:flex-1 lg:min-w-[calc(50%-0.75rem)] lg:max-w-[calc(50%-0.75rem)]">
          <span class="font-bold">{{ accommodationField | replace: '_', ' ' | capitalize }}:</span>
          <span>No data available</span>
        </li>
        {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}
</div>

<style>
  /* Ensuring the dropdown starts with height 0 for closed state */
  .dropdown-content {
    height: 0;
    overflow: hidden;
    transition: height 0.3s ease-in-out;
    /* Smooth transition for height */
  }

  /* Rotating the icon */
  .dropdown-header svg {
    transition: transform 0.3s ease-in-out;
    /* Smooth rotation for the icon */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    dropdownHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const targetClass = header.getAttribute('data-dropdown-target');
        const dropdownContent = document.querySelector(`.dropdown-content.${targetClass}`);
        const icon = header.querySelector('svg');

        if (dropdownContent) {
          const isOpen = dropdownContent.style.height !== '0px' && dropdownContent.style.height !== '';

          // Add 20px to the scrollHeight
          const contentHeight = dropdownContent.scrollHeight + 20;

          // Toggle height with smooth transition, adding 20px to scrollHeight
          dropdownContent.style.transition = 'height 0.3s ease-in-out';
          dropdownContent.style.height = isOpen ? '0px' : `${contentHeight}px`;

          // Rotate the icon
          icon.style.transition = 'transform 0.3s ease-in-out';
          icon.style.transform = isOpen ? 'rotate(0deg)' : 'rotate(45deg)';
        }
      });
    });
  });
</script>


{% comment %}
Section Schema Settings here;
{% endcomment %}
{% schema %}
{
"name": "Product Features",
"settings": [
{
"type": "text",
"id": "product_basics",
"default": "Basics",
"label": "Product Basics Title"
},
{
"type": "text",
"id": "basics_dropdown_title",
"default": "Basic Boat Details",
"label": "Basics Dropdown Title"
},
{
"type": "text",
"id": "technical_features",
"default": "Technical Feature",
"label": "Technical Feature Title"
},
{
"type": "text",
"id": "dimensions_dropdown_title",
"default": "Dimensions",
"label": "Dimensions Dropdown Title"
}, {
"type": "text",
"id": "speed_dropdown_title",
"default": "Speed & Distance",
"label": "Speed & Distance Dropdown Title"
}, {
"type": "text",
"id": "weights_dropdown_title",
"default": "Weights",
"label": "Weights Dropdown Title"
}, {
"type": "text",
"id": "tanks_dropdown_title",
"default": "Tanks",
"label": "Tanks Dropdown Title"
}, {
"type": "text",
"id": "accommodations_dropdown_title",
"default": "Accommodations",
"label": "Accommodations Dropdown Title"
}
]
}
{% endschema %}