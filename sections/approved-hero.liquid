<!-- hero approved -->
<div class="w-full h-auto">
  <div class="w-full h-svh relative">
    <div class="w-full h-full absolute left-0 top-0 right-0 bottom-0 z-0">
      <img
        class="w-full h-full object-cover object-center brightness-75"
        src="{{ section.settings.hero_image |  img_url: 'master' }}"
        alt="{{ section.settings.hero_image.alt }}">
    </div>
    <div class="w-full h-full absolute left-0 top-0 right-0 bottom-0 flex flex-col items-start justify-center z-20">

      {% assign layout_type = section.settings.layout_type %}

      {% case layout_type %}

        {% when "expansive_layout" %}
          <div class="w-full h-full flex flex-col items-center justify-end p-4 gap-y-6 lg:px-[60px] lg:justify-center">
            <div class="w-full h-auto flex flex-col items-start justify-center gap-y-4">
              <h1 class="text-[32px] leading-[36px] lg:text-[96px] lg:leading-[88px] font-semibold text-white" style="text-wrap: balance;">{{ section.settings.main_section_title }}</h1>
              <p class="text-[16px] leading-[22px] font-semibold text-white lg:text-[24px] lg:leading-[28px] lg:max-w-[1000px]">{{ section.settings.main_section_subheadings }}</p>
            </div>

            {% if section.settings.highlights_text != blank and section.settings.is_video_active and section.settings.video_source != blank %}
              <div class="w-full h-auto lg:absolute lg:left-0 lg:bottom-0 lg:right-0">
                <div class="w-full h-auto flex flex-col-reverse items-center justify-start gap-y-6 lg:flex-row lg:items-end lg:justify-between lg:gap-x-[60px] lg:px-[60px] lg:pb-[60px]">
                  {% if section.settings.highlights_text != blank %}
                    <div class="w-auto h-auto">
                      <p class="text-[16px] leading-[22px] font-semibold text-white lg:text-[24px] lg:leading-[28px]">{{ section.settings.highlights_text }}</p>
                    </div>
                  {% endif %}
  
                  <div class="w-full h-[187px] relative cursor-pointer lg:w-[440px] lg:h-[240px]">
                    {% if section.settings.video_source != blank and section.settings.is_video_active %}
                      <video
                        autoplay
                        muted
                        playisinline
                        loop
                        src="{{ section.settings.video_source }}"
                        class="w-full h-full object-cover object-center rounded-lg"></video>
                      <div class="floating-div w-[56px] h-[56px] flex items-center justify-center rounded-[50px] bg-blur-opacity backdrop:blur-[40px] absolute left-0 top-0 transition-all duration-150 ease-linear">
                        {% render 'play-icon' %}
                      </div>
                    {% endif %}
                  </div>
  
                </div>
              </div>
            {% endif %}
          </div>


        {% when "small_layout" %}

          <div class="w-full h-full flex flex-col items-center justify-end p-4 gap-y-10 lg:justify-center lg:px-[200px]">
            <div class="w-full h-auto flex flex-col items-start justify-center gap-y-4">
              <h1 class="text-[32px] leading-[36px] lg:text-[64px] lg:leading-[64px] font-semibold text-white" style="text-wrap: balance;">{{ section.settings.main_section_title }}</h1>
              <p class="text-[16px] leading-[22px] font-semibold text-white lg:text-[24px] lg:leading-[28px]">{{ section.settings.main_section_subheadings }}</p>
            </div>
            {% if section.settings.is_cta_active and section.settings.cta_text != blank %}
              <div class="w-full h-auto flex items-center justify-center">
                <div class="w-full h-auto lg:w-auto">
                  <div class="w-full h-[48px] flex items-center justify-center p-2.5 rounded-xl bg-white lg:bg-[#423C3B] lg:w-[220px]">
                    <p class="text-[16px] leading-[22px] font-semibold lg:text-white">{{ section.settings.cta_text }}</p>
                  </div>
                </div>
              </div>
            {% endif %}
          </div>

      {% endcase %}
    </div>
  </div>

  {% if section.settings.is_video_active and section.settings.video_source != blank and section.settings.video_embedded %}
    <div class="embed-container w-full h-full fixed left-0 top-0 right-0 z-50 bg-[#262322] flex flex-col items-center justify-center translate-y-[100%] transition-all duration-500 ease-out">
      <div class="w-full h-auto flex flex-col items-center justify-center gap-y-4 md:py-[60px] md:px-[120px]">
        <!-- embed source -->
        <div class="w-full h-auto embed-content">
          {{ section.settings.video_embedded }}
        </div>
        <!-- control overlay -->
        <div class="w-full absolute left-0 right-0 bottom-10 h-auto flex flex-row items-center justify-center md:static">
          <div class="w-auto h-auto bg-white flex flex-col items-center justify-center rounded-[50px] backdrop:blur-[40px] p-3 close-embed cursor-pointer transition-all duration-150 ease-in">
            {% render 'x-icon' %}
          </div>
        </div>
      </div>
    </div>
  {% endif %}
</div>

<script>
  
  document.addEventListener('DOMContentLoaded', () => {
    //get elements;
    const floatingDiv = document.querySelector('.floating-div');
    const targetContainer = floatingDiv.closest('.relative');
    const embedContainer = document.querySelector('.embed-container');
    const closeEmbed = document.querySelector('.close-embed');
  
    function positionFloatingCursor() {
      const rect = targetContainer.getBoundingClientRect();
      const centerX = (rect.width - floatingDiv.offsetWidth) / 2;
      const centerY = (rect.height - floatingDiv.offsetHeight) / 2;
      floatingDiv.style.transform = `translate(${centerX}px, ${centerY}px)`;
    }
  
    function handleFloatingCursor(event){
      const windowSize = window.innerWidth;

      if(windowSize >= 1024){
        const {clientX, clientY} = event;
        const rect = targetContainer.getBoundingClientRect();
  
        const mouseX = clientX - rect.left;
        const mouseY = clientY - rect.top; 
  
        const maxX = rect.width - floatingDiv.offsetWidth;
        const maxY = rect.height - floatingDiv.offsetHeight;
  
        const finalX = Math.min(maxX, Math.max(0, mouseX));
        const finalY = Math.min(maxY, Math.max(0, mouseY));
  
        floatingDiv.style.transform = `translate(${finalX}px, ${finalY}px)`;
      }
    }
  
    targetContainer.addEventListener('mousemove', handleFloatingCursor);
  
    targetContainer.addEventListener('mouseleave', () => {
      positionFloatingCursor();
    })
  
    targetContainer.addEventListener('click', () => {
      embedContainer.classList.remove('translate-y-[100%]');
    })
  
    closeEmbed.addEventListener('click', () => {
      embedContainer.classList.add('translate-y-[100%]');
      closeEmbed.classList.toggle('rotate-[90deg]');
    });
  
    positionFloatingCursor()
  
  })
</script>

{% schema %}
  {
    "name": "hero_approved",
    "settings": [
      {
        "type": "image_picker",
        "id": "hero_image",
        "label": "Hero Banner Image"
      },
      {
        "type": "text",
        "id": "main_section_title",
        "label": "Hero title"
      },
      {
        "type": "textarea",
        "id": "main_section_subheadings",
        "label": "Hero Subheading"
      },
      {
        "type": "checkbox",
        "id": "is_cta_active",
        "label": "Active Cta"
      }, {
        "type": "text",
        "id": "cta_text",
        "label": "Cta Text"
      }, {
        "type": "text",
        "id": "highlights_text",
        "label": "Highlighits Text"
      }, {
        "type": "checkbox",
        "id": "is_video_active",
        "label": "Active Video"
      }, {
        "type": "url",
        "id": "video_source",
        "label": "Video Source"
      }, {
        "type": "html",
        "id": "video_embedded",
        "label": "Video Embedded vimeo"
      }, {
        "type": "select",
        "id": "layout_type",
        "label": "Layout Type",
        "options": [
          {
            "label": "Small Layout",
            "value": "small_layout"
          }, {
            "label": "Expansive Layout",
            "value": "expansive_layout"
          }
        ],
        "default": "small_layout"
      }
    ]
  }
{% endschema %}