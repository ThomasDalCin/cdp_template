<!--product image w tab -->
<div class="w-full h-auto flex flex-col items-start justify-center gap-y-6 lg:flex-row mt-[100px] lg:relative mb-10">
    <div class="top-section-gallery w-full h-auto flex flex-col gap-y-2 items-center justify-start p-4 lg:w-2/3">
        <!--tab section-->

        <div
            class="tab-section w-full h-auto flex flex-row items-center justify-start mb-7 lg:absolute lg:justify-end lg:w-auto lg:top-0 lg:right-0 z-20">
            <div class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer lg:flex-none lg:w-[170px]"
                id="external-tab">
                <p class="body-14">External</p>
                <div
                    class="tab-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black transition-transform duration-300 ease-in-out">
                </div>
            </div>
            <div class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer lg:flex-none lg:w-[170px]"
                id="internal-tab">
                <p class="body-14">Internal</p>
                <div
                    class="tab-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black hidden transition-transform duration-300 ease-in-out">
                </div>
            </div>
        </div>

        <!--assign liquid variabls metaobjects -->
        {% assign external_gallery = product.metafields.custom.external_images_boat.value %}
        {% assign external_gallery_split = product.metafields.custom.external_images_boat.value | json | replace:'{', ''
        |
        replace:'}', ''| split: "," %}
        {% assign internal_gallery = product.metafields.custom.internal_boat_up.value %}
        {% assign internal_gallery_split = product.metafields.custom.internal_boat_up.value | json | replace:'{', '' |
        replace:'}', ''| split: "," %}
        {% assign internal_gallery_down = product.metafields.custom.internal_boat_down.value %}
        {% assign internal_gallery_down_split = product.metafields.custom.internal_boat_down.value | json | replace:'{',
        '' |
        replace:'}', ''| split: "," %}



        <!--external gallery section-->
        <div class="container-gallery w-full h-auto flex flex-col items-center justify-start gap-y-2 hidden"
            id="external-content" data-attribute="external-gallery">
            <div class="video-container w-full h-auto relative">
                {% if external_gallery %}
                {% for el in external_gallery_split %}
                {% assign val = el | split: '"' %}
                {% if forloop.first %}
                {% assign external_images = val[1] %}
                {% else %}
                {% assign external_images = external_images | append: "," | append: val[1] %}
                {% endif %}
                {% endfor %}
                {% assign external_images = external_images | split: "," %}
                {% assign external_video_key = 'boat_video' %}
                {% assign external_video = external_gallery[external_video_key] %}

                {% if external_video %}
                <video id="productVideo" class="video w-full h-[220px] rounded-lg lg:h-[505px] object-cover"
                    preload="metadata" muted poster="{{ external_video | img_url: 'master' }}">
                    <source src="{{ external_video | file_url }}" type="video/mp4">
                </video>
                <div id="playButton"
                    class="video-settings absolute inset-0 flex items-center justify-center cursor-pointer">
                    <svg class="w-12 h-12 text-white fill-current" xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z" />
                    </svg>
                </div>
                {% endif %}
                {% endif %}
            </div>

            <div class="w-full max-h-[220px] h-auto relative">
                <div class="flex flex-row items-center justify-start overflow-x-auto space-x-2 h-auto">
                    {% for external_image in external_images %}
                    {% assign external_img = external_gallery[external_image] %}
                    <div class="container-magnetic-scroll w-[165px] h-[128px] flex-shrink-0">
                        <img src="{{ external_img | img_url: 'master' }}" class="w-full h-full object-cover rounded-lg"
                            alt="" data-external-src="{{ external_img | img_url: 'master' }}">
                    </div>
                    {% endfor %}
                </div>
                <!-- arrows box -->
                <div
                    class="w-full h-auto hidden lg:flex lg:justify-end lg:gap-x-2 lg:absolute lg:right-[16px] lg:bottom-[32px]">
                    <button id="nextArrow"
                        class="carousel-arrow right-arrow flex items-center justify-center w-10 h-10 rounded-full border border-black text-white">
                        {% render 'arrow-right-icon' %}
                    </button>
                </div>
            </div>
        </div>

        <!--internal gallery section-->
        <div class="container-gallery w-full h-auto flex flex-col items-center justify-start gap-y-2 hidden"
            id="internal-content" data-attribute="internal-gallery">
            <div class="main-img-container w-full h-auto relative">
                {% if internal_gallery %}
                {% for el in internal_gallery_split %}
                {% assign val = el | split: '"' %}
                {% if forloop.first %}
                {% assign updated_values = val[1] %}
                {% else %}
                {% assign updated_values = updated_values | append: "," | append: val[1] %}
                {% endif %}
                {% endfor %}
                {% assign internal_images = updated_values | split: "," %}
                {% assign first_image = internal_gallery[internal_images[0]] %}
                <img src="{{ first_image | img_url: 'master' }}"
                    class="w-full h-[220px] rounded-lg object-cover object-center lg:h-[505px]" alt="Fallback image"
                    id="first-internal-img">
                {% endif %}
            </div>

            <div class="w-full h-auto">
                <div class="flex flex-row items-center justify-start overflow-x-auto space-x-2 h-auto">
                    {% for internal_image in internal_images %}
                    {% assign internal_img = internal_gallery[internal_image] %}
                    <div class="container-magnetic-scroll w-[165px] h-[128px] flex-shrink-0">
                        <img src="{{ internal_img | img_url: 'master' }}"
                            class="w-full h-full object-cover rounded-lg gallery-main-scroll-image"
                            data-image-src="{{ internal_img | img_url: 'master' }}" alt=""
                            data-internal-overlay="overlay-internal-gallery">
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!--internal gallery down section-->
        <div class="container-gallery w-full h-auto flex flex-col items-center justify-start gap-y-2 hidden"
            id="internal-down-content" data-attribute="internal-down-gallery">
            <div class="main-img-container w-full h-auto relative">
                {% if internal_gallery_down %}
                {% for el in internal_gallery_down_split %}
                {% assign val = el | split: '"' %}
                {% if forloop.first %}
                {% assign updated_values = val[1] %}
                {% else %}
                {% assign updated_values = updated_values | append: "," | append: val[1] %}
                {% endif %}
                {% endfor %}
                {% assign internal_down_images = updated_values | split: "," %}
                {% assign first_image = internal_gallery_down[internal_down_images[0]] %}
                <img src="{{ first_image | img_url: 'master' }}"
                    class="w-full h-[220px] rounded-lg object-cover object-center lg:h-[505px]" alt="Fallback image"
                    id="first-internal-down-img">
                {% endif %}
            </div>

            <div class="w-full h-auto">
                <div class="flex flex-row items-center justify-start overflow-x-auto space-x-2 h-auto">
                    {% for internal_down_image in internal_down_images %}
                    {% assign internal_down_img = internal_gallery_down[internal_down_image] %}
                    <div class="container-magnetic-scroll w-[165px] h-[128px] flex-shrink-0">
                        <img src="{{ internal_down_img | img_url: 'master' }}"
                            class="w-full h-full object-cover rounded-lg gallery-main-scroll-image"
                            data-image-src="{{ internal_down_img | img_url: 'master' }}" alt=""
                            data-internal-overlay="overlay-internal-down-gallery">
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>


        <!--internal gallery up section-->
        <div class="container-gallery w-full h-auto flex flex-col items-center justify-start gap-y-2 hidden"
            id="internal-up-content" data-attribute="internal-gallery">
            <div class="main-img-container w-full h-auto relative">
                {% if internal_gallery %}
                {% for el in internal_gallery_split %}
                {% assign val = el | split: '"' %}
                {% if forloop.first %}
                {% assign updated_values = val[1] %}
                {% else %}
                {% assign updated_values = updated_values | append: "," | append: val[1] %}
                {% endif %}
                {% endfor %}
                {% assign internal_images = updated_values | split: "," %}
                {% assign first_image = internal_gallery[internal_images[0]] %}
                <img src="{{ first_image | img_url: 'master' }}"
                    class="w-full h-[220px] rounded-lg object-cover object-center lg:h-[505px]" alt="Fallback image"
                    id="first-internal-up-img">
                {% endif %}
            </div>

            <div class="w-full h-auto">
                <div class="flex flex-row items-center justify-start overflow-x-auto space-x-2 h-auto">
                    {% for internal_image in internal_images %}
                    {% assign internal_img = internal_gallery[internal_image] %}
                    <div class="container-magnetic-scroll w-[165px] h-[128px] flex-shrink-0">
                        <img src="{{ internal_img | img_url: 'master' }}"
                            class="w-full h-full object-cover rounded-lg gallery-main-scroll-image"
                            data-image-src="{{ internal_img | img_url: 'master' }}" alt=""
                            data-internal-overlay="overlay-internal-gallery">
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!--overlay swiper gallery-->
        <div class="overlay-wrapper absolute z-40 inset-0 h-dvh bg-white hidden">
            <div class="overlay-wrapper-content w-full h-full p-4 flex flex-col gap-y-6">
                <div class="overlay-swiper-container w-full flex-1">
                    <div class="swiper mySwiper w-full h-full">
                        <div class="swiper-wrapper">
                            <!--render dynamically swiper slides here -->
                        </div>
                        <div class="swiper-pagination mb-4 flex items-center justify-center"></div>
                    </div>
                </div>
                <div class="overlay-cta-container w-full h-auto flex flex-col items-center justify-start gap-y-3 mt-5">
                    <div class="cta-delear">
                        <p class="body-14-medium">Locate dealer</p>
                        {% render 'cta-icon' %}
                    </div>
                    <div class="cta-brochure">
                        <p class="body-14-medium">Download brochure</p>
                        {% render 'download-icon' %}
                    </div>
                </div>
            </div>
        </div>

        <!--in-out tab section-->
        <div class="tab-section w-full h-auto flex flex-row items-center justify-start mt-7 mb-7 lg:absolute lg:justify-end lg:w-auto lg:bottom-0 lg:right-0 z-20"
            id="tab-in-out">
            <div class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer  lg:flex-none lg:w-[170px]"
                id="inboard-tab">
                <p class="body-14">Inboard</p>
                <div
                    class="tab-in-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black transition-transform duration-300 ease-in-out">
                </div>
            </div>
            <div class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer lg:flex-none lg:w-[170px]"
                id="outboard-tab">
                <p class="body-14">Outboard</p>
                <div
                    class="tab-out-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black hidden transition-transform duration-300 ease-in-out">
                </div>
            </div>
        </div>

        <!--galley tab section-->
        <div class="tab-section w-full h-auto flex flex-row items-center justify-start mt-7 mb-7 hidden lg:absolute lg:justify-end lg:w-auto lg:bottom-0 lg:right-0 z-20"
            id="galley-settings">
            <div class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer lg:flex-none lg:w-[170px]"
                id="internal-up-tab">
                <p class="body-14">Galley-Up</p>
                <div
                    class="tab-internal-up-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black transition-transform duration-300 ease-in-out">
                </div>
            </div>
            <div class="tab-content flex-1 h-auto flex items-center justify-center relative p-2 cursor-pointer lg:flex-none lg:w-[170px]"
                id="internal-down-tab">
                <p class="body-14">Galley-Down</p>
                <div
                    class="tab-internal-down-rect absolute left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 w-[16px] h-[1px] bg-black hidden transition-transform duration-300 ease-in-out">
                </div>
            </div>
        </div>
    </div>
    <!--top product details component-->
    <div class="product-details-component w-full h-auto p-4 flex flex-col gap-y-2 mb-[40px] lg:flex-1 lg:mt-14">
        <div class="product-detaiils-component-main w-full h-auto flex flex-col gap-y-2 items-start justify-start">
            <p class="body-16-medium">{{ product.title }}</p>
            <p class="body-12">{{ product.description }}</p>
        </div>
        <div
            class="product-details-magnetic-scroll w-full h-auto flex flex-row items-center justify-start gap-x-3 overflow-x-auto">
            {% assign productMetafieldsValues = 'top_speed,lenght,dry_weight' | split: ',' %}
            {% for productMetafieldsValue in productMetafieldsValues %}
            {% assign metafieldCustom = product.metafields.custom[productMetafieldsValue].value %}
            <div
                class="product-details-badge flex w-[127px] h-auto p-4 flex-col items-center gap-y-1 rounded-xl border border-[var(--secondary-background-color)] flex-shrink-0">
                <p class="body-14">{{ metafieldCustom }}</p>
                <p class="body-12 text-[var(--hover-color)]">{{ productMetafieldsValue | replace: '_', ' ' | upcase }}
                </p>
            </div>
            {% endfor %}
        </div>
        <div class="product-details-cta w-full h-auto flex flex-col items-center justify-start gap-y-3 mt-5">
            <div class="cta-delear">
                <p class="body-14-medium">Locate dealer</p>
                {% render 'cta-icon' %}
            </div>
            <div class="cta-brochure">
                <p class="body-14-medium">Download brochure</p>
                {% render 'download-icon' %}
            </div>
        </div>
    </div>
</div>


<style>
    /*swiper pagination bullet settings*/
    .swiper-pagination-bullet.swiper-pagination-bullet-active {
        background-color: var(--secondary-text-color) !important;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Video control setup
        const video = document.getElementById('productVideo');
        const playButton = document.getElementById('playButton');
        //get screen size
        const screenSize = window.innerWidth;

        if (video && playButton) {
            playButton.style.display = 'flex';

            playButton.addEventListener('click', function () {
                if (video.paused) {
                    video.play();
                    playButton.style.display = 'none';
                } else {
                    video.pause();
                    playButton.style.display = 'flex';
                }
            });

            video.addEventListener('click', function () {
                if (video.paused) {
                    video.play();
                    playButton.style.display = 'none';
                } else {
                    video.pause();
                    playButton.style.display = 'flex';
                }
            });

            video.addEventListener('play', function () {
                playButton.style.display = 'none';
            });

            video.addEventListener('pause', function () {
                playButton.style.display = 'flex';
            });

            video.addEventListener('ended', function () {
                playButton.style.display = 'flex';
            });
        }

        //Handle tab settings
        const externalTab = document.getElementById('external-tab');
        const internalTab = document.getElementById('internal-tab');
        const internalDownTab = document.getElementById('internal-down-tab');
        const internalUpTab = document.getElementById('internal-up-tab');
        const externalContent = document.getElementById('external-content');
        const internalContent = document.getElementById('internal-content');
        const internalDownContent = document.getElementById('internal-down-content');
        const internalUpContent = document.getElementById('internal-up-content');
        const externalRect = externalTab.querySelector('.tab-rect');
        const internalRect = internalTab.querySelector('.tab-rect');
        const internalDownRect = internalDownTab.querySelector('.tab-internal-down-rect');
        const internalUpRect = internalUpTab.querySelector('.tab-internal-up-rect');

        // Function to handle tab display and rect visibility
        function showTab(tab, content, rect) {
            //hide contents for each tab
            externalContent.classList.add('hidden');
            internalContent.classList.add('hidden');
            internalDownContent.classList.add('hidden');
            internalUpContent.classList.add('hidden');
            externalRect.classList.add('hidden');
            internalRect.classList.add('hidden');
            internalDownRect.classList.add('hidden');
            internalUpRect.classList.add('hidden');

            //display just the tab's content selected
            content.classList.remove('hidden');


            if (tab === externalTab) {
                externalRect.classList.remove('hidden');
            } else if (tab === internalTab) {
                internalRect.classList.remove('hidden');
                internalUpRect.classList.remove('hidden');
                rect.classList.remove('hidden');
            } else if (tab === internalDownTab || tab === internalUpTab) {
                internalRect.classList.remove('hidden');
                rect.classList.remove('hidden');
            }

            if (content.getAttribute('id') === 'internal-content') {
                document.getElementById('galley-settings').classList.remove('hidden');
                document.getElementById('galley-settings').classList.add('flex');
                document.getElementById('tab-in-out').classList.add('hidden');
            } else if (content.getAttribute('id') === 'external-content') {
                document.getElementById('tab-in-out').classList.add('flex');
                document.getElementById('tab-in-out').classList.remove('hidden');
                document.getElementById('galley-settings').classList.add('hidden');
            } else {
                document.getElementById('tab-in-out').classList.remove('flex');
                document.getElementById('tab-in-out').classList.add('hidden');
            }
        }

        // Event listeners for tab clicks
        externalTab.addEventListener('click', function () {
            showTab(externalTab, externalContent, externalRect);
        });

        internalTab.addEventListener('click', function () {
            showTab(internalTab, internalContent, internalRect);
        });

        internalDownTab.addEventListener('click', function () {
            showTab(internalDownTab, internalDownContent, internalDownRect);
        });

        internalUpTab.addEventListener('click', function () {
            showTab(internalUpTab, internalUpContent, internalUpRect);
        });

        //Show tab default after page loading
        showTab(externalTab, externalContent, externalRect);

        // Function to change the main image displayed with the image clicked
        function setupImageClickHandler(container) {
            const images = container.querySelectorAll('.gallery-main-scroll-image');

            // Event listener for each image
            images.forEach(image => {
                image.addEventListener('click', function () {
                    const newImageSrc = image.getAttribute('data-image-src');
                    if (newImageSrc) {
                        const mainImgContainer = container.querySelector('.main-img-container img');
                        if (mainImgContainer) {
                            mainImgContainer.src = newImageSrc;
                        }
                    }
                });
            });

            // If the container is external content
            if (container === externalContent) {
                const videoContainer = document.querySelector('.video');
                const videoSettings = document.querySelector('.video-settings');
                const parentVideo = document.querySelector('.video-container');
                const allExternalImages = Array.from(container.querySelectorAll("img[data-external-src]"));
                const mainImg = document.createElement('img');
                const classesToAdd = ['w-full', 'rounded-lg', 'object-cover', 'object-center'];

                // Function to add classes based on screen size
                function addClassesImage() {
                    const screenSize = window.innerWidth; // Get the current screen width
                    if (screenSize >= 1024) {
                        classesToAdd.push('h-[505px]');
                    } else {
                        classesToAdd.push('h-[220px]');
                    }
                    // Clear existing classes and add new ones
                    mainImg.className = ''; // Clear existing classes
                    classesToAdd.forEach((className) => mainImg.classList.add(className));
                }

                // Call initially and set up resize listener
                addClassesImage();
                window.addEventListener('resize', addClassesImage);

                // Handle external image click
                function handleExternalImageClick(e) {
                    let currentSrc = e.currentTarget.getAttribute('data-external-src');
                    if (!currentSrc) return;

                    if (allExternalImages.indexOf(e.currentTarget) === 0) {
                        if (!document.body.contains(videoContainer)) {
                            parentVideo.innerHTML = '';
                            parentVideo.appendChild(videoContainer);
                            parentVideo.appendChild(videoSettings);
                        }
                    } else {
                        if (document.body.contains(videoContainer)) {
                            videoContainer.remove();
                            videoSettings.remove();
                        }
                        parentVideo.appendChild(mainImg);
                        mainImg.setAttribute('src', currentSrc);
                        mainImg.setAttribute('id', 'first-external-img');
                    }
                }

                // Sort external images to prioritize the thumbnail
                allExternalImages.forEach((image, index) => {
                    if (image.src.includes('thumbnail')) {
                        const [thumbnail] = allExternalImages.splice(index, 1);
                        allExternalImages.unshift(thumbnail);
                    }
                });

                // Update external image container
                const externalImageContainer = container.querySelector('.flex.flex-row.items-center');
                externalImageContainer.innerHTML = '';
                allExternalImages.forEach((image) => {
                    const parentDiv = image.parentElement;
                    externalImageContainer.appendChild(parentDiv);
                });

                // Attach click listeners to external images
                allExternalImages.forEach((img) => {
                    img.addEventListener('click', handleExternalImageClick);
                });
            }
        }




        //Inizialize click Handler
        setupImageClickHandler(internalContent);
        setupImageClickHandler(internalDownContent);
        setupImageClickHandler(internalUpContent);
        setupImageClickHandler(externalContent);

        //Handle overlay Swiper
        const firstInternalImg = document.getElementById('first-internal-img');
        const firstInternalUpImg = document.getElementById('first-internal-up-img');
        const firstInternalDownImg = document.getElementById('first-internal-down-img');
        const firstContainerImages = [firstInternalImg, firstInternalUpImg, firstInternalDownImg];

        firstContainerImages.forEach((image) => {
            image.addEventListener('click', (e) => {
                const clieckImg = e.currentTarget;
                const overlayWrapper = document.querySelector('.overlay-wrapper');
                if (overlayWrapper.classList.contains('hidden')) {
                    overlayWrapper.classList.add('block');
                    overlayWrapper.classList.remove('hidden');
                    document.body.classList.add('no-scroll');
                }
                getAllImagesByClick(clieckImg)
            })
        })

        function createSwiperEl(slideImages) {
            const sliderWrapper = document.querySelector('.swiper-wrapper')
            slideImages.forEach((slide) => {
                const slideContent = document.createElement('div');
                slideContent.setAttribute('class', 'swiper-slide');
                const slideImg = document.createElement('img');
                slideImg.setAttribute('src', slide)
                const slideImgClasses = ['swiper-img', 'w-full', 'h-full', 'object-cover', 'object-center']
                slideImgClasses.forEach((classEl) => slideImg.classList.add(classEl));
                slideContent.appendChild(slideImg);
                sliderWrapper.appendChild(slideContent);
            })
        }

        function getAllImagesByClick(img) {
            const clickedImgSrc = img.src;
            const parentNodeClickedImg = img.closest('.container-gallery');
            const allGalleryImages = parentNodeClickedImg.querySelectorAll('.gallery-main-scroll-image');
            const allGalleryImagesPaths = [];
            allGalleryImages.forEach((image) => {
                const imagePath = image.getAttribute('src');
                allGalleryImagesPaths.push(imagePath);
            });
            createSwiperEl(allGalleryImagesPaths);
        }

        //Inizialize Swiper Slider
        var swiper = new Swiper(".mySwiper", {
            effect: 'fade',
            fadeEffect: {
                crossFade: true
            },
            pagination: {
                el: ".swiper-pagination",
                clickable: true
            },
            loop: true
        });

        const scrollContainer = document.querySelector('.flex.overflow-x-auto'); // Seleziona il contenitore delle immagini
        const nextArrow = document.getElementById('nextArrow');

        if (scrollContainer && nextArrow) {
            const images = Array.from(scrollContainer.querySelectorAll('.container-magnetic-scroll'));

            if (images.length > 0) {
                const scrollAmount = images[0].offsetWidth + parseInt(getComputedStyle(images[0]).marginRight);

                // Funzione per far scrollare il contenitore
                function scrollContainerBy(amount) {
                    const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;
                    let newScrollLeft = scrollContainer.scrollLeft + amount;

                    if (newScrollLeft > maxScrollLeft) {
                        newScrollLeft = maxScrollLeft;
                    }

                    scrollContainer.scrollTo({
                        left: newScrollLeft,
                        behavior: 'smooth'
                    });
                }

                // Event listener per il click della freccia destra
                nextArrow.addEventListener('click', function () {
                    scrollContainerBy(scrollAmount);
                });
            }
        }

    });
</script>