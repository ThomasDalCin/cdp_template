<!-- collection inspirational text container -->
<div class="w-full h-auto flex items-center justify-center px-6 pt-6 pb-14 md:px-12 md:py-[60px] lg:px-[120px] lg:pb-[120px] lg:pt-0" id="textSection">
  {% assign collection_metaObj_group = collection.metafields.custom.collection_metafields_group.value %}
  {% assign collection_emotional_text = "emotional_text" %}
  {% assign collection_metaObj_value = collection_metaObj_group[collection_emotional_text] %}
   {% if collection_metaObj_value %}
    <p id="ispirationalText" class="text-[24px] leading-[30px] text-center text-balance md:text-[48px] md:leading-[54px] lg:text-[40px] lg:leading-[46px] tt-norms-pro-reg">
      {{ collection_metaObj_value }}
    </p>
    {% else %}
    <p id="ispirationalText" class="text-[24px] leading-[30px] text-center text-balance md:text-[48px] md:leading-[54px] lg:text-[40px] lg:leading-[46px] tt-norms-pro-reg">
      no items found
    </p>
   {% endif %}
</div>

<script>
// Wait for the document to be fully loaded before applying the logic
document.addEventListener('DOMContentLoaded', () => {
  const paragraph = document.querySelector('#ispirationalText');

  if (paragraph) {
    const originalClasses = paragraph.className;
    const textContent = paragraph.textContent.trim(); // Rimuove spazi iniziali e finali
    paragraph.innerHTML = ''; // Svuota il contenuto originale

    // Crea uno span per ogni carattere (inclusi gli spazi tra le parole)
    textContent.split('').forEach((char, index) => {
      const span = document.createElement('span');
      span.className = originalClasses;
      span.style.display = 'inline-block';
      span.style.color = '#818181';
      
      // Gestisci gli spazi separandoli con un <span> specifico
      if (char === ' ') {
        span.textContent = '\u00A0'; // Non-breaking space (spazio non interrotto)
      } else {
        span.textContent = char;
      }

      paragraph.appendChild(span);
    });

    // Ottieni tutti gli span appena creati
    const spans = Array.from(paragraph.children);

    // GSAP ScrollTrigger Animazione
    gsap.registerPlugin(ScrollTrigger);

    gsap.to(spans, {
      color: '#000000', // Transizione a nero
      stagger: 0.05, // Ritardo tra un carattere e l'altro
      scrollTrigger: {
        trigger: '#textSection',
        start: 'top bottom',
        end: 'center center',
        scrub: true,
      },
    });
  }
});

</script>


